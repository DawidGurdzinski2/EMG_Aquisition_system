
EMG.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b3a8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002c2c  0800b548  0800b548  0001b548  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e174  0800e174  00020138  2**0
                  CONTENTS
  4 .ARM          00000008  0800e174  0800e174  0001e174  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e17c  0800e17c  00020138  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e17c  0800e17c  0001e17c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e180  0800e180  0001e180  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000138  20000000  0800e184  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003e50  20000138  0800e2bc  00020138  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003f88  0800e2bc  00023f88  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020138  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019d34  00000000  00000000  00020168  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000040d9  00000000  00000000  00039e9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001650  00000000  00000000  0003df78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001428  00000000  00000000  0003f5c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c1ad  00000000  00000000  000409f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f3de  00000000  00000000  0005cb9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009de3d  00000000  00000000  0007bf7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00119db8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005eac  00000000  00000000  00119e08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000138 	.word	0x20000138
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800b530 	.word	0x0800b530

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000013c 	.word	0x2000013c
 80001dc:	0800b530 	.word	0x0800b530

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <SPI_Write_Byte>:
/*********************************************


*********************************************/	
 uint8_t SPI_Write_Byte(uint8_t value)                                    
{    
 8000584:	b480      	push	{r7}
 8000586:	b083      	sub	sp, #12
 8000588:	af00      	add	r7, sp, #0
 800058a:	4603      	mov	r3, r0
 800058c:	71fb      	strb	r3, [r7, #7]
		Driver_Delay_us(10);
		value = (value << 1); 	
	}
#else
	
    __HAL_SPI_ENABLE(&hspi1);
 800058e:	4b17      	ldr	r3, [pc, #92]	; (80005ec <SPI_Write_Byte+0x68>)
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	681a      	ldr	r2, [r3, #0]
 8000594:	4b15      	ldr	r3, [pc, #84]	; (80005ec <SPI_Write_Byte+0x68>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800059c:	601a      	str	r2, [r3, #0]
	SPI1->CR2 |= (1)<<12;
 800059e:	4b14      	ldr	r3, [pc, #80]	; (80005f0 <SPI_Write_Byte+0x6c>)
 80005a0:	685b      	ldr	r3, [r3, #4]
 80005a2:	4a13      	ldr	r2, [pc, #76]	; (80005f0 <SPI_Write_Byte+0x6c>)
 80005a4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80005a8:	6053      	str	r3, [r2, #4]
	
	while((SPI1->SR & (1<<1)) == 0)
 80005aa:	bf00      	nop
 80005ac:	4b10      	ldr	r3, [pc, #64]	; (80005f0 <SPI_Write_Byte+0x6c>)
 80005ae:	689b      	ldr	r3, [r3, #8]
 80005b0:	f003 0302 	and.w	r3, r3, #2
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d0f9      	beq.n	80005ac <SPI_Write_Byte+0x28>
		;
        
        *((__IO uint8_t *)(&SPI1->DR)) = value;
 80005b8:	4a0e      	ldr	r2, [pc, #56]	; (80005f4 <SPI_Write_Byte+0x70>)
 80005ba:	79fb      	ldrb	r3, [r7, #7]
 80005bc:	7013      	strb	r3, [r2, #0]
        
        while(SPI1->SR & (1<<7)) ; //Wait for not busy
 80005be:	bf00      	nop
 80005c0:	4b0b      	ldr	r3, [pc, #44]	; (80005f0 <SPI_Write_Byte+0x6c>)
 80005c2:	689b      	ldr	r3, [r3, #8]
 80005c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d1f9      	bne.n	80005c0 <SPI_Write_Byte+0x3c>

        while((SPI1->SR & (1<<0)) == 0) ; // Wait for the receiving area to be empty
 80005cc:	bf00      	nop
 80005ce:	4b08      	ldr	r3, [pc, #32]	; (80005f0 <SPI_Write_Byte+0x6c>)
 80005d0:	689b      	ldr	r3, [r3, #8]
 80005d2:	f003 0301 	and.w	r3, r3, #1
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d0f9      	beq.n	80005ce <SPI_Write_Byte+0x4a>
        
        return *((__IO uint8_t *)(&SPI1->DR));
 80005da:	4b06      	ldr	r3, [pc, #24]	; (80005f4 <SPI_Write_Byte+0x70>)
 80005dc:	781b      	ldrb	r3, [r3, #0]
 80005de:	b2db      	uxtb	r3, r3

#endif
}
 80005e0:	4618      	mov	r0, r3
 80005e2:	370c      	adds	r7, #12
 80005e4:	46bd      	mov	sp, r7
 80005e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ea:	4770      	bx	lr
 80005ec:	20003b20 	.word	0x20003b20
 80005f0:	40013000 	.word	0x40013000
 80005f4:	4001300c 	.word	0x4001300c

080005f8 <Driver_Delay_ms>:
/*********************************************


*********************************************/	
void Driver_Delay_ms(uint32_t xms)	
{	
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b082      	sub	sp, #8
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
	HAL_Delay(xms);
 8000600:	6878      	ldr	r0, [r7, #4]
 8000602:	f002 febd 	bl	8003380 <HAL_Delay>
}
 8000606:	bf00      	nop
 8000608:	3708      	adds	r7, #8
 800060a:	46bd      	mov	sp, r7
 800060c:	bd80      	pop	{r7, pc}
	...

08000610 <LCD_Reset>:
***********************************************************************************************************************/
/*******************************************************************************
function:
			Hardware reset
*******************************************************************************/
static void LCD_Reset(void){
 8000610:	b580      	push	{r7, lr}
 8000612:	af00      	add	r7, sp, #0
	LCD_RST_1;
 8000614:	2201      	movs	r2, #1
 8000616:	f44f 7100 	mov.w	r1, #512	; 0x200
 800061a:	480d      	ldr	r0, [pc, #52]	; (8000650 <LCD_Reset+0x40>)
 800061c:	f004 f8e4 	bl	80047e8 <HAL_GPIO_WritePin>
	Driver_Delay_ms(100);
 8000620:	2064      	movs	r0, #100	; 0x64
 8000622:	f7ff ffe9 	bl	80005f8 <Driver_Delay_ms>
	LCD_RST_0;
 8000626:	2200      	movs	r2, #0
 8000628:	f44f 7100 	mov.w	r1, #512	; 0x200
 800062c:	4808      	ldr	r0, [pc, #32]	; (8000650 <LCD_Reset+0x40>)
 800062e:	f004 f8db 	bl	80047e8 <HAL_GPIO_WritePin>
	Driver_Delay_ms(100);
 8000632:	2064      	movs	r0, #100	; 0x64
 8000634:	f7ff ffe0 	bl	80005f8 <Driver_Delay_ms>
	LCD_RST_1;
 8000638:	2201      	movs	r2, #1
 800063a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800063e:	4804      	ldr	r0, [pc, #16]	; (8000650 <LCD_Reset+0x40>)
 8000640:	f004 f8d2 	bl	80047e8 <HAL_GPIO_WritePin>
	Driver_Delay_ms(100);
 8000644:	2064      	movs	r0, #100	; 0x64
 8000646:	f7ff ffd7 	bl	80005f8 <Driver_Delay_ms>
}
 800064a:	bf00      	nop
 800064c:	bd80      	pop	{r7, pc}
 800064e:	bf00      	nop
 8000650:	40020000 	.word	0x40020000

08000654 <LCD_WriteReg>:

/*******************************************************************************
function:
		Write register address and data
*******************************************************************************/
static void LCD_WriteReg(uint8_t Reg){
 8000654:	b580      	push	{r7, lr}
 8000656:	b082      	sub	sp, #8
 8000658:	af00      	add	r7, sp, #0
 800065a:	4603      	mov	r3, r0
 800065c:	71fb      	strb	r3, [r7, #7]
	LCD_DC_0;
 800065e:	2200      	movs	r2, #0
 8000660:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000664:	480a      	ldr	r0, [pc, #40]	; (8000690 <LCD_WriteReg+0x3c>)
 8000666:	f004 f8bf 	bl	80047e8 <HAL_GPIO_WritePin>
	LCD_CS_0;
 800066a:	2200      	movs	r2, #0
 800066c:	2140      	movs	r1, #64	; 0x40
 800066e:	4809      	ldr	r0, [pc, #36]	; (8000694 <LCD_WriteReg+0x40>)
 8000670:	f004 f8ba 	bl	80047e8 <HAL_GPIO_WritePin>
	SPI_Write_Byte(Reg);
 8000674:	79fb      	ldrb	r3, [r7, #7]
 8000676:	4618      	mov	r0, r3
 8000678:	f7ff ff84 	bl	8000584 <SPI_Write_Byte>
	LCD_CS_1;
 800067c:	2201      	movs	r2, #1
 800067e:	2140      	movs	r1, #64	; 0x40
 8000680:	4804      	ldr	r0, [pc, #16]	; (8000694 <LCD_WriteReg+0x40>)
 8000682:	f004 f8b1 	bl	80047e8 <HAL_GPIO_WritePin>
}
 8000686:	bf00      	nop
 8000688:	3708      	adds	r7, #8
 800068a:	46bd      	mov	sp, r7
 800068c:	bd80      	pop	{r7, pc}
 800068e:	bf00      	nop
 8000690:	40020000 	.word	0x40020000
 8000694:	40020400 	.word	0x40020400

08000698 <LCD_WriteData_8Bit>:

static void LCD_WriteData_8Bit(uint8_t Data){
 8000698:	b580      	push	{r7, lr}
 800069a:	b082      	sub	sp, #8
 800069c:	af00      	add	r7, sp, #0
 800069e:	4603      	mov	r3, r0
 80006a0:	71fb      	strb	r3, [r7, #7]
	LCD_DC_1;
 80006a2:	2201      	movs	r2, #1
 80006a4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006a8:	480a      	ldr	r0, [pc, #40]	; (80006d4 <LCD_WriteData_8Bit+0x3c>)
 80006aa:	f004 f89d 	bl	80047e8 <HAL_GPIO_WritePin>
	LCD_CS_0;
 80006ae:	2200      	movs	r2, #0
 80006b0:	2140      	movs	r1, #64	; 0x40
 80006b2:	4809      	ldr	r0, [pc, #36]	; (80006d8 <LCD_WriteData_8Bit+0x40>)
 80006b4:	f004 f898 	bl	80047e8 <HAL_GPIO_WritePin>
	SPI_Write_Byte(Data);
 80006b8:	79fb      	ldrb	r3, [r7, #7]
 80006ba:	4618      	mov	r0, r3
 80006bc:	f7ff ff62 	bl	8000584 <SPI_Write_Byte>
	LCD_CS_1;
 80006c0:	2201      	movs	r2, #1
 80006c2:	2140      	movs	r1, #64	; 0x40
 80006c4:	4804      	ldr	r0, [pc, #16]	; (80006d8 <LCD_WriteData_8Bit+0x40>)
 80006c6:	f004 f88f 	bl	80047e8 <HAL_GPIO_WritePin>
}
 80006ca:	bf00      	nop
 80006cc:	3708      	adds	r7, #8
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	40020000 	.word	0x40020000
 80006d8:	40020400 	.word	0x40020400

080006dc <LCD_WriteData_NLen16Bit>:
	SPI_Write_Byte(Data >> 8);
	SPI_Write_Byte(Data & 0XFF);
	LCD_CS_1;
}*/

static void LCD_WriteData_NLen16Bit(uint16_t Data,uint32_t DataLen){
 80006dc:	b580      	push	{r7, lr}
 80006de:	b084      	sub	sp, #16
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	4603      	mov	r3, r0
 80006e4:	6039      	str	r1, [r7, #0]
 80006e6:	80fb      	strh	r3, [r7, #6]
	uint32_t i;
	LCD_DC_1;
 80006e8:	2201      	movs	r2, #1
 80006ea:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006ee:	4813      	ldr	r0, [pc, #76]	; (800073c <LCD_WriteData_NLen16Bit+0x60>)
 80006f0:	f004 f87a 	bl	80047e8 <HAL_GPIO_WritePin>
	LCD_CS_0;
 80006f4:	2200      	movs	r2, #0
 80006f6:	2140      	movs	r1, #64	; 0x40
 80006f8:	4811      	ldr	r0, [pc, #68]	; (8000740 <LCD_WriteData_NLen16Bit+0x64>)
 80006fa:	f004 f875 	bl	80047e8 <HAL_GPIO_WritePin>
	for(i = 0; i < DataLen; i++){
 80006fe:	2300      	movs	r3, #0
 8000700:	60fb      	str	r3, [r7, #12]
 8000702:	e00e      	b.n	8000722 <LCD_WriteData_NLen16Bit+0x46>
		SPI_Write_Byte( (uint8_t)(Data >> 8) );
 8000704:	88fb      	ldrh	r3, [r7, #6]
 8000706:	0a1b      	lsrs	r3, r3, #8
 8000708:	b29b      	uxth	r3, r3
 800070a:	b2db      	uxtb	r3, r3
 800070c:	4618      	mov	r0, r3
 800070e:	f7ff ff39 	bl	8000584 <SPI_Write_Byte>
		SPI_Write_Byte( (uint8_t)(Data & 0XFF) );
 8000712:	88fb      	ldrh	r3, [r7, #6]
 8000714:	b2db      	uxtb	r3, r3
 8000716:	4618      	mov	r0, r3
 8000718:	f7ff ff34 	bl	8000584 <SPI_Write_Byte>
	for(i = 0; i < DataLen; i++){
 800071c:	68fb      	ldr	r3, [r7, #12]
 800071e:	3301      	adds	r3, #1
 8000720:	60fb      	str	r3, [r7, #12]
 8000722:	68fa      	ldr	r2, [r7, #12]
 8000724:	683b      	ldr	r3, [r7, #0]
 8000726:	429a      	cmp	r2, r3
 8000728:	d3ec      	bcc.n	8000704 <LCD_WriteData_NLen16Bit+0x28>
	}	
	LCD_CS_1;
 800072a:	2201      	movs	r2, #1
 800072c:	2140      	movs	r1, #64	; 0x40
 800072e:	4804      	ldr	r0, [pc, #16]	; (8000740 <LCD_WriteData_NLen16Bit+0x64>)
 8000730:	f004 f85a 	bl	80047e8 <HAL_GPIO_WritePin>
}
 8000734:	bf00      	nop
 8000736:	3710      	adds	r7, #16
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}
 800073c:	40020000 	.word	0x40020000
 8000740:	40020400 	.word	0x40020400

08000744 <LCD_InitReg>:

/*******************************************************************************
function:
		Common register initialization
*******************************************************************************/
static void LCD_InitReg(void){	
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0
	//ST7735R Frame Rate
	LCD_WriteReg(0xB1); 
 8000748:	20b1      	movs	r0, #177	; 0xb1
 800074a:	f7ff ff83 	bl	8000654 <LCD_WriteReg>
	LCD_WriteData_8Bit(0x01); 
 800074e:	2001      	movs	r0, #1
 8000750:	f7ff ffa2 	bl	8000698 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x2C); 
 8000754:	202c      	movs	r0, #44	; 0x2c
 8000756:	f7ff ff9f 	bl	8000698 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x2D); 
 800075a:	202d      	movs	r0, #45	; 0x2d
 800075c:	f7ff ff9c 	bl	8000698 <LCD_WriteData_8Bit>

	LCD_WriteReg(0xB2); 
 8000760:	20b2      	movs	r0, #178	; 0xb2
 8000762:	f7ff ff77 	bl	8000654 <LCD_WriteReg>
	LCD_WriteData_8Bit(0x01); 
 8000766:	2001      	movs	r0, #1
 8000768:	f7ff ff96 	bl	8000698 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x2C); 
 800076c:	202c      	movs	r0, #44	; 0x2c
 800076e:	f7ff ff93 	bl	8000698 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x2D); 
 8000772:	202d      	movs	r0, #45	; 0x2d
 8000774:	f7ff ff90 	bl	8000698 <LCD_WriteData_8Bit>

	LCD_WriteReg(0xB3); 
 8000778:	20b3      	movs	r0, #179	; 0xb3
 800077a:	f7ff ff6b 	bl	8000654 <LCD_WriteReg>
	LCD_WriteData_8Bit(0x01); 
 800077e:	2001      	movs	r0, #1
 8000780:	f7ff ff8a 	bl	8000698 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x2C); 
 8000784:	202c      	movs	r0, #44	; 0x2c
 8000786:	f7ff ff87 	bl	8000698 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x2D); 
 800078a:	202d      	movs	r0, #45	; 0x2d
 800078c:	f7ff ff84 	bl	8000698 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x01); 
 8000790:	2001      	movs	r0, #1
 8000792:	f7ff ff81 	bl	8000698 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x2C); 
 8000796:	202c      	movs	r0, #44	; 0x2c
 8000798:	f7ff ff7e 	bl	8000698 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x2D); 
 800079c:	202d      	movs	r0, #45	; 0x2d
 800079e:	f7ff ff7b 	bl	8000698 <LCD_WriteData_8Bit>
	
	LCD_WriteReg(0xB4); //Column inversion 
 80007a2:	20b4      	movs	r0, #180	; 0xb4
 80007a4:	f7ff ff56 	bl	8000654 <LCD_WriteReg>
	LCD_WriteData_8Bit(0x07); 
 80007a8:	2007      	movs	r0, #7
 80007aa:	f7ff ff75 	bl	8000698 <LCD_WriteData_8Bit>
	
	//ST7735R Power Sequence
	LCD_WriteReg(0xC0); 
 80007ae:	20c0      	movs	r0, #192	; 0xc0
 80007b0:	f7ff ff50 	bl	8000654 <LCD_WriteReg>
	LCD_WriteData_8Bit(0xA2); 
 80007b4:	20a2      	movs	r0, #162	; 0xa2
 80007b6:	f7ff ff6f 	bl	8000698 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x02); 
 80007ba:	2002      	movs	r0, #2
 80007bc:	f7ff ff6c 	bl	8000698 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x84); 
 80007c0:	2084      	movs	r0, #132	; 0x84
 80007c2:	f7ff ff69 	bl	8000698 <LCD_WriteData_8Bit>
	LCD_WriteReg(0xC1); 
 80007c6:	20c1      	movs	r0, #193	; 0xc1
 80007c8:	f7ff ff44 	bl	8000654 <LCD_WriteReg>
	LCD_WriteData_8Bit(0xC5); 
 80007cc:	20c5      	movs	r0, #197	; 0xc5
 80007ce:	f7ff ff63 	bl	8000698 <LCD_WriteData_8Bit>

	LCD_WriteReg(0xC2); 
 80007d2:	20c2      	movs	r0, #194	; 0xc2
 80007d4:	f7ff ff3e 	bl	8000654 <LCD_WriteReg>
	LCD_WriteData_8Bit(0x0A); 
 80007d8:	200a      	movs	r0, #10
 80007da:	f7ff ff5d 	bl	8000698 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x00); 
 80007de:	2000      	movs	r0, #0
 80007e0:	f7ff ff5a 	bl	8000698 <LCD_WriteData_8Bit>

	LCD_WriteReg(0xC3); 
 80007e4:	20c3      	movs	r0, #195	; 0xc3
 80007e6:	f7ff ff35 	bl	8000654 <LCD_WriteReg>
	LCD_WriteData_8Bit(0x8A); 
 80007ea:	208a      	movs	r0, #138	; 0x8a
 80007ec:	f7ff ff54 	bl	8000698 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x2A); 
 80007f0:	202a      	movs	r0, #42	; 0x2a
 80007f2:	f7ff ff51 	bl	8000698 <LCD_WriteData_8Bit>
	LCD_WriteReg(0xC4); 
 80007f6:	20c4      	movs	r0, #196	; 0xc4
 80007f8:	f7ff ff2c 	bl	8000654 <LCD_WriteReg>
	LCD_WriteData_8Bit(0x8A); 
 80007fc:	208a      	movs	r0, #138	; 0x8a
 80007fe:	f7ff ff4b 	bl	8000698 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0xEE); 
 8000802:	20ee      	movs	r0, #238	; 0xee
 8000804:	f7ff ff48 	bl	8000698 <LCD_WriteData_8Bit>
	
	LCD_WriteReg(0xC5); //VCOM 
 8000808:	20c5      	movs	r0, #197	; 0xc5
 800080a:	f7ff ff23 	bl	8000654 <LCD_WriteReg>
	LCD_WriteData_8Bit(0x0E); 
 800080e:	200e      	movs	r0, #14
 8000810:	f7ff ff42 	bl	8000698 <LCD_WriteData_8Bit>
	
	//ST7735R Gamma Sequence
	LCD_WriteReg(0xe0); 
 8000814:	20e0      	movs	r0, #224	; 0xe0
 8000816:	f7ff ff1d 	bl	8000654 <LCD_WriteReg>
	LCD_WriteData_8Bit(0x0f); 
 800081a:	200f      	movs	r0, #15
 800081c:	f7ff ff3c 	bl	8000698 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x1a); 
 8000820:	201a      	movs	r0, #26
 8000822:	f7ff ff39 	bl	8000698 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x0f); 
 8000826:	200f      	movs	r0, #15
 8000828:	f7ff ff36 	bl	8000698 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x18); 
 800082c:	2018      	movs	r0, #24
 800082e:	f7ff ff33 	bl	8000698 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x2f); 
 8000832:	202f      	movs	r0, #47	; 0x2f
 8000834:	f7ff ff30 	bl	8000698 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x28); 
 8000838:	2028      	movs	r0, #40	; 0x28
 800083a:	f7ff ff2d 	bl	8000698 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x20); 
 800083e:	2020      	movs	r0, #32
 8000840:	f7ff ff2a 	bl	8000698 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x22); 
 8000844:	2022      	movs	r0, #34	; 0x22
 8000846:	f7ff ff27 	bl	8000698 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x1f); 
 800084a:	201f      	movs	r0, #31
 800084c:	f7ff ff24 	bl	8000698 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x1b); 
 8000850:	201b      	movs	r0, #27
 8000852:	f7ff ff21 	bl	8000698 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x23); 
 8000856:	2023      	movs	r0, #35	; 0x23
 8000858:	f7ff ff1e 	bl	8000698 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x37); 
 800085c:	2037      	movs	r0, #55	; 0x37
 800085e:	f7ff ff1b 	bl	8000698 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x00); 	
 8000862:	2000      	movs	r0, #0
 8000864:	f7ff ff18 	bl	8000698 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x07); 
 8000868:	2007      	movs	r0, #7
 800086a:	f7ff ff15 	bl	8000698 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x02); 
 800086e:	2002      	movs	r0, #2
 8000870:	f7ff ff12 	bl	8000698 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x10); 
 8000874:	2010      	movs	r0, #16
 8000876:	f7ff ff0f 	bl	8000698 <LCD_WriteData_8Bit>

	LCD_WriteReg(0xe1); 
 800087a:	20e1      	movs	r0, #225	; 0xe1
 800087c:	f7ff feea 	bl	8000654 <LCD_WriteReg>
	LCD_WriteData_8Bit(0x0f); 
 8000880:	200f      	movs	r0, #15
 8000882:	f7ff ff09 	bl	8000698 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x1b); 
 8000886:	201b      	movs	r0, #27
 8000888:	f7ff ff06 	bl	8000698 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x0f); 
 800088c:	200f      	movs	r0, #15
 800088e:	f7ff ff03 	bl	8000698 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x17); 
 8000892:	2017      	movs	r0, #23
 8000894:	f7ff ff00 	bl	8000698 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x33); 
 8000898:	2033      	movs	r0, #51	; 0x33
 800089a:	f7ff fefd 	bl	8000698 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x2c); 
 800089e:	202c      	movs	r0, #44	; 0x2c
 80008a0:	f7ff fefa 	bl	8000698 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x29); 
 80008a4:	2029      	movs	r0, #41	; 0x29
 80008a6:	f7ff fef7 	bl	8000698 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x2e); 
 80008aa:	202e      	movs	r0, #46	; 0x2e
 80008ac:	f7ff fef4 	bl	8000698 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x30); 
 80008b0:	2030      	movs	r0, #48	; 0x30
 80008b2:	f7ff fef1 	bl	8000698 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x30); 
 80008b6:	2030      	movs	r0, #48	; 0x30
 80008b8:	f7ff feee 	bl	8000698 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x39); 
 80008bc:	2039      	movs	r0, #57	; 0x39
 80008be:	f7ff feeb 	bl	8000698 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x3f); 
 80008c2:	203f      	movs	r0, #63	; 0x3f
 80008c4:	f7ff fee8 	bl	8000698 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x00); 
 80008c8:	2000      	movs	r0, #0
 80008ca:	f7ff fee5 	bl	8000698 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x07); 
 80008ce:	2007      	movs	r0, #7
 80008d0:	f7ff fee2 	bl	8000698 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x03); 
 80008d4:	2003      	movs	r0, #3
 80008d6:	f7ff fedf 	bl	8000698 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x10);  
 80008da:	2010      	movs	r0, #16
 80008dc:	f7ff fedc 	bl	8000698 <LCD_WriteData_8Bit>
		
	LCD_WriteReg(0xF0); //Enable test command  
 80008e0:	20f0      	movs	r0, #240	; 0xf0
 80008e2:	f7ff feb7 	bl	8000654 <LCD_WriteReg>
	LCD_WriteData_8Bit(0x01); 
 80008e6:	2001      	movs	r0, #1
 80008e8:	f7ff fed6 	bl	8000698 <LCD_WriteData_8Bit>
	
	LCD_WriteReg(0xF6); //Disable ram power save mode 
 80008ec:	20f6      	movs	r0, #246	; 0xf6
 80008ee:	f7ff feb1 	bl	8000654 <LCD_WriteReg>
	LCD_WriteData_8Bit(0x00); 
 80008f2:	2000      	movs	r0, #0
 80008f4:	f7ff fed0 	bl	8000698 <LCD_WriteData_8Bit>
	
	LCD_WriteReg(0x3A); //65k mode 
 80008f8:	203a      	movs	r0, #58	; 0x3a
 80008fa:	f7ff feab 	bl	8000654 <LCD_WriteReg>
	LCD_WriteData_8Bit(0x05); 
 80008fe:	2005      	movs	r0, #5
 8000900:	f7ff feca 	bl	8000698 <LCD_WriteData_8Bit>
		
}
 8000904:	bf00      	nop
 8000906:	bd80      	pop	{r7, pc}

08000908 <LCD_SetGramScanWay>:
function:	Set the display scan and color transfer modes
parameter: 
		Scan_dir   :   Scan direction
		Colorchose :   RGB or GBR color format
********************************************************************************/
void LCD_SetGramScanWay(LCD_SCAN_DIR Scan_dir){		
 8000908:	b580      	push	{r7, lr}
 800090a:	b084      	sub	sp, #16
 800090c:	af00      	add	r7, sp, #0
 800090e:	4603      	mov	r3, r0
 8000910:	71fb      	strb	r3, [r7, #7]
	//Get the screen scan direction
	sLCD_DIS.LCD_Scan_Dir = Scan_dir;
 8000912:	4a34      	ldr	r2, [pc, #208]	; (80009e4 <LCD_SetGramScanWay+0xdc>)
 8000914:	79fb      	ldrb	r3, [r7, #7]
 8000916:	7113      	strb	r3, [r2, #4]
	
	//Get GRAM and LCD width and height
	if(Scan_dir == L2R_U2D || Scan_dir == L2R_D2U || Scan_dir == R2L_U2D || Scan_dir == R2L_D2U){
 8000918:	79fb      	ldrb	r3, [r7, #7]
 800091a:	2b00      	cmp	r3, #0
 800091c:	d008      	beq.n	8000930 <LCD_SetGramScanWay+0x28>
 800091e:	79fb      	ldrb	r3, [r7, #7]
 8000920:	2b01      	cmp	r3, #1
 8000922:	d005      	beq.n	8000930 <LCD_SetGramScanWay+0x28>
 8000924:	79fb      	ldrb	r3, [r7, #7]
 8000926:	2b02      	cmp	r3, #2
 8000928:	d002      	beq.n	8000930 <LCD_SetGramScanWay+0x28>
 800092a:	79fb      	ldrb	r3, [r7, #7]
 800092c:	2b03      	cmp	r3, #3
 800092e:	d10c      	bne.n	800094a <LCD_SetGramScanWay+0x42>
		sLCD_DIS.LCD_Dis_Column	= LCD_HEIGHT ;
 8000930:	4b2c      	ldr	r3, [pc, #176]	; (80009e4 <LCD_SetGramScanWay+0xdc>)
 8000932:	2280      	movs	r2, #128	; 0x80
 8000934:	801a      	strh	r2, [r3, #0]
		sLCD_DIS.LCD_Dis_Page = LCD_WIDTH ;		
 8000936:	4b2b      	ldr	r3, [pc, #172]	; (80009e4 <LCD_SetGramScanWay+0xdc>)
 8000938:	22a0      	movs	r2, #160	; 0xa0
 800093a:	805a      	strh	r2, [r3, #2]
		sLCD_DIS.LCD_X_Adjust = LCD_X;
 800093c:	4b29      	ldr	r3, [pc, #164]	; (80009e4 <LCD_SetGramScanWay+0xdc>)
 800093e:	2202      	movs	r2, #2
 8000940:	80da      	strh	r2, [r3, #6]
		sLCD_DIS.LCD_Y_Adjust = LCD_Y;
 8000942:	4b28      	ldr	r3, [pc, #160]	; (80009e4 <LCD_SetGramScanWay+0xdc>)
 8000944:	2201      	movs	r2, #1
 8000946:	811a      	strh	r2, [r3, #8]
 8000948:	e00b      	b.n	8000962 <LCD_SetGramScanWay+0x5a>
	}else{
		sLCD_DIS.LCD_Dis_Column	= LCD_WIDTH ;
 800094a:	4b26      	ldr	r3, [pc, #152]	; (80009e4 <LCD_SetGramScanWay+0xdc>)
 800094c:	22a0      	movs	r2, #160	; 0xa0
 800094e:	801a      	strh	r2, [r3, #0]
		sLCD_DIS.LCD_Dis_Page = LCD_HEIGHT ;	
 8000950:	4b24      	ldr	r3, [pc, #144]	; (80009e4 <LCD_SetGramScanWay+0xdc>)
 8000952:	2280      	movs	r2, #128	; 0x80
 8000954:	805a      	strh	r2, [r3, #2]
		sLCD_DIS.LCD_X_Adjust = LCD_Y;
 8000956:	4b23      	ldr	r3, [pc, #140]	; (80009e4 <LCD_SetGramScanWay+0xdc>)
 8000958:	2201      	movs	r2, #1
 800095a:	80da      	strh	r2, [r3, #6]
		sLCD_DIS.LCD_Y_Adjust = LCD_X;
 800095c:	4b21      	ldr	r3, [pc, #132]	; (80009e4 <LCD_SetGramScanWay+0xdc>)
 800095e:	2202      	movs	r2, #2
 8000960:	811a      	strh	r2, [r3, #8]
	}
	
	// Gets the scan direction of GRAM
	uint16_t MemoryAccessReg_Data=0;  //0x36	
 8000962:	2300      	movs	r3, #0
 8000964:	81fb      	strh	r3, [r7, #14]
	switch (Scan_dir){				
 8000966:	79fb      	ldrb	r3, [r7, #7]
 8000968:	2b07      	cmp	r3, #7
 800096a:	d82b      	bhi.n	80009c4 <LCD_SetGramScanWay+0xbc>
 800096c:	a201      	add	r2, pc, #4	; (adr r2, 8000974 <LCD_SetGramScanWay+0x6c>)
 800096e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000972:	bf00      	nop
 8000974:	08000995 	.word	0x08000995
 8000978:	0800099b 	.word	0x0800099b
 800097c:	080009a1 	.word	0x080009a1
 8000980:	080009a7 	.word	0x080009a7
 8000984:	080009ad 	.word	0x080009ad
 8000988:	080009b3 	.word	0x080009b3
 800098c:	080009b9 	.word	0x080009b9
 8000990:	080009bf 	.word	0x080009bf
		case L2R_U2D:
			MemoryAccessReg_Data = 0X00 | 0x00;//x Scan direction | y Scan direction
 8000994:	2300      	movs	r3, #0
 8000996:	81fb      	strh	r3, [r7, #14]
			break;
 8000998:	e014      	b.n	80009c4 <LCD_SetGramScanWay+0xbc>
		case L2R_D2U:
			MemoryAccessReg_Data = 0x00 | 0x80;//0xC8 | 0X10
 800099a:	2380      	movs	r3, #128	; 0x80
 800099c:	81fb      	strh	r3, [r7, #14]
			break;
 800099e:	e011      	b.n	80009c4 <LCD_SetGramScanWay+0xbc>
		case R2L_U2D://	0X4
			MemoryAccessReg_Data = 0x40 | 0x00;
 80009a0:	2340      	movs	r3, #64	; 0x40
 80009a2:	81fb      	strh	r3, [r7, #14]
			break;
 80009a4:	e00e      	b.n	80009c4 <LCD_SetGramScanWay+0xbc>
		case R2L_D2U://	0XC
			MemoryAccessReg_Data = 0x40 | 0x80;
 80009a6:	23c0      	movs	r3, #192	; 0xc0
 80009a8:	81fb      	strh	r3, [r7, #14]
			break;
 80009aa:	e00b      	b.n	80009c4 <LCD_SetGramScanWay+0xbc>
		case U2D_L2R://0X2
			MemoryAccessReg_Data = 0X00 | 0X00 | 0x20;
 80009ac:	2320      	movs	r3, #32
 80009ae:	81fb      	strh	r3, [r7, #14]
			break;
 80009b0:	e008      	b.n	80009c4 <LCD_SetGramScanWay+0xbc>
		case U2D_R2L://0X6
			MemoryAccessReg_Data = 0x00 | 0X40 | 0x20;
 80009b2:	2360      	movs	r3, #96	; 0x60
 80009b4:	81fb      	strh	r3, [r7, #14]
			break;
 80009b6:	e005      	b.n	80009c4 <LCD_SetGramScanWay+0xbc>
		case D2U_L2R://0XA
			MemoryAccessReg_Data = 0x80 | 0x00 | 0x20;
 80009b8:	23a0      	movs	r3, #160	; 0xa0
 80009ba:	81fb      	strh	r3, [r7, #14]
			break;
 80009bc:	e002      	b.n	80009c4 <LCD_SetGramScanWay+0xbc>
		case D2U_R2L://0XE
			MemoryAccessReg_Data = 0x40 | 0x80 | 0x20;
 80009be:	23e0      	movs	r3, #224	; 0xe0
 80009c0:	81fb      	strh	r3, [r7, #14]
			break;
 80009c2:	bf00      	nop
	}
	

	// Set the read / write scan direction of the frame memory
	LCD_WriteReg(0x36); //MX, MY, RGB mode 	
 80009c4:	2036      	movs	r0, #54	; 0x36
 80009c6:	f7ff fe45 	bl	8000654 <LCD_WriteReg>
#if defined(LCD_1IN44)
	LCD_WriteData_8Bit( MemoryAccessReg_Data | 0x08);	//0x08 set RGB
#elif defined(LCD_1IN8)
	LCD_WriteData_8Bit( MemoryAccessReg_Data & 0xf7);	//RGB color filter panel
 80009ca:	89fb      	ldrh	r3, [r7, #14]
 80009cc:	b2db      	uxtb	r3, r3
 80009ce:	f023 0308 	bic.w	r3, r3, #8
 80009d2:	b2db      	uxtb	r3, r3
 80009d4:	4618      	mov	r0, r3
 80009d6:	f7ff fe5f 	bl	8000698 <LCD_WriteData_8Bit>
#endif
	
}
 80009da:	bf00      	nop
 80009dc:	3710      	adds	r7, #16
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	20000154 	.word	0x20000154

080009e8 <LCD_Init>:

/********************************************************************************
function:	
			initialization
********************************************************************************/
void LCD_Init( LCD_SCAN_DIR Lcd_ScanDir ){	
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b082      	sub	sp, #8
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	4603      	mov	r3, r0
 80009f0:	71fb      	strb	r3, [r7, #7]
	//Turn on the backlight
	LCD_BL_1;
 80009f2:	2201      	movs	r2, #1
 80009f4:	2110      	movs	r1, #16
 80009f6:	480f      	ldr	r0, [pc, #60]	; (8000a34 <LCD_Init+0x4c>)
 80009f8:	f003 fef6 	bl	80047e8 <HAL_GPIO_WritePin>
	
	//Hardware reset
	LCD_Reset(); 
 80009fc:	f7ff fe08 	bl	8000610 <LCD_Reset>
	
	//Set the initialization register
	LCD_InitReg();
 8000a00:	f7ff fea0 	bl	8000744 <LCD_InitReg>
	
	//Set the display scan and color transfer modes	
	LCD_SetGramScanWay( Lcd_ScanDir );
 8000a04:	79fb      	ldrb	r3, [r7, #7]
 8000a06:	4618      	mov	r0, r3
 8000a08:	f7ff ff7e 	bl	8000908 <LCD_SetGramScanWay>
	Driver_Delay_ms(200); 
 8000a0c:	20c8      	movs	r0, #200	; 0xc8
 8000a0e:	f7ff fdf3 	bl	80005f8 <Driver_Delay_ms>
	
	//sleep out
	LCD_WriteReg(0x11);
 8000a12:	2011      	movs	r0, #17
 8000a14:	f7ff fe1e 	bl	8000654 <LCD_WriteReg>
	Driver_Delay_ms(120);
 8000a18:	2078      	movs	r0, #120	; 0x78
 8000a1a:	f7ff fded 	bl	80005f8 <Driver_Delay_ms>
	
	//Turn on the LCD display
	LCD_WriteReg(0x29);	
 8000a1e:	2029      	movs	r0, #41	; 0x29
 8000a20:	f7ff fe18 	bl	8000654 <LCD_WriteReg>

	//clear
	LCD_Clear(WHITE);	
 8000a24:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000a28:	f000 f8d8 	bl	8000bdc <LCD_Clear>
}
 8000a2c:	bf00      	nop
 8000a2e:	3708      	adds	r7, #8
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bd80      	pop	{r7, pc}
 8000a34:	40020000 	.word	0x40020000

08000a38 <LCD_SetWindows>:
		Xstart 	:   X direction Start coordinates
		Ystart  :   Y direction Start coordinates
		Xend    :   X direction end coordinates
		Yend    :   Y direction end coordinates
********************************************************************************/
void LCD_SetWindows( POINT Xstart, POINT Ystart, POINT Xend, POINT Yend ){
 8000a38:	b590      	push	{r4, r7, lr}
 8000a3a:	b083      	sub	sp, #12
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	4604      	mov	r4, r0
 8000a40:	4608      	mov	r0, r1
 8000a42:	4611      	mov	r1, r2
 8000a44:	461a      	mov	r2, r3
 8000a46:	4623      	mov	r3, r4
 8000a48:	80fb      	strh	r3, [r7, #6]
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	80bb      	strh	r3, [r7, #4]
 8000a4e:	460b      	mov	r3, r1
 8000a50:	807b      	strh	r3, [r7, #2]
 8000a52:	4613      	mov	r3, r2
 8000a54:	803b      	strh	r3, [r7, #0]

	//set the X coordinates
	LCD_WriteReg ( 0x2A ); 				
 8000a56:	202a      	movs	r0, #42	; 0x2a
 8000a58:	f7ff fdfc 	bl	8000654 <LCD_WriteReg>
	LCD_WriteData_8Bit ( 0x00 );						//Set the horizontal starting point to the high octet
 8000a5c:	2000      	movs	r0, #0
 8000a5e:	f7ff fe1b 	bl	8000698 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit ( (Xstart & 0xff) + sLCD_DIS.LCD_X_Adjust);			//Set the horizontal starting point to the low octet
 8000a62:	88fb      	ldrh	r3, [r7, #6]
 8000a64:	b2da      	uxtb	r2, r3
 8000a66:	4b1e      	ldr	r3, [pc, #120]	; (8000ae0 <LCD_SetWindows+0xa8>)
 8000a68:	88db      	ldrh	r3, [r3, #6]
 8000a6a:	b2db      	uxtb	r3, r3
 8000a6c:	4413      	add	r3, r2
 8000a6e:	b2db      	uxtb	r3, r3
 8000a70:	4618      	mov	r0, r3
 8000a72:	f7ff fe11 	bl	8000698 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit ( 0x00 );				//Set the horizontal end to the high octet
 8000a76:	2000      	movs	r0, #0
 8000a78:	f7ff fe0e 	bl	8000698 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit ( (( Xend - 1 ) & 0xff) + sLCD_DIS.LCD_X_Adjust);	//Set the horizontal end to the low octet
 8000a7c:	887b      	ldrh	r3, [r7, #2]
 8000a7e:	b2da      	uxtb	r2, r3
 8000a80:	4b17      	ldr	r3, [pc, #92]	; (8000ae0 <LCD_SetWindows+0xa8>)
 8000a82:	88db      	ldrh	r3, [r3, #6]
 8000a84:	b2db      	uxtb	r3, r3
 8000a86:	4413      	add	r3, r2
 8000a88:	b2db      	uxtb	r3, r3
 8000a8a:	3b01      	subs	r3, #1
 8000a8c:	b2db      	uxtb	r3, r3
 8000a8e:	4618      	mov	r0, r3
 8000a90:	f7ff fe02 	bl	8000698 <LCD_WriteData_8Bit>

	//set the Y coordinates
	LCD_WriteReg ( 0x2B );
 8000a94:	202b      	movs	r0, #43	; 0x2b
 8000a96:	f7ff fddd 	bl	8000654 <LCD_WriteReg>
	LCD_WriteData_8Bit ( 0x00 );
 8000a9a:	2000      	movs	r0, #0
 8000a9c:	f7ff fdfc 	bl	8000698 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit ( (Ystart & 0xff) + sLCD_DIS.LCD_Y_Adjust);
 8000aa0:	88bb      	ldrh	r3, [r7, #4]
 8000aa2:	b2da      	uxtb	r2, r3
 8000aa4:	4b0e      	ldr	r3, [pc, #56]	; (8000ae0 <LCD_SetWindows+0xa8>)
 8000aa6:	891b      	ldrh	r3, [r3, #8]
 8000aa8:	b2db      	uxtb	r3, r3
 8000aaa:	4413      	add	r3, r2
 8000aac:	b2db      	uxtb	r3, r3
 8000aae:	4618      	mov	r0, r3
 8000ab0:	f7ff fdf2 	bl	8000698 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit ( 0x00 );
 8000ab4:	2000      	movs	r0, #0
 8000ab6:	f7ff fdef 	bl	8000698 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit ( ( (Yend - 1) & 0xff )+ sLCD_DIS.LCD_Y_Adjust);
 8000aba:	883b      	ldrh	r3, [r7, #0]
 8000abc:	b2da      	uxtb	r2, r3
 8000abe:	4b08      	ldr	r3, [pc, #32]	; (8000ae0 <LCD_SetWindows+0xa8>)
 8000ac0:	891b      	ldrh	r3, [r3, #8]
 8000ac2:	b2db      	uxtb	r3, r3
 8000ac4:	4413      	add	r3, r2
 8000ac6:	b2db      	uxtb	r3, r3
 8000ac8:	3b01      	subs	r3, #1
 8000aca:	b2db      	uxtb	r3, r3
 8000acc:	4618      	mov	r0, r3
 8000ace:	f7ff fde3 	bl	8000698 <LCD_WriteData_8Bit>
		
	LCD_WriteReg(0x2C);	
 8000ad2:	202c      	movs	r0, #44	; 0x2c
 8000ad4:	f7ff fdbe 	bl	8000654 <LCD_WriteReg>
	
}
 8000ad8:	bf00      	nop
 8000ada:	370c      	adds	r7, #12
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bd90      	pop	{r4, r7, pc}
 8000ae0:	20000154 	.word	0x20000154

08000ae4 <LCD_SetCursor>:
function:	Set the display point (Xpoint, Ypoint)
parameter: 
		xStart :   X direction Start coordinates
		xEnd   :   X direction end coordinates
********************************************************************************/
void LCD_SetCursor ( POINT Xpoint, POINT Ypoint ){
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b082      	sub	sp, #8
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	4603      	mov	r3, r0
 8000aec:	460a      	mov	r2, r1
 8000aee:	80fb      	strh	r3, [r7, #6]
 8000af0:	4613      	mov	r3, r2
 8000af2:	80bb      	strh	r3, [r7, #4]
	LCD_SetWindows ( Xpoint, Ypoint, Xpoint , Ypoint );
 8000af4:	88bb      	ldrh	r3, [r7, #4]
 8000af6:	88fa      	ldrh	r2, [r7, #6]
 8000af8:	88b9      	ldrh	r1, [r7, #4]
 8000afa:	88f8      	ldrh	r0, [r7, #6]
 8000afc:	f7ff ff9c 	bl	8000a38 <LCD_SetWindows>
}
 8000b00:	bf00      	nop
 8000b02:	3708      	adds	r7, #8
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bd80      	pop	{r7, pc}

08000b08 <LCD_SetColor>:
function:	Set show color
parameter: 
		Color  :   Set show color
********************************************************************************/
//static void LCD_SetColor( LENGTH Dis_Width, LENGTH Dis_Height, COLOR Color ){
void LCD_SetColor( COLOR Color ,POINT Xpoint, POINT Ypoint){		
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b082      	sub	sp, #8
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	4603      	mov	r3, r0
 8000b10:	80fb      	strh	r3, [r7, #6]
 8000b12:	460b      	mov	r3, r1
 8000b14:	80bb      	strh	r3, [r7, #4]
 8000b16:	4613      	mov	r3, r2
 8000b18:	807b      	strh	r3, [r7, #2]
	LCD_WriteData_NLen16Bit(Color ,(uint32_t)Xpoint * (uint32_t)Ypoint); 
 8000b1a:	88bb      	ldrh	r3, [r7, #4]
 8000b1c:	887a      	ldrh	r2, [r7, #2]
 8000b1e:	fb03 f202 	mul.w	r2, r3, r2
 8000b22:	88fb      	ldrh	r3, [r7, #6]
 8000b24:	4611      	mov	r1, r2
 8000b26:	4618      	mov	r0, r3
 8000b28:	f7ff fdd8 	bl	80006dc <LCD_WriteData_NLen16Bit>
}
 8000b2c:	bf00      	nop
 8000b2e:	3708      	adds	r7, #8
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}

08000b34 <LCD_SetPointlColor>:
parameter: 
		Xpoint :   The x coordinate of the point
		Ypoint :   The y coordinate of the point
		Color  :   Set the color
********************************************************************************/
void LCD_SetPointlColor ( POINT Xpoint, POINT Ypoint, COLOR Color ){	
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b082      	sub	sp, #8
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	80fb      	strh	r3, [r7, #6]
 8000b3e:	460b      	mov	r3, r1
 8000b40:	80bb      	strh	r3, [r7, #4]
 8000b42:	4613      	mov	r3, r2
 8000b44:	807b      	strh	r3, [r7, #2]
	if ( ( Xpoint <= sLCD_DIS.LCD_Dis_Column ) && ( Ypoint <= sLCD_DIS.LCD_Dis_Page ) ){		
 8000b46:	4b0d      	ldr	r3, [pc, #52]	; (8000b7c <LCD_SetPointlColor+0x48>)
 8000b48:	881b      	ldrh	r3, [r3, #0]
 8000b4a:	88fa      	ldrh	r2, [r7, #6]
 8000b4c:	429a      	cmp	r2, r3
 8000b4e:	d810      	bhi.n	8000b72 <LCD_SetPointlColor+0x3e>
 8000b50:	4b0a      	ldr	r3, [pc, #40]	; (8000b7c <LCD_SetPointlColor+0x48>)
 8000b52:	885b      	ldrh	r3, [r3, #2]
 8000b54:	88ba      	ldrh	r2, [r7, #4]
 8000b56:	429a      	cmp	r2, r3
 8000b58:	d80b      	bhi.n	8000b72 <LCD_SetPointlColor+0x3e>
		LCD_SetCursor (Xpoint, Ypoint);		
 8000b5a:	88ba      	ldrh	r2, [r7, #4]
 8000b5c:	88fb      	ldrh	r3, [r7, #6]
 8000b5e:	4611      	mov	r1, r2
 8000b60:	4618      	mov	r0, r3
 8000b62:	f7ff ffbf 	bl	8000ae4 <LCD_SetCursor>
		LCD_SetColor ( Color , 1 , 1);
 8000b66:	887b      	ldrh	r3, [r7, #2]
 8000b68:	2201      	movs	r2, #1
 8000b6a:	2101      	movs	r1, #1
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	f7ff ffcb 	bl	8000b08 <LCD_SetColor>
	}
}
 8000b72:	bf00      	nop
 8000b74:	3708      	adds	r7, #8
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	20000154 	.word	0x20000154

08000b80 <LCD_SetArealColor>:
		Ystart :   Start point y coordinate
		Xend   :   End point coordinates
		Yend   :   End point coordinates
		Color  :   Set the color
********************************************************************************/
void LCD_SetArealColor (POINT Xstart, POINT Ystart, POINT Xend, POINT Yend,	COLOR  Color){	
 8000b80:	b590      	push	{r4, r7, lr}
 8000b82:	b083      	sub	sp, #12
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	4604      	mov	r4, r0
 8000b88:	4608      	mov	r0, r1
 8000b8a:	4611      	mov	r1, r2
 8000b8c:	461a      	mov	r2, r3
 8000b8e:	4623      	mov	r3, r4
 8000b90:	80fb      	strh	r3, [r7, #6]
 8000b92:	4603      	mov	r3, r0
 8000b94:	80bb      	strh	r3, [r7, #4]
 8000b96:	460b      	mov	r3, r1
 8000b98:	807b      	strh	r3, [r7, #2]
 8000b9a:	4613      	mov	r3, r2
 8000b9c:	803b      	strh	r3, [r7, #0]
	if((Xend > Xstart) && (Yend > Ystart)){			
 8000b9e:	887a      	ldrh	r2, [r7, #2]
 8000ba0:	88fb      	ldrh	r3, [r7, #6]
 8000ba2:	429a      	cmp	r2, r3
 8000ba4:	d915      	bls.n	8000bd2 <LCD_SetArealColor+0x52>
 8000ba6:	883a      	ldrh	r2, [r7, #0]
 8000ba8:	88bb      	ldrh	r3, [r7, #4]
 8000baa:	429a      	cmp	r2, r3
 8000bac:	d911      	bls.n	8000bd2 <LCD_SetArealColor+0x52>
		LCD_SetWindows( Xstart , Ystart , Xend , Yend  );
 8000bae:	883b      	ldrh	r3, [r7, #0]
 8000bb0:	887a      	ldrh	r2, [r7, #2]
 8000bb2:	88b9      	ldrh	r1, [r7, #4]
 8000bb4:	88f8      	ldrh	r0, [r7, #6]
 8000bb6:	f7ff ff3f 	bl	8000a38 <LCD_SetWindows>
		LCD_SetColor ( Color ,Xend - Xstart , Yend - Ystart );
 8000bba:	887a      	ldrh	r2, [r7, #2]
 8000bbc:	88fb      	ldrh	r3, [r7, #6]
 8000bbe:	1ad3      	subs	r3, r2, r3
 8000bc0:	b299      	uxth	r1, r3
 8000bc2:	883a      	ldrh	r2, [r7, #0]
 8000bc4:	88bb      	ldrh	r3, [r7, #4]
 8000bc6:	1ad3      	subs	r3, r2, r3
 8000bc8:	b29a      	uxth	r2, r3
 8000bca:	8b3b      	ldrh	r3, [r7, #24]
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f7ff ff9b 	bl	8000b08 <LCD_SetColor>
	}
}
 8000bd2:	bf00      	nop
 8000bd4:	370c      	adds	r7, #12
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd90      	pop	{r4, r7, pc}
	...

08000bdc <LCD_Clear>:

/********************************************************************************
function:	
			Clear screen 
********************************************************************************/
void LCD_Clear(COLOR  Color){
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b084      	sub	sp, #16
 8000be0:	af02      	add	r7, sp, #8
 8000be2:	4603      	mov	r3, r0
 8000be4:	80fb      	strh	r3, [r7, #6]

	LCD_SetArealColor(0,0, sLCD_DIS.LCD_Dis_Column , sLCD_DIS.LCD_Dis_Page  , Color);	
 8000be6:	4b07      	ldr	r3, [pc, #28]	; (8000c04 <LCD_Clear+0x28>)
 8000be8:	881a      	ldrh	r2, [r3, #0]
 8000bea:	4b06      	ldr	r3, [pc, #24]	; (8000c04 <LCD_Clear+0x28>)
 8000bec:	8859      	ldrh	r1, [r3, #2]
 8000bee:	88fb      	ldrh	r3, [r7, #6]
 8000bf0:	9300      	str	r3, [sp, #0]
 8000bf2:	460b      	mov	r3, r1
 8000bf4:	2100      	movs	r1, #0
 8000bf6:	2000      	movs	r0, #0
 8000bf8:	f7ff ffc2 	bl	8000b80 <LCD_SetArealColor>

}
 8000bfc:	bf00      	nop
 8000bfe:	3708      	adds	r7, #8
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bd80      	pop	{r7, pc}
 8000c04:	20000154 	.word	0x20000154

08000c08 <LCD_DrawPoint>:
			Dot_Pixel	:	point size
********************************************************************************/
void LCD_DrawPoint(	POINT Xpoint, POINT Ypoint, 
					COLOR Color, 
					DOT_PIXEL Dot_Pixel,
					DOT_STYLE DOT_STYLE){		
 8000c08:	b590      	push	{r4, r7, lr}
 8000c0a:	b085      	sub	sp, #20
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	4604      	mov	r4, r0
 8000c10:	4608      	mov	r0, r1
 8000c12:	4611      	mov	r1, r2
 8000c14:	461a      	mov	r2, r3
 8000c16:	4623      	mov	r3, r4
 8000c18:	80fb      	strh	r3, [r7, #6]
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	80bb      	strh	r3, [r7, #4]
 8000c1e:	460b      	mov	r3, r1
 8000c20:	807b      	strh	r3, [r7, #2]
 8000c22:	4613      	mov	r3, r2
 8000c24:	707b      	strb	r3, [r7, #1]
						
	if ( Xpoint > sLCD_DIS.LCD_Dis_Column || Ypoint > sLCD_DIS.LCD_Dis_Page ) {
 8000c26:	4b33      	ldr	r3, [pc, #204]	; (8000cf4 <LCD_DrawPoint+0xec>)
 8000c28:	881b      	ldrh	r3, [r3, #0]
 8000c2a:	88fa      	ldrh	r2, [r7, #6]
 8000c2c:	429a      	cmp	r2, r3
 8000c2e:	d85c      	bhi.n	8000cea <LCD_DrawPoint+0xe2>
 8000c30:	4b30      	ldr	r3, [pc, #192]	; (8000cf4 <LCD_DrawPoint+0xec>)
 8000c32:	885b      	ldrh	r3, [r3, #2]
 8000c34:	88ba      	ldrh	r2, [r7, #4]
 8000c36:	429a      	cmp	r2, r3
 8000c38:	d857      	bhi.n	8000cea <LCD_DrawPoint+0xe2>
		return;
	}
	
	uint16_t XDir_Num ,YDir_Num;
	if(DOT_STYLE == DOT_FILL_AROUND){
 8000c3a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000c3e:	2b01      	cmp	r3, #1
 8000c40:	d12c      	bne.n	8000c9c <LCD_DrawPoint+0x94>
		for(XDir_Num = 0; XDir_Num < 2 * Dot_Pixel - 1 ; XDir_Num++){
 8000c42:	2300      	movs	r3, #0
 8000c44:	81fb      	strh	r3, [r7, #14]
 8000c46:	e022      	b.n	8000c8e <LCD_DrawPoint+0x86>
			for(YDir_Num = 0; YDir_Num < 2 * Dot_Pixel - 1 ; YDir_Num++){
 8000c48:	2300      	movs	r3, #0
 8000c4a:	81bb      	strh	r3, [r7, #12]
 8000c4c:	e016      	b.n	8000c7c <LCD_DrawPoint+0x74>
				LCD_SetPointlColor( Xpoint + XDir_Num - Dot_Pixel, Ypoint + YDir_Num - Dot_Pixel, Color);
 8000c4e:	88fa      	ldrh	r2, [r7, #6]
 8000c50:	89fb      	ldrh	r3, [r7, #14]
 8000c52:	4413      	add	r3, r2
 8000c54:	b29a      	uxth	r2, r3
 8000c56:	787b      	ldrb	r3, [r7, #1]
 8000c58:	b29b      	uxth	r3, r3
 8000c5a:	1ad3      	subs	r3, r2, r3
 8000c5c:	b298      	uxth	r0, r3
 8000c5e:	88ba      	ldrh	r2, [r7, #4]
 8000c60:	89bb      	ldrh	r3, [r7, #12]
 8000c62:	4413      	add	r3, r2
 8000c64:	b29a      	uxth	r2, r3
 8000c66:	787b      	ldrb	r3, [r7, #1]
 8000c68:	b29b      	uxth	r3, r3
 8000c6a:	1ad3      	subs	r3, r2, r3
 8000c6c:	b29b      	uxth	r3, r3
 8000c6e:	887a      	ldrh	r2, [r7, #2]
 8000c70:	4619      	mov	r1, r3
 8000c72:	f7ff ff5f 	bl	8000b34 <LCD_SetPointlColor>
			for(YDir_Num = 0; YDir_Num < 2 * Dot_Pixel - 1 ; YDir_Num++){
 8000c76:	89bb      	ldrh	r3, [r7, #12]
 8000c78:	3301      	adds	r3, #1
 8000c7a:	81bb      	strh	r3, [r7, #12]
 8000c7c:	89ba      	ldrh	r2, [r7, #12]
 8000c7e:	787b      	ldrb	r3, [r7, #1]
 8000c80:	005b      	lsls	r3, r3, #1
 8000c82:	3b01      	subs	r3, #1
 8000c84:	429a      	cmp	r2, r3
 8000c86:	dbe2      	blt.n	8000c4e <LCD_DrawPoint+0x46>
		for(XDir_Num = 0; XDir_Num < 2 * Dot_Pixel - 1 ; XDir_Num++){
 8000c88:	89fb      	ldrh	r3, [r7, #14]
 8000c8a:	3301      	adds	r3, #1
 8000c8c:	81fb      	strh	r3, [r7, #14]
 8000c8e:	89fa      	ldrh	r2, [r7, #14]
 8000c90:	787b      	ldrb	r3, [r7, #1]
 8000c92:	005b      	lsls	r3, r3, #1
 8000c94:	3b01      	subs	r3, #1
 8000c96:	429a      	cmp	r2, r3
 8000c98:	dbd6      	blt.n	8000c48 <LCD_DrawPoint+0x40>
 8000c9a:	e027      	b.n	8000cec <LCD_DrawPoint+0xe4>
			}
		}
	}else{
		for(XDir_Num = 0; XDir_Num <  Dot_Pixel ; XDir_Num++){
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	81fb      	strh	r3, [r7, #14]
 8000ca0:	e01d      	b.n	8000cde <LCD_DrawPoint+0xd6>
			for(YDir_Num = 0; YDir_Num <  Dot_Pixel ; YDir_Num++){
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	81bb      	strh	r3, [r7, #12]
 8000ca6:	e012      	b.n	8000cce <LCD_DrawPoint+0xc6>
				LCD_SetPointlColor( Xpoint + XDir_Num - 1 , Ypoint + YDir_Num -1 , Color);
 8000ca8:	88fa      	ldrh	r2, [r7, #6]
 8000caa:	89fb      	ldrh	r3, [r7, #14]
 8000cac:	4413      	add	r3, r2
 8000cae:	b29b      	uxth	r3, r3
 8000cb0:	3b01      	subs	r3, #1
 8000cb2:	b298      	uxth	r0, r3
 8000cb4:	88ba      	ldrh	r2, [r7, #4]
 8000cb6:	89bb      	ldrh	r3, [r7, #12]
 8000cb8:	4413      	add	r3, r2
 8000cba:	b29b      	uxth	r3, r3
 8000cbc:	3b01      	subs	r3, #1
 8000cbe:	b29b      	uxth	r3, r3
 8000cc0:	887a      	ldrh	r2, [r7, #2]
 8000cc2:	4619      	mov	r1, r3
 8000cc4:	f7ff ff36 	bl	8000b34 <LCD_SetPointlColor>
			for(YDir_Num = 0; YDir_Num <  Dot_Pixel ; YDir_Num++){
 8000cc8:	89bb      	ldrh	r3, [r7, #12]
 8000cca:	3301      	adds	r3, #1
 8000ccc:	81bb      	strh	r3, [r7, #12]
 8000cce:	787b      	ldrb	r3, [r7, #1]
 8000cd0:	b29b      	uxth	r3, r3
 8000cd2:	89ba      	ldrh	r2, [r7, #12]
 8000cd4:	429a      	cmp	r2, r3
 8000cd6:	d3e7      	bcc.n	8000ca8 <LCD_DrawPoint+0xa0>
		for(XDir_Num = 0; XDir_Num <  Dot_Pixel ; XDir_Num++){
 8000cd8:	89fb      	ldrh	r3, [r7, #14]
 8000cda:	3301      	adds	r3, #1
 8000cdc:	81fb      	strh	r3, [r7, #14]
 8000cde:	787b      	ldrb	r3, [r7, #1]
 8000ce0:	b29b      	uxth	r3, r3
 8000ce2:	89fa      	ldrh	r2, [r7, #14]
 8000ce4:	429a      	cmp	r2, r3
 8000ce6:	d3dc      	bcc.n	8000ca2 <LCD_DrawPoint+0x9a>
 8000ce8:	e000      	b.n	8000cec <LCD_DrawPoint+0xe4>
		return;
 8000cea:	bf00      	nop
			}
		}
	}	
}
 8000cec:	3714      	adds	r7, #20
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd90      	pop	{r4, r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	20000154 	.word	0x20000154

08000cf8 <LCD_DrawCircle>:
			Filled : Whether it is filled: 1 filling 0��Do not
********************************************************************************/
void LCD_DrawCircle ( 	POINT X_Center, POINT Y_Center, LENGTH Radius, 
						COLOR Color, 
						DRAW_FILL  Draw_Fill ,
						DOT_PIXEL Dot_Pixel ){
 8000cf8:	b590      	push	{r4, r7, lr}
 8000cfa:	b087      	sub	sp, #28
 8000cfc:	af02      	add	r7, sp, #8
 8000cfe:	4604      	mov	r4, r0
 8000d00:	4608      	mov	r0, r1
 8000d02:	4611      	mov	r1, r2
 8000d04:	461a      	mov	r2, r3
 8000d06:	4623      	mov	r3, r4
 8000d08:	80fb      	strh	r3, [r7, #6]
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	80bb      	strh	r3, [r7, #4]
 8000d0e:	460b      	mov	r3, r1
 8000d10:	807b      	strh	r3, [r7, #2]
 8000d12:	4613      	mov	r3, r2
 8000d14:	803b      	strh	r3, [r7, #0]
							
	if (X_Center > sLCD_DIS.LCD_Dis_Column || Y_Center >= sLCD_DIS.LCD_Dis_Page) {
 8000d16:	4ba1      	ldr	r3, [pc, #644]	; (8000f9c <LCD_DrawCircle+0x2a4>)
 8000d18:	881b      	ldrh	r3, [r3, #0]
 8000d1a:	88fa      	ldrh	r2, [r7, #6]
 8000d1c:	429a      	cmp	r2, r3
 8000d1e:	f200 8161 	bhi.w	8000fe4 <LCD_DrawCircle+0x2ec>
 8000d22:	4b9e      	ldr	r3, [pc, #632]	; (8000f9c <LCD_DrawCircle+0x2a4>)
 8000d24:	885b      	ldrh	r3, [r3, #2]
 8000d26:	88ba      	ldrh	r2, [r7, #4]
 8000d28:	429a      	cmp	r2, r3
 8000d2a:	f080 815b 	bcs.w	8000fe4 <LCD_DrawCircle+0x2ec>
		return;
	}						
	
	//Draw a circle from (0, R) as a starting point
	int16_t XCurrent, YCurrent;
	XCurrent = 0; 
 8000d2e:	2300      	movs	r3, #0
 8000d30:	81fb      	strh	r3, [r7, #14]
	YCurrent = Radius;	
 8000d32:	887b      	ldrh	r3, [r7, #2]
 8000d34:	81bb      	strh	r3, [r7, #12]
	
	//Cumulative error,judge the next point of the logo
	int16_t Esp = 3 - ( Radius << 1 );
 8000d36:	887b      	ldrh	r3, [r7, #2]
 8000d38:	005b      	lsls	r3, r3, #1
 8000d3a:	b29b      	uxth	r3, r3
 8000d3c:	f1c3 0303 	rsb	r3, r3, #3
 8000d40:	b29b      	uxth	r3, r3
 8000d42:	817b      	strh	r3, [r7, #10]
	
	int16_t sCountY;
	if ( Draw_Fill ){
 8000d44:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	f000 8143 	beq.w	8000fd4 <LCD_DrawCircle+0x2dc>
		while ( XCurrent <= YCurrent ){ //Realistic circles			
 8000d4e:	e096      	b.n	8000e7e <LCD_DrawCircle+0x186>
			for ( sCountY = XCurrent; sCountY <= YCurrent; sCountY ++ ) {                      
 8000d50:	89fb      	ldrh	r3, [r7, #14]
 8000d52:	813b      	strh	r3, [r7, #8]
 8000d54:	e065      	b.n	8000e22 <LCD_DrawCircle+0x12a>
				LCD_SetPointlColor ( X_Center + XCurrent, Y_Center + sCountY,   Color );           //1
 8000d56:	89fa      	ldrh	r2, [r7, #14]
 8000d58:	88fb      	ldrh	r3, [r7, #6]
 8000d5a:	4413      	add	r3, r2
 8000d5c:	b298      	uxth	r0, r3
 8000d5e:	893a      	ldrh	r2, [r7, #8]
 8000d60:	88bb      	ldrh	r3, [r7, #4]
 8000d62:	4413      	add	r3, r2
 8000d64:	b29b      	uxth	r3, r3
 8000d66:	883a      	ldrh	r2, [r7, #0]
 8000d68:	4619      	mov	r1, r3
 8000d6a:	f7ff fee3 	bl	8000b34 <LCD_SetPointlColor>
				LCD_SetPointlColor ( X_Center - XCurrent, Y_Center + sCountY,   Color );           //2       
 8000d6e:	89fb      	ldrh	r3, [r7, #14]
 8000d70:	88fa      	ldrh	r2, [r7, #6]
 8000d72:	1ad3      	subs	r3, r2, r3
 8000d74:	b298      	uxth	r0, r3
 8000d76:	893a      	ldrh	r2, [r7, #8]
 8000d78:	88bb      	ldrh	r3, [r7, #4]
 8000d7a:	4413      	add	r3, r2
 8000d7c:	b29b      	uxth	r3, r3
 8000d7e:	883a      	ldrh	r2, [r7, #0]
 8000d80:	4619      	mov	r1, r3
 8000d82:	f7ff fed7 	bl	8000b34 <LCD_SetPointlColor>
				LCD_SetPointlColor ( X_Center - sCountY,   Y_Center + XCurrent, Color );           //3
 8000d86:	893b      	ldrh	r3, [r7, #8]
 8000d88:	88fa      	ldrh	r2, [r7, #6]
 8000d8a:	1ad3      	subs	r3, r2, r3
 8000d8c:	b298      	uxth	r0, r3
 8000d8e:	89fa      	ldrh	r2, [r7, #14]
 8000d90:	88bb      	ldrh	r3, [r7, #4]
 8000d92:	4413      	add	r3, r2
 8000d94:	b29b      	uxth	r3, r3
 8000d96:	883a      	ldrh	r2, [r7, #0]
 8000d98:	4619      	mov	r1, r3
 8000d9a:	f7ff fecb 	bl	8000b34 <LCD_SetPointlColor>
				LCD_SetPointlColor ( X_Center - sCountY,   Y_Center - XCurrent, Color );           //4
 8000d9e:	893b      	ldrh	r3, [r7, #8]
 8000da0:	88fa      	ldrh	r2, [r7, #6]
 8000da2:	1ad3      	subs	r3, r2, r3
 8000da4:	b298      	uxth	r0, r3
 8000da6:	89fb      	ldrh	r3, [r7, #14]
 8000da8:	88ba      	ldrh	r2, [r7, #4]
 8000daa:	1ad3      	subs	r3, r2, r3
 8000dac:	b29b      	uxth	r3, r3
 8000dae:	883a      	ldrh	r2, [r7, #0]
 8000db0:	4619      	mov	r1, r3
 8000db2:	f7ff febf 	bl	8000b34 <LCD_SetPointlColor>
				LCD_SetPointlColor ( X_Center - XCurrent, Y_Center - sCountY,   Color );           //5    
 8000db6:	89fb      	ldrh	r3, [r7, #14]
 8000db8:	88fa      	ldrh	r2, [r7, #6]
 8000dba:	1ad3      	subs	r3, r2, r3
 8000dbc:	b298      	uxth	r0, r3
 8000dbe:	893b      	ldrh	r3, [r7, #8]
 8000dc0:	88ba      	ldrh	r2, [r7, #4]
 8000dc2:	1ad3      	subs	r3, r2, r3
 8000dc4:	b29b      	uxth	r3, r3
 8000dc6:	883a      	ldrh	r2, [r7, #0]
 8000dc8:	4619      	mov	r1, r3
 8000dca:	f7ff feb3 	bl	8000b34 <LCD_SetPointlColor>
				LCD_SetPointlColor ( X_Center + XCurrent, Y_Center - sCountY,   Color );           //6
 8000dce:	89fa      	ldrh	r2, [r7, #14]
 8000dd0:	88fb      	ldrh	r3, [r7, #6]
 8000dd2:	4413      	add	r3, r2
 8000dd4:	b298      	uxth	r0, r3
 8000dd6:	893b      	ldrh	r3, [r7, #8]
 8000dd8:	88ba      	ldrh	r2, [r7, #4]
 8000dda:	1ad3      	subs	r3, r2, r3
 8000ddc:	b29b      	uxth	r3, r3
 8000dde:	883a      	ldrh	r2, [r7, #0]
 8000de0:	4619      	mov	r1, r3
 8000de2:	f7ff fea7 	bl	8000b34 <LCD_SetPointlColor>
				LCD_SetPointlColor ( X_Center + sCountY,   Y_Center - XCurrent, Color );           //7 	
 8000de6:	893a      	ldrh	r2, [r7, #8]
 8000de8:	88fb      	ldrh	r3, [r7, #6]
 8000dea:	4413      	add	r3, r2
 8000dec:	b298      	uxth	r0, r3
 8000dee:	89fb      	ldrh	r3, [r7, #14]
 8000df0:	88ba      	ldrh	r2, [r7, #4]
 8000df2:	1ad3      	subs	r3, r2, r3
 8000df4:	b29b      	uxth	r3, r3
 8000df6:	883a      	ldrh	r2, [r7, #0]
 8000df8:	4619      	mov	r1, r3
 8000dfa:	f7ff fe9b 	bl	8000b34 <LCD_SetPointlColor>
				LCD_SetPointlColor ( X_Center + sCountY,   Y_Center + XCurrent, Color );           //0				
 8000dfe:	893a      	ldrh	r2, [r7, #8]
 8000e00:	88fb      	ldrh	r3, [r7, #6]
 8000e02:	4413      	add	r3, r2
 8000e04:	b298      	uxth	r0, r3
 8000e06:	89fa      	ldrh	r2, [r7, #14]
 8000e08:	88bb      	ldrh	r3, [r7, #4]
 8000e0a:	4413      	add	r3, r2
 8000e0c:	b29b      	uxth	r3, r3
 8000e0e:	883a      	ldrh	r2, [r7, #0]
 8000e10:	4619      	mov	r1, r3
 8000e12:	f7ff fe8f 	bl	8000b34 <LCD_SetPointlColor>
			for ( sCountY = XCurrent; sCountY <= YCurrent; sCountY ++ ) {                      
 8000e16:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000e1a:	b29b      	uxth	r3, r3
 8000e1c:	3301      	adds	r3, #1
 8000e1e:	b29b      	uxth	r3, r3
 8000e20:	813b      	strh	r3, [r7, #8]
 8000e22:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000e26:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000e2a:	429a      	cmp	r2, r3
 8000e2c:	dd93      	ble.n	8000d56 <LCD_DrawCircle+0x5e>
			}
			if ( Esp < 0 ) 
 8000e2e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	da09      	bge.n	8000e4a <LCD_DrawCircle+0x152>
				Esp += 4 * XCurrent + 6;	  
 8000e36:	89fb      	ldrh	r3, [r7, #14]
 8000e38:	009b      	lsls	r3, r3, #2
 8000e3a:	b29a      	uxth	r2, r3
 8000e3c:	897b      	ldrh	r3, [r7, #10]
 8000e3e:	4413      	add	r3, r2
 8000e40:	b29b      	uxth	r3, r3
 8000e42:	3306      	adds	r3, #6
 8000e44:	b29b      	uxth	r3, r3
 8000e46:	817b      	strh	r3, [r7, #10]
 8000e48:	e013      	b.n	8000e72 <LCD_DrawCircle+0x17a>
			else{
				Esp += 10 + 4 * ( XCurrent - YCurrent );   
 8000e4a:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8000e4e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000e52:	1ad3      	subs	r3, r2, r3
 8000e54:	b29b      	uxth	r3, r3
 8000e56:	009b      	lsls	r3, r3, #2
 8000e58:	b29a      	uxth	r2, r3
 8000e5a:	897b      	ldrh	r3, [r7, #10]
 8000e5c:	4413      	add	r3, r2
 8000e5e:	b29b      	uxth	r3, r3
 8000e60:	330a      	adds	r3, #10
 8000e62:	b29b      	uxth	r3, r3
 8000e64:	817b      	strh	r3, [r7, #10]
				YCurrent --;
 8000e66:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000e6a:	b29b      	uxth	r3, r3
 8000e6c:	3b01      	subs	r3, #1
 8000e6e:	b29b      	uxth	r3, r3
 8000e70:	81bb      	strh	r3, [r7, #12]
			}
			XCurrent ++;
 8000e72:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000e76:	b29b      	uxth	r3, r3
 8000e78:	3301      	adds	r3, #1
 8000e7a:	b29b      	uxth	r3, r3
 8000e7c:	81fb      	strh	r3, [r7, #14]
		while ( XCurrent <= YCurrent ){ //Realistic circles			
 8000e7e:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8000e82:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000e86:	429a      	cmp	r2, r3
 8000e88:	f77f af62 	ble.w	8000d50 <LCD_DrawCircle+0x58>
 8000e8c:	e0ab      	b.n	8000fe6 <LCD_DrawCircle+0x2ee>
		}
	}else{ //Draw a hollow circle  
		while ( XCurrent <= YCurrent ){ 	
			LCD_DrawPoint ( X_Center + XCurrent, Y_Center + YCurrent, Color, Dot_Pixel, DOT_STYLE_DFT );             //1
 8000e8e:	89fa      	ldrh	r2, [r7, #14]
 8000e90:	88fb      	ldrh	r3, [r7, #6]
 8000e92:	4413      	add	r3, r2
 8000e94:	b298      	uxth	r0, r3
 8000e96:	89ba      	ldrh	r2, [r7, #12]
 8000e98:	88bb      	ldrh	r3, [r7, #4]
 8000e9a:	4413      	add	r3, r2
 8000e9c:	b299      	uxth	r1, r3
 8000e9e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000ea2:	883a      	ldrh	r2, [r7, #0]
 8000ea4:	2401      	movs	r4, #1
 8000ea6:	9400      	str	r4, [sp, #0]
 8000ea8:	f7ff feae 	bl	8000c08 <LCD_DrawPoint>
			LCD_DrawPoint ( X_Center - XCurrent, Y_Center + YCurrent, Color, Dot_Pixel, DOT_STYLE_DFT );             //2      
 8000eac:	89fb      	ldrh	r3, [r7, #14]
 8000eae:	88fa      	ldrh	r2, [r7, #6]
 8000eb0:	1ad3      	subs	r3, r2, r3
 8000eb2:	b298      	uxth	r0, r3
 8000eb4:	89ba      	ldrh	r2, [r7, #12]
 8000eb6:	88bb      	ldrh	r3, [r7, #4]
 8000eb8:	4413      	add	r3, r2
 8000eba:	b299      	uxth	r1, r3
 8000ebc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000ec0:	883a      	ldrh	r2, [r7, #0]
 8000ec2:	2401      	movs	r4, #1
 8000ec4:	9400      	str	r4, [sp, #0]
 8000ec6:	f7ff fe9f 	bl	8000c08 <LCD_DrawPoint>
			LCD_DrawPoint ( X_Center - YCurrent, Y_Center + XCurrent, Color, Dot_Pixel, DOT_STYLE_DFT );             //3
 8000eca:	89bb      	ldrh	r3, [r7, #12]
 8000ecc:	88fa      	ldrh	r2, [r7, #6]
 8000ece:	1ad3      	subs	r3, r2, r3
 8000ed0:	b298      	uxth	r0, r3
 8000ed2:	89fa      	ldrh	r2, [r7, #14]
 8000ed4:	88bb      	ldrh	r3, [r7, #4]
 8000ed6:	4413      	add	r3, r2
 8000ed8:	b299      	uxth	r1, r3
 8000eda:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000ede:	883a      	ldrh	r2, [r7, #0]
 8000ee0:	2401      	movs	r4, #1
 8000ee2:	9400      	str	r4, [sp, #0]
 8000ee4:	f7ff fe90 	bl	8000c08 <LCD_DrawPoint>
			LCD_DrawPoint ( X_Center - YCurrent, Y_Center - XCurrent, Color, Dot_Pixel, DOT_STYLE_DFT );             //4
 8000ee8:	89bb      	ldrh	r3, [r7, #12]
 8000eea:	88fa      	ldrh	r2, [r7, #6]
 8000eec:	1ad3      	subs	r3, r2, r3
 8000eee:	b298      	uxth	r0, r3
 8000ef0:	89fb      	ldrh	r3, [r7, #14]
 8000ef2:	88ba      	ldrh	r2, [r7, #4]
 8000ef4:	1ad3      	subs	r3, r2, r3
 8000ef6:	b299      	uxth	r1, r3
 8000ef8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000efc:	883a      	ldrh	r2, [r7, #0]
 8000efe:	2401      	movs	r4, #1
 8000f00:	9400      	str	r4, [sp, #0]
 8000f02:	f7ff fe81 	bl	8000c08 <LCD_DrawPoint>
			LCD_DrawPoint ( X_Center - XCurrent, Y_Center - YCurrent, Color, Dot_Pixel, DOT_STYLE_DFT );             //5       
 8000f06:	89fb      	ldrh	r3, [r7, #14]
 8000f08:	88fa      	ldrh	r2, [r7, #6]
 8000f0a:	1ad3      	subs	r3, r2, r3
 8000f0c:	b298      	uxth	r0, r3
 8000f0e:	89bb      	ldrh	r3, [r7, #12]
 8000f10:	88ba      	ldrh	r2, [r7, #4]
 8000f12:	1ad3      	subs	r3, r2, r3
 8000f14:	b299      	uxth	r1, r3
 8000f16:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000f1a:	883a      	ldrh	r2, [r7, #0]
 8000f1c:	2401      	movs	r4, #1
 8000f1e:	9400      	str	r4, [sp, #0]
 8000f20:	f7ff fe72 	bl	8000c08 <LCD_DrawPoint>
			LCD_DrawPoint ( X_Center + XCurrent, Y_Center - YCurrent, Color, Dot_Pixel, DOT_STYLE_DFT );             //6
 8000f24:	89fa      	ldrh	r2, [r7, #14]
 8000f26:	88fb      	ldrh	r3, [r7, #6]
 8000f28:	4413      	add	r3, r2
 8000f2a:	b298      	uxth	r0, r3
 8000f2c:	89bb      	ldrh	r3, [r7, #12]
 8000f2e:	88ba      	ldrh	r2, [r7, #4]
 8000f30:	1ad3      	subs	r3, r2, r3
 8000f32:	b299      	uxth	r1, r3
 8000f34:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000f38:	883a      	ldrh	r2, [r7, #0]
 8000f3a:	2401      	movs	r4, #1
 8000f3c:	9400      	str	r4, [sp, #0]
 8000f3e:	f7ff fe63 	bl	8000c08 <LCD_DrawPoint>
			LCD_DrawPoint ( X_Center + YCurrent, Y_Center - XCurrent, Color, Dot_Pixel, DOT_STYLE_DFT );             //7 
 8000f42:	89ba      	ldrh	r2, [r7, #12]
 8000f44:	88fb      	ldrh	r3, [r7, #6]
 8000f46:	4413      	add	r3, r2
 8000f48:	b298      	uxth	r0, r3
 8000f4a:	89fb      	ldrh	r3, [r7, #14]
 8000f4c:	88ba      	ldrh	r2, [r7, #4]
 8000f4e:	1ad3      	subs	r3, r2, r3
 8000f50:	b299      	uxth	r1, r3
 8000f52:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000f56:	883a      	ldrh	r2, [r7, #0]
 8000f58:	2401      	movs	r4, #1
 8000f5a:	9400      	str	r4, [sp, #0]
 8000f5c:	f7ff fe54 	bl	8000c08 <LCD_DrawPoint>
			LCD_DrawPoint ( X_Center + YCurrent, Y_Center + XCurrent, Color, Dot_Pixel, DOT_STYLE_DFT );             //0
 8000f60:	89ba      	ldrh	r2, [r7, #12]
 8000f62:	88fb      	ldrh	r3, [r7, #6]
 8000f64:	4413      	add	r3, r2
 8000f66:	b298      	uxth	r0, r3
 8000f68:	89fa      	ldrh	r2, [r7, #14]
 8000f6a:	88bb      	ldrh	r3, [r7, #4]
 8000f6c:	4413      	add	r3, r2
 8000f6e:	b299      	uxth	r1, r3
 8000f70:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000f74:	883a      	ldrh	r2, [r7, #0]
 8000f76:	2401      	movs	r4, #1
 8000f78:	9400      	str	r4, [sp, #0]
 8000f7a:	f7ff fe45 	bl	8000c08 <LCD_DrawPoint>
			
			if ( Esp < 0 ) 
 8000f7e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	da0c      	bge.n	8000fa0 <LCD_DrawCircle+0x2a8>
				Esp += 4 * XCurrent + 6;	  
 8000f86:	89fb      	ldrh	r3, [r7, #14]
 8000f88:	009b      	lsls	r3, r3, #2
 8000f8a:	b29a      	uxth	r2, r3
 8000f8c:	897b      	ldrh	r3, [r7, #10]
 8000f8e:	4413      	add	r3, r2
 8000f90:	b29b      	uxth	r3, r3
 8000f92:	3306      	adds	r3, #6
 8000f94:	b29b      	uxth	r3, r3
 8000f96:	817b      	strh	r3, [r7, #10]
 8000f98:	e016      	b.n	8000fc8 <LCD_DrawCircle+0x2d0>
 8000f9a:	bf00      	nop
 8000f9c:	20000154 	.word	0x20000154
			else{
				Esp += 10 + 4 * ( XCurrent - YCurrent );   
 8000fa0:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8000fa4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000fa8:	1ad3      	subs	r3, r2, r3
 8000faa:	b29b      	uxth	r3, r3
 8000fac:	009b      	lsls	r3, r3, #2
 8000fae:	b29a      	uxth	r2, r3
 8000fb0:	897b      	ldrh	r3, [r7, #10]
 8000fb2:	4413      	add	r3, r2
 8000fb4:	b29b      	uxth	r3, r3
 8000fb6:	330a      	adds	r3, #10
 8000fb8:	b29b      	uxth	r3, r3
 8000fba:	817b      	strh	r3, [r7, #10]
				YCurrent --;
 8000fbc:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000fc0:	b29b      	uxth	r3, r3
 8000fc2:	3b01      	subs	r3, #1
 8000fc4:	b29b      	uxth	r3, r3
 8000fc6:	81bb      	strh	r3, [r7, #12]
			}
			XCurrent ++;
 8000fc8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000fcc:	b29b      	uxth	r3, r3
 8000fce:	3301      	adds	r3, #1
 8000fd0:	b29b      	uxth	r3, r3
 8000fd2:	81fb      	strh	r3, [r7, #14]
		while ( XCurrent <= YCurrent ){ 	
 8000fd4:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8000fd8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000fdc:	429a      	cmp	r2, r3
 8000fde:	f77f af56 	ble.w	8000e8e <LCD_DrawCircle+0x196>
 8000fe2:	e000      	b.n	8000fe6 <LCD_DrawCircle+0x2ee>
		return;
 8000fe4:	bf00      	nop
		}
	}
}
 8000fe6:	3714      	adds	r7, #20
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd90      	pop	{r4, r7, pc}

08000fec <LCD_DisplayChar>:
			Font  ��A structure pointer that displays a character size
			Color_Background : Select the background color of the English character
			Color_Foreground : Select the foreground color of the English character
********************************************************************************/
void LCD_DisplayChar( 	POINT Xpoint, POINT Ypoint, const char Acsii_Char,
						sFONT* Font, COLOR Color_Background,	COLOR Color_Foreground ){
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b088      	sub	sp, #32
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	607b      	str	r3, [r7, #4]
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	81fb      	strh	r3, [r7, #14]
 8000ff8:	460b      	mov	r3, r1
 8000ffa:	81bb      	strh	r3, [r7, #12]
 8000ffc:	4613      	mov	r3, r2
 8000ffe:	72fb      	strb	r3, [r7, #11]
	POINT Page, Column;
	
	if (Xpoint >= sLCD_DIS.LCD_Dis_Column || Ypoint >= sLCD_DIS.LCD_Dis_Page) {
 8001000:	4b4d      	ldr	r3, [pc, #308]	; (8001138 <LCD_DisplayChar+0x14c>)
 8001002:	881b      	ldrh	r3, [r3, #0]
 8001004:	89fa      	ldrh	r2, [r7, #14]
 8001006:	429a      	cmp	r2, r3
 8001008:	f080 8091 	bcs.w	800112e <LCD_DisplayChar+0x142>
 800100c:	4b4a      	ldr	r3, [pc, #296]	; (8001138 <LCD_DisplayChar+0x14c>)
 800100e:	885b      	ldrh	r3, [r3, #2]
 8001010:	89ba      	ldrh	r2, [r7, #12]
 8001012:	429a      	cmp	r2, r3
 8001014:	f080 808b 	bcs.w	800112e <LCD_DisplayChar+0x142>
		return;
	}
	
	uint32_t Char_Offset = (Acsii_Char - ' ') * Font->Height * (Font->Width / 8 + (Font->Width % 8 ? 1 : 0));
 8001018:	7afb      	ldrb	r3, [r7, #11]
 800101a:	3b20      	subs	r3, #32
 800101c:	687a      	ldr	r2, [r7, #4]
 800101e:	88d2      	ldrh	r2, [r2, #6]
 8001020:	fb02 f303 	mul.w	r3, r2, r3
 8001024:	687a      	ldr	r2, [r7, #4]
 8001026:	8892      	ldrh	r2, [r2, #4]
 8001028:	08d2      	lsrs	r2, r2, #3
 800102a:	b292      	uxth	r2, r2
 800102c:	4611      	mov	r1, r2
 800102e:	687a      	ldr	r2, [r7, #4]
 8001030:	8892      	ldrh	r2, [r2, #4]
 8001032:	f002 0207 	and.w	r2, r2, #7
 8001036:	b292      	uxth	r2, r2
 8001038:	2a00      	cmp	r2, #0
 800103a:	bf14      	ite	ne
 800103c:	2201      	movne	r2, #1
 800103e:	2200      	moveq	r2, #0
 8001040:	b2d2      	uxtb	r2, r2
 8001042:	440a      	add	r2, r1
 8001044:	fb02 f303 	mul.w	r3, r2, r3
 8001048:	617b      	str	r3, [r7, #20]
	const unsigned char* ptr = &Font->table[Char_Offset];
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681a      	ldr	r2, [r3, #0]
 800104e:	697b      	ldr	r3, [r7, #20]
 8001050:	4413      	add	r3, r2
 8001052:	61bb      	str	r3, [r7, #24]

	for ( Page = 0; Page < Font->Height; Page ++ ){
 8001054:	2300      	movs	r3, #0
 8001056:	83fb      	strh	r3, [r7, #30]
 8001058:	e063      	b.n	8001122 <LCD_DisplayChar+0x136>
		for ( Column = 0; Column < Font->Width; Column ++ ){
 800105a:	2300      	movs	r3, #0
 800105c:	83bb      	strh	r3, [r7, #28]
 800105e:	e04e      	b.n	80010fe <LCD_DisplayChar+0x112>
			
			//To determine whether the font background color and screen background color is consistent
			if (FONT_BACKGROUND == Color_Background){//this process is to speed up the scan
 8001060:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001062:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001066:	4293      	cmp	r3, r2
 8001068:	d118      	bne.n	800109c <LCD_DisplayChar+0xb0>
				if (*ptr & (0x80 >> (Column % 8)))
 800106a:	69bb      	ldr	r3, [r7, #24]
 800106c:	781b      	ldrb	r3, [r3, #0]
 800106e:	4619      	mov	r1, r3
 8001070:	8bbb      	ldrh	r3, [r7, #28]
 8001072:	f003 0307 	and.w	r3, r3, #7
 8001076:	2280      	movs	r2, #128	; 0x80
 8001078:	fa42 f303 	asr.w	r3, r2, r3
 800107c:	400b      	ands	r3, r1
 800107e:	2b00      	cmp	r3, #0
 8001080:	d031      	beq.n	80010e6 <LCD_DisplayChar+0xfa>
					LCD_SetPointlColor (Xpoint + Column,Ypoint + Page, Color_Foreground );
 8001082:	89fa      	ldrh	r2, [r7, #14]
 8001084:	8bbb      	ldrh	r3, [r7, #28]
 8001086:	4413      	add	r3, r2
 8001088:	b298      	uxth	r0, r3
 800108a:	89ba      	ldrh	r2, [r7, #12]
 800108c:	8bfb      	ldrh	r3, [r7, #30]
 800108e:	4413      	add	r3, r2
 8001090:	b29b      	uxth	r3, r3
 8001092:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8001094:	4619      	mov	r1, r3
 8001096:	f7ff fd4d 	bl	8000b34 <LCD_SetPointlColor>
 800109a:	e024      	b.n	80010e6 <LCD_DisplayChar+0xfa>
			}else{
				if (*ptr & (0x80 >> (Column % 8))){
 800109c:	69bb      	ldr	r3, [r7, #24]
 800109e:	781b      	ldrb	r3, [r3, #0]
 80010a0:	4619      	mov	r1, r3
 80010a2:	8bbb      	ldrh	r3, [r7, #28]
 80010a4:	f003 0307 	and.w	r3, r3, #7
 80010a8:	2280      	movs	r2, #128	; 0x80
 80010aa:	fa42 f303 	asr.w	r3, r2, r3
 80010ae:	400b      	ands	r3, r1
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d00c      	beq.n	80010ce <LCD_DisplayChar+0xe2>
					LCD_SetPointlColor (Xpoint + Column,Ypoint + Page, Color_Foreground );
 80010b4:	89fa      	ldrh	r2, [r7, #14]
 80010b6:	8bbb      	ldrh	r3, [r7, #28]
 80010b8:	4413      	add	r3, r2
 80010ba:	b298      	uxth	r0, r3
 80010bc:	89ba      	ldrh	r2, [r7, #12]
 80010be:	8bfb      	ldrh	r3, [r7, #30]
 80010c0:	4413      	add	r3, r2
 80010c2:	b29b      	uxth	r3, r3
 80010c4:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 80010c6:	4619      	mov	r1, r3
 80010c8:	f7ff fd34 	bl	8000b34 <LCD_SetPointlColor>
 80010cc:	e00b      	b.n	80010e6 <LCD_DisplayChar+0xfa>
				}else{
					LCD_SetPointlColor (Xpoint + Column,Ypoint + Page, Color_Background );
 80010ce:	89fa      	ldrh	r2, [r7, #14]
 80010d0:	8bbb      	ldrh	r3, [r7, #28]
 80010d2:	4413      	add	r3, r2
 80010d4:	b298      	uxth	r0, r3
 80010d6:	89ba      	ldrh	r2, [r7, #12]
 80010d8:	8bfb      	ldrh	r3, [r7, #30]
 80010da:	4413      	add	r3, r2
 80010dc:	b29b      	uxth	r3, r3
 80010de:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80010e0:	4619      	mov	r1, r3
 80010e2:	f7ff fd27 	bl	8000b34 <LCD_SetPointlColor>
				}
			}
			//One pixel is 8 bits
            if (Column % 8 == 7) {
 80010e6:	8bbb      	ldrh	r3, [r7, #28]
 80010e8:	f003 0307 	and.w	r3, r3, #7
 80010ec:	b29b      	uxth	r3, r3
 80010ee:	2b07      	cmp	r3, #7
 80010f0:	d102      	bne.n	80010f8 <LCD_DisplayChar+0x10c>
                ptr++;
 80010f2:	69bb      	ldr	r3, [r7, #24]
 80010f4:	3301      	adds	r3, #1
 80010f6:	61bb      	str	r3, [r7, #24]
		for ( Column = 0; Column < Font->Width; Column ++ ){
 80010f8:	8bbb      	ldrh	r3, [r7, #28]
 80010fa:	3301      	adds	r3, #1
 80010fc:	83bb      	strh	r3, [r7, #28]
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	889b      	ldrh	r3, [r3, #4]
 8001102:	8bba      	ldrh	r2, [r7, #28]
 8001104:	429a      	cmp	r2, r3
 8001106:	d3ab      	bcc.n	8001060 <LCD_DisplayChar+0x74>
            }	
		}/* Write a line */
		if (Font->Width % 8 != 0) {
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	889b      	ldrh	r3, [r3, #4]
 800110c:	f003 0307 	and.w	r3, r3, #7
 8001110:	b29b      	uxth	r3, r3
 8001112:	2b00      	cmp	r3, #0
 8001114:	d002      	beq.n	800111c <LCD_DisplayChar+0x130>
				ptr++;
 8001116:	69bb      	ldr	r3, [r7, #24]
 8001118:	3301      	adds	r3, #1
 800111a:	61bb      	str	r3, [r7, #24]
	for ( Page = 0; Page < Font->Height; Page ++ ){
 800111c:	8bfb      	ldrh	r3, [r7, #30]
 800111e:	3301      	adds	r3, #1
 8001120:	83fb      	strh	r3, [r7, #30]
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	88db      	ldrh	r3, [r3, #6]
 8001126:	8bfa      	ldrh	r2, [r7, #30]
 8001128:	429a      	cmp	r2, r3
 800112a:	d396      	bcc.n	800105a <LCD_DisplayChar+0x6e>
 800112c:	e000      	b.n	8001130 <LCD_DisplayChar+0x144>
		return;
 800112e:	bf00      	nop
		}
	}/* Write all */
}
 8001130:	3720      	adds	r7, #32
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	20000154 	.word	0x20000154

0800113c <LCD_DisplayString>:
			Font  ��A structure pointer that displays a character size
			Color_Background : Select the background color of the English character
			Color_Foreground : Select the foreground color of the English character
********************************************************************************/
void LCD_DisplayString (	POINT Xstart, POINT Ystart, const char * pString, 
							sFONT* Font,COLOR Color_Background, COLOR Color_Foreground ){
 800113c:	b580      	push	{r7, lr}
 800113e:	b088      	sub	sp, #32
 8001140:	af02      	add	r7, sp, #8
 8001142:	60ba      	str	r2, [r7, #8]
 8001144:	607b      	str	r3, [r7, #4]
 8001146:	4603      	mov	r3, r0
 8001148:	81fb      	strh	r3, [r7, #14]
 800114a:	460b      	mov	r3, r1
 800114c:	81bb      	strh	r3, [r7, #12]
	POINT Xpoint = Xstart;
 800114e:	89fb      	ldrh	r3, [r7, #14]
 8001150:	82fb      	strh	r3, [r7, #22]
	POINT Ypoint = Ystart;
 8001152:	89bb      	ldrh	r3, [r7, #12]
 8001154:	82bb      	strh	r3, [r7, #20]

	if (Xstart >= sLCD_DIS.LCD_Dis_Column || Ystart >= sLCD_DIS.LCD_Dis_Page) {
 8001156:	4b21      	ldr	r3, [pc, #132]	; (80011dc <LCD_DisplayString+0xa0>)
 8001158:	881b      	ldrh	r3, [r3, #0]
 800115a:	89fa      	ldrh	r2, [r7, #14]
 800115c:	429a      	cmp	r2, r3
 800115e:	d238      	bcs.n	80011d2 <LCD_DisplayString+0x96>
 8001160:	4b1e      	ldr	r3, [pc, #120]	; (80011dc <LCD_DisplayString+0xa0>)
 8001162:	885b      	ldrh	r3, [r3, #2]
 8001164:	89ba      	ldrh	r2, [r7, #12]
 8001166:	429a      	cmp	r2, r3
 8001168:	d233      	bcs.n	80011d2 <LCD_DisplayString+0x96>
		return;
	}
		
	while ( * pString != '\0')
 800116a:	e02d      	b.n	80011c8 <LCD_DisplayString+0x8c>
	{
		//if X direction filled , reposition to(Xstart,Ypoint),Ypoint is Y direction plus the height of the character
		if ( ( Xpoint + Font->Width ) > sLCD_DIS.LCD_Dis_Column ){
 800116c:	8afb      	ldrh	r3, [r7, #22]
 800116e:	687a      	ldr	r2, [r7, #4]
 8001170:	8892      	ldrh	r2, [r2, #4]
 8001172:	4413      	add	r3, r2
 8001174:	4a19      	ldr	r2, [pc, #100]	; (80011dc <LCD_DisplayString+0xa0>)
 8001176:	8812      	ldrh	r2, [r2, #0]
 8001178:	4293      	cmp	r3, r2
 800117a:	dd06      	ble.n	800118a <LCD_DisplayString+0x4e>
			Xpoint = Xstart;
 800117c:	89fb      	ldrh	r3, [r7, #14]
 800117e:	82fb      	strh	r3, [r7, #22]
			Ypoint += Font->Height;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	88da      	ldrh	r2, [r3, #6]
 8001184:	8abb      	ldrh	r3, [r7, #20]
 8001186:	4413      	add	r3, r2
 8001188:	82bb      	strh	r3, [r7, #20]
		}
		
		// If the Y direction is full, reposition to (Xstart, Ystart)
		if ( ( Ypoint  + Font->Height ) > sLCD_DIS.LCD_Dis_Page ){
 800118a:	8abb      	ldrh	r3, [r7, #20]
 800118c:	687a      	ldr	r2, [r7, #4]
 800118e:	88d2      	ldrh	r2, [r2, #6]
 8001190:	4413      	add	r3, r2
 8001192:	4a12      	ldr	r2, [pc, #72]	; (80011dc <LCD_DisplayString+0xa0>)
 8001194:	8852      	ldrh	r2, [r2, #2]
 8001196:	4293      	cmp	r3, r2
 8001198:	dd03      	ble.n	80011a2 <LCD_DisplayString+0x66>
			Xpoint = Xstart;
 800119a:	89fb      	ldrh	r3, [r7, #14]
 800119c:	82fb      	strh	r3, [r7, #22]
			Ypoint = Ystart;
 800119e:	89bb      	ldrh	r3, [r7, #12]
 80011a0:	82bb      	strh	r3, [r7, #20]
		}		
		LCD_DisplayChar ( Xpoint, Ypoint, * pString, Font, Color_Background, Color_Foreground );
 80011a2:	68bb      	ldr	r3, [r7, #8]
 80011a4:	781a      	ldrb	r2, [r3, #0]
 80011a6:	8ab9      	ldrh	r1, [r7, #20]
 80011a8:	8af8      	ldrh	r0, [r7, #22]
 80011aa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80011ac:	9301      	str	r3, [sp, #4]
 80011ae:	8c3b      	ldrh	r3, [r7, #32]
 80011b0:	9300      	str	r3, [sp, #0]
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	f7ff ff1a 	bl	8000fec <LCD_DisplayChar>
		
		//The next character of the address
		pString ++;
 80011b8:	68bb      	ldr	r3, [r7, #8]
 80011ba:	3301      	adds	r3, #1
 80011bc:	60bb      	str	r3, [r7, #8]
		
		//The next word of the abscissa increases the font of the broadband
		Xpoint += Font->Width;	
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	889a      	ldrh	r2, [r3, #4]
 80011c2:	8afb      	ldrh	r3, [r7, #22]
 80011c4:	4413      	add	r3, r2
 80011c6:	82fb      	strh	r3, [r7, #22]
	while ( * pString != '\0')
 80011c8:	68bb      	ldr	r3, [r7, #8]
 80011ca:	781b      	ldrb	r3, [r3, #0]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d1cd      	bne.n	800116c <LCD_DisplayString+0x30>
 80011d0:	e000      	b.n	80011d4 <LCD_DisplayString+0x98>
		return;
 80011d2:	bf00      	nop
	}
}
 80011d4:	3718      	adds	r7, #24
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	20000154 	.word	0x20000154

080011e0 <mountSDcard>:
#include "SD_card.h"
#include "fatfs.h"
struct SD_Iterface SD;
uint8_t fresult;
uint32_t size;
uint8_t mountSDcard(void){
 80011e0:	b580      	push	{r7, lr}
 80011e2:	af00      	add	r7, sp, #0
	fresult = f_mount(&SD.fs, "/", 1);
 80011e4:	2201      	movs	r2, #1
 80011e6:	4906      	ldr	r1, [pc, #24]	; (8001200 <mountSDcard+0x20>)
 80011e8:	4806      	ldr	r0, [pc, #24]	; (8001204 <mountSDcard+0x24>)
 80011ea:	f008 fcc1 	bl	8009b70 <f_mount>
 80011ee:	4603      	mov	r3, r0
 80011f0:	461a      	mov	r2, r3
 80011f2:	4b05      	ldr	r3, [pc, #20]	; (8001208 <mountSDcard+0x28>)
 80011f4:	701a      	strb	r2, [r3, #0]
	return fresult;
 80011f6:	4b04      	ldr	r3, [pc, #16]	; (8001208 <mountSDcard+0x28>)
 80011f8:	781b      	ldrb	r3, [r3, #0]
}
 80011fa:	4618      	mov	r0, r3
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	0800b548 	.word	0x0800b548
 8001204:	20000160 	.word	0x20000160
 8001208:	200031e8 	.word	0x200031e8

0800120c <deleteFile>:
void unmountSDcard(void){
	fresult = f_mount(NULL, "/", 1);

}

void deleteFile(const TCHAR* path){
 800120c:	b580      	push	{r7, lr}
 800120e:	b082      	sub	sp, #8
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
	fresult = f_unlink(path);
 8001214:	6878      	ldr	r0, [r7, #4]
 8001216:	f009 fb1d 	bl	800a854 <f_unlink>
 800121a:	4603      	mov	r3, r0
 800121c:	461a      	mov	r2, r3
 800121e:	4b03      	ldr	r3, [pc, #12]	; (800122c <deleteFile+0x20>)
 8001220:	701a      	strb	r2, [r3, #0]

}
 8001222:	bf00      	nop
 8001224:	3708      	adds	r7, #8
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	200031e8 	.word	0x200031e8

08001230 <writeDataPacked>:


uint8_t writeDataPacked(const TCHAR* path,BYTE mode){
 8001230:	b580      	push	{r7, lr}
 8001232:	b082      	sub	sp, #8
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
 8001238:	460b      	mov	r3, r1
 800123a:	70fb      	strb	r3, [r7, #3]
	fresult = f_open(&SD.fil, path, mode);
 800123c:	78fb      	ldrb	r3, [r7, #3]
 800123e:	461a      	mov	r2, r3
 8001240:	6879      	ldr	r1, [r7, #4]
 8001242:	4816      	ldr	r0, [pc, #88]	; (800129c <writeDataPacked+0x6c>)
 8001244:	f008 fcda 	bl	8009bfc <f_open>
 8001248:	4603      	mov	r3, r0
 800124a:	461a      	mov	r2, r3
 800124c:	4b14      	ldr	r3, [pc, #80]	; (80012a0 <writeDataPacked+0x70>)
 800124e:	701a      	strb	r2, [r3, #0]
	fresult=f_lseek(&SD.fil, f_size(&SD.fil));
 8001250:	4b14      	ldr	r3, [pc, #80]	; (80012a4 <writeDataPacked+0x74>)
 8001252:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001256:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001258:	4619      	mov	r1, r3
 800125a:	4810      	ldr	r0, [pc, #64]	; (800129c <writeDataPacked+0x6c>)
 800125c:	f009 f8d6 	bl	800a40c <f_lseek>
 8001260:	4603      	mov	r3, r0
 8001262:	461a      	mov	r2, r3
 8001264:	4b0e      	ldr	r3, [pc, #56]	; (80012a0 <writeDataPacked+0x70>)
 8001266:	701a      	strb	r2, [r3, #0]
	fresult = f_write(&SD.fil, SD.buffer,bufsize(SD.buffer), &SD.bw);
 8001268:	480f      	ldr	r0, [pc, #60]	; (80012a8 <writeDataPacked+0x78>)
 800126a:	f000 f821 	bl	80012b0 <bufsize>
 800126e:	4603      	mov	r3, r0
 8001270:	461a      	mov	r2, r3
 8001272:	4b0e      	ldr	r3, [pc, #56]	; (80012ac <writeDataPacked+0x7c>)
 8001274:	490c      	ldr	r1, [pc, #48]	; (80012a8 <writeDataPacked+0x78>)
 8001276:	4809      	ldr	r0, [pc, #36]	; (800129c <writeDataPacked+0x6c>)
 8001278:	f008 fe8c 	bl	8009f94 <f_write>
 800127c:	4603      	mov	r3, r0
 800127e:	461a      	mov	r2, r3
 8001280:	4b07      	ldr	r3, [pc, #28]	; (80012a0 <writeDataPacked+0x70>)
 8001282:	701a      	strb	r2, [r3, #0]
	f_close(&SD.fil);
 8001284:	4805      	ldr	r0, [pc, #20]	; (800129c <writeDataPacked+0x6c>)
 8001286:	f009 f897 	bl	800a3b8 <f_close>
	bufclear();
 800128a:	f000 f829 	bl	80012e0 <bufclear>
	return fresult;
 800128e:	4b04      	ldr	r3, [pc, #16]	; (80012a0 <writeDataPacked+0x70>)
 8001290:	781b      	ldrb	r3, [r3, #0]
}
 8001292:	4618      	mov	r0, r3
 8001294:	3708      	adds	r7, #8
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	20001198 	.word	0x20001198
 80012a0:	200031e8 	.word	0x200031e8
 80012a4:	20000160 	.word	0x20000160
 80012a8:	200021c9 	.word	0x200021c9
 80012ac:	200031d0 	.word	0x200031d0

080012b0 <bufsize>:

}



int bufsize(char *buff){
 80012b0:	b480      	push	{r7}
 80012b2:	b085      	sub	sp, #20
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]

	int i=0;
 80012b8:	2300      	movs	r3, #0
 80012ba:	60fb      	str	r3, [r7, #12]
	while(*buff++ !=  '\0') i++;
 80012bc:	e002      	b.n	80012c4 <bufsize+0x14>
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	3301      	adds	r3, #1
 80012c2:	60fb      	str	r3, [r7, #12]
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	1c5a      	adds	r2, r3, #1
 80012c8:	607a      	str	r2, [r7, #4]
 80012ca:	781b      	ldrb	r3, [r3, #0]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d1f6      	bne.n	80012be <bufsize+0xe>
	return i;
 80012d0:	68fb      	ldr	r3, [r7, #12]

}
 80012d2:	4618      	mov	r0, r3
 80012d4:	3714      	adds	r7, #20
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr
	...

080012e0 <bufclear>:

void bufclear(void){
 80012e0:	b480      	push	{r7}
 80012e2:	b083      	sub	sp, #12
 80012e4:	af00      	add	r7, sp, #0
	for(int i=0;i<1024;i++){
 80012e6:	2300      	movs	r3, #0
 80012e8:	607b      	str	r3, [r7, #4]
 80012ea:	e00a      	b.n	8001302 <bufclear+0x22>
		SD.buffer[i]='\0';
 80012ec:	4a0a      	ldr	r2, [pc, #40]	; (8001318 <bufclear+0x38>)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	4413      	add	r3, r2
 80012f2:	f503 5301 	add.w	r3, r3, #8256	; 0x2040
 80012f6:	3329      	adds	r3, #41	; 0x29
 80012f8:	2200      	movs	r2, #0
 80012fa:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<1024;i++){
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	3301      	adds	r3, #1
 8001300:	607b      	str	r3, [r7, #4]
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001308:	dbf0      	blt.n	80012ec <bufclear+0xc>
	}


}
 800130a:	bf00      	nop
 800130c:	bf00      	nop
 800130e:	370c      	adds	r7, #12
 8001310:	46bd      	mov	sp, r7
 8001312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001316:	4770      	bx	lr
 8001318:	20000160 	.word	0x20000160

0800131c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b084      	sub	sp, #16
 8001320:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001322:	463b      	mov	r3, r7
 8001324:	2200      	movs	r2, #0
 8001326:	601a      	str	r2, [r3, #0]
 8001328:	605a      	str	r2, [r3, #4]
 800132a:	609a      	str	r2, [r3, #8]
 800132c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800132e:	4b22      	ldr	r3, [pc, #136]	; (80013b8 <MX_ADC1_Init+0x9c>)
 8001330:	4a22      	ldr	r2, [pc, #136]	; (80013bc <MX_ADC1_Init+0xa0>)
 8001332:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001334:	4b20      	ldr	r3, [pc, #128]	; (80013b8 <MX_ADC1_Init+0x9c>)
 8001336:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800133a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800133c:	4b1e      	ldr	r3, [pc, #120]	; (80013b8 <MX_ADC1_Init+0x9c>)
 800133e:	2200      	movs	r2, #0
 8001340:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001342:	4b1d      	ldr	r3, [pc, #116]	; (80013b8 <MX_ADC1_Init+0x9c>)
 8001344:	2200      	movs	r2, #0
 8001346:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001348:	4b1b      	ldr	r3, [pc, #108]	; (80013b8 <MX_ADC1_Init+0x9c>)
 800134a:	2200      	movs	r2, #0
 800134c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800134e:	4b1a      	ldr	r3, [pc, #104]	; (80013b8 <MX_ADC1_Init+0x9c>)
 8001350:	2200      	movs	r2, #0
 8001352:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001356:	4b18      	ldr	r3, [pc, #96]	; (80013b8 <MX_ADC1_Init+0x9c>)
 8001358:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800135c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T4_CC4;
 800135e:	4b16      	ldr	r3, [pc, #88]	; (80013b8 <MX_ADC1_Init+0x9c>)
 8001360:	f04f 6210 	mov.w	r2, #150994944	; 0x9000000
 8001364:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001366:	4b14      	ldr	r3, [pc, #80]	; (80013b8 <MX_ADC1_Init+0x9c>)
 8001368:	2200      	movs	r2, #0
 800136a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800136c:	4b12      	ldr	r3, [pc, #72]	; (80013b8 <MX_ADC1_Init+0x9c>)
 800136e:	2201      	movs	r2, #1
 8001370:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001372:	4b11      	ldr	r3, [pc, #68]	; (80013b8 <MX_ADC1_Init+0x9c>)
 8001374:	2201      	movs	r2, #1
 8001376:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800137a:	4b0f      	ldr	r3, [pc, #60]	; (80013b8 <MX_ADC1_Init+0x9c>)
 800137c:	2201      	movs	r2, #1
 800137e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001380:	480d      	ldr	r0, [pc, #52]	; (80013b8 <MX_ADC1_Init+0x9c>)
 8001382:	f002 f821 	bl	80033c8 <HAL_ADC_Init>
 8001386:	4603      	mov	r3, r0
 8001388:	2b00      	cmp	r3, #0
 800138a:	d001      	beq.n	8001390 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 800138c:	f001 f988 	bl	80026a0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001390:	2301      	movs	r3, #1
 8001392:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001394:	2301      	movs	r3, #1
 8001396:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 8001398:	2306      	movs	r3, #6
 800139a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800139c:	463b      	mov	r3, r7
 800139e:	4619      	mov	r1, r3
 80013a0:	4805      	ldr	r0, [pc, #20]	; (80013b8 <MX_ADC1_Init+0x9c>)
 80013a2:	f002 f963 	bl	800366c <HAL_ADC_ConfigChannel>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d001      	beq.n	80013b0 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 80013ac:	f001 f978 	bl	80026a0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80013b0:	bf00      	nop
 80013b2:	3710      	adds	r7, #16
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	200031ec 	.word	0x200031ec
 80013bc:	40012000 	.word	0x40012000

080013c0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b08a      	sub	sp, #40	; 0x28
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013c8:	f107 0314 	add.w	r3, r7, #20
 80013cc:	2200      	movs	r2, #0
 80013ce:	601a      	str	r2, [r3, #0]
 80013d0:	605a      	str	r2, [r3, #4]
 80013d2:	609a      	str	r2, [r3, #8]
 80013d4:	60da      	str	r2, [r3, #12]
 80013d6:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4a2f      	ldr	r2, [pc, #188]	; (800149c <HAL_ADC_MspInit+0xdc>)
 80013de:	4293      	cmp	r3, r2
 80013e0:	d157      	bne.n	8001492 <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80013e2:	2300      	movs	r3, #0
 80013e4:	613b      	str	r3, [r7, #16]
 80013e6:	4b2e      	ldr	r3, [pc, #184]	; (80014a0 <HAL_ADC_MspInit+0xe0>)
 80013e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ea:	4a2d      	ldr	r2, [pc, #180]	; (80014a0 <HAL_ADC_MspInit+0xe0>)
 80013ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013f0:	6453      	str	r3, [r2, #68]	; 0x44
 80013f2:	4b2b      	ldr	r3, [pc, #172]	; (80014a0 <HAL_ADC_MspInit+0xe0>)
 80013f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013fa:	613b      	str	r3, [r7, #16]
 80013fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013fe:	2300      	movs	r3, #0
 8001400:	60fb      	str	r3, [r7, #12]
 8001402:	4b27      	ldr	r3, [pc, #156]	; (80014a0 <HAL_ADC_MspInit+0xe0>)
 8001404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001406:	4a26      	ldr	r2, [pc, #152]	; (80014a0 <HAL_ADC_MspInit+0xe0>)
 8001408:	f043 0301 	orr.w	r3, r3, #1
 800140c:	6313      	str	r3, [r2, #48]	; 0x30
 800140e:	4b24      	ldr	r3, [pc, #144]	; (80014a0 <HAL_ADC_MspInit+0xe0>)
 8001410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001412:	f003 0301 	and.w	r3, r3, #1
 8001416:	60fb      	str	r3, [r7, #12]
 8001418:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800141a:	2302      	movs	r3, #2
 800141c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800141e:	2303      	movs	r3, #3
 8001420:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001422:	2300      	movs	r3, #0
 8001424:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001426:	f107 0314 	add.w	r3, r7, #20
 800142a:	4619      	mov	r1, r3
 800142c:	481d      	ldr	r0, [pc, #116]	; (80014a4 <HAL_ADC_MspInit+0xe4>)
 800142e:	f003 f83f 	bl	80044b0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001432:	4b1d      	ldr	r3, [pc, #116]	; (80014a8 <HAL_ADC_MspInit+0xe8>)
 8001434:	4a1d      	ldr	r2, [pc, #116]	; (80014ac <HAL_ADC_MspInit+0xec>)
 8001436:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001438:	4b1b      	ldr	r3, [pc, #108]	; (80014a8 <HAL_ADC_MspInit+0xe8>)
 800143a:	2200      	movs	r2, #0
 800143c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800143e:	4b1a      	ldr	r3, [pc, #104]	; (80014a8 <HAL_ADC_MspInit+0xe8>)
 8001440:	2200      	movs	r2, #0
 8001442:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001444:	4b18      	ldr	r3, [pc, #96]	; (80014a8 <HAL_ADC_MspInit+0xe8>)
 8001446:	2200      	movs	r2, #0
 8001448:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800144a:	4b17      	ldr	r3, [pc, #92]	; (80014a8 <HAL_ADC_MspInit+0xe8>)
 800144c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001450:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001452:	4b15      	ldr	r3, [pc, #84]	; (80014a8 <HAL_ADC_MspInit+0xe8>)
 8001454:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001458:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800145a:	4b13      	ldr	r3, [pc, #76]	; (80014a8 <HAL_ADC_MspInit+0xe8>)
 800145c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001460:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001462:	4b11      	ldr	r3, [pc, #68]	; (80014a8 <HAL_ADC_MspInit+0xe8>)
 8001464:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001468:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800146a:	4b0f      	ldr	r3, [pc, #60]	; (80014a8 <HAL_ADC_MspInit+0xe8>)
 800146c:	2200      	movs	r2, #0
 800146e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001470:	4b0d      	ldr	r3, [pc, #52]	; (80014a8 <HAL_ADC_MspInit+0xe8>)
 8001472:	2200      	movs	r2, #0
 8001474:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001476:	480c      	ldr	r0, [pc, #48]	; (80014a8 <HAL_ADC_MspInit+0xe8>)
 8001478:	f002 fcaa 	bl	8003dd0 <HAL_DMA_Init>
 800147c:	4603      	mov	r3, r0
 800147e:	2b00      	cmp	r3, #0
 8001480:	d001      	beq.n	8001486 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8001482:	f001 f90d 	bl	80026a0 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	4a07      	ldr	r2, [pc, #28]	; (80014a8 <HAL_ADC_MspInit+0xe8>)
 800148a:	639a      	str	r2, [r3, #56]	; 0x38
 800148c:	4a06      	ldr	r2, [pc, #24]	; (80014a8 <HAL_ADC_MspInit+0xe8>)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001492:	bf00      	nop
 8001494:	3728      	adds	r7, #40	; 0x28
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	40012000 	.word	0x40012000
 80014a0:	40023800 	.word	0x40023800
 80014a4:	40020000 	.word	0x40020000
 80014a8:	20003234 	.word	0x20003234
 80014ac:	40026410 	.word	0x40026410

080014b0 <key_next_press>:
void (*key_enter_func)(void) = &menu_enter;




void key_next_press(void){
 80014b0:	b580      	push	{r7, lr}
 80014b2:	af00      	add	r7, sp, #0
	if(key_next_func)(*key_next_func)();
 80014b4:	4b04      	ldr	r3, [pc, #16]	; (80014c8 <key_next_press+0x18>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d002      	beq.n	80014c2 <key_next_press+0x12>
 80014bc:	4b02      	ldr	r3, [pc, #8]	; (80014c8 <key_next_press+0x18>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4798      	blx	r3
}
 80014c2:	bf00      	nop
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	20000000 	.word	0x20000000

080014cc <key_prev_press>:

void key_prev_press(void){
 80014cc:	b580      	push	{r7, lr}
 80014ce:	af00      	add	r7, sp, #0
if(key_prev_func) (*key_prev_func)();
 80014d0:	4b04      	ldr	r3, [pc, #16]	; (80014e4 <key_prev_press+0x18>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d002      	beq.n	80014de <key_prev_press+0x12>
 80014d8:	4b02      	ldr	r3, [pc, #8]	; (80014e4 <key_prev_press+0x18>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4798      	blx	r3
}
 80014de:	bf00      	nop
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	20000004 	.word	0x20000004

080014e8 <key_enter_press>:



void key_enter_press(void){
 80014e8:	b580      	push	{r7, lr}
 80014ea:	af00      	add	r7, sp, #0
	if(key_enter_func) (*key_enter_func)();
 80014ec:	4b04      	ldr	r3, [pc, #16]	; (8001500 <key_enter_press+0x18>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d002      	beq.n	80014fa <key_enter_press+0x12>
 80014f4:	4b02      	ldr	r3, [pc, #8]	; (8001500 <key_enter_press+0x18>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	4798      	blx	r3
}
 80014fa:	bf00      	nop
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	20000008 	.word	0x20000008

08001504 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b082      	sub	sp, #8
 8001508:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800150a:	2300      	movs	r3, #0
 800150c:	607b      	str	r3, [r7, #4]
 800150e:	4b0c      	ldr	r3, [pc, #48]	; (8001540 <MX_DMA_Init+0x3c>)
 8001510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001512:	4a0b      	ldr	r2, [pc, #44]	; (8001540 <MX_DMA_Init+0x3c>)
 8001514:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001518:	6313      	str	r3, [r2, #48]	; 0x30
 800151a:	4b09      	ldr	r3, [pc, #36]	; (8001540 <MX_DMA_Init+0x3c>)
 800151c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001522:	607b      	str	r3, [r7, #4]
 8001524:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001526:	2200      	movs	r2, #0
 8001528:	2100      	movs	r1, #0
 800152a:	2038      	movs	r0, #56	; 0x38
 800152c:	f002 fc19 	bl	8003d62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001530:	2038      	movs	r0, #56	; 0x38
 8001532:	f002 fc32 	bl	8003d9a <HAL_NVIC_EnableIRQ>

}
 8001536:	bf00      	nop
 8001538:	3708      	adds	r7, #8
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	40023800 	.word	0x40023800

08001544 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8001548:	2200      	movs	r2, #0
 800154a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800154e:	4804      	ldr	r0, [pc, #16]	; (8001560 <SELECT+0x1c>)
 8001550:	f003 f94a 	bl	80047e8 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001554:	2001      	movs	r0, #1
 8001556:	f001 ff13 	bl	8003380 <HAL_Delay>
}
 800155a:	bf00      	nop
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	40020400 	.word	0x40020400

08001564 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8001568:	2201      	movs	r2, #1
 800156a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800156e:	4804      	ldr	r0, [pc, #16]	; (8001580 <DESELECT+0x1c>)
 8001570:	f003 f93a 	bl	80047e8 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001574:	2001      	movs	r0, #1
 8001576:	f001 ff03 	bl	8003380 <HAL_Delay>
}
 800157a:	bf00      	nop
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	40020400 	.word	0x40020400

08001584 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b082      	sub	sp, #8
 8001588:	af00      	add	r7, sp, #0
 800158a:	4603      	mov	r3, r0
 800158c:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800158e:	bf00      	nop
 8001590:	4b08      	ldr	r3, [pc, #32]	; (80015b4 <SPI_TxByte+0x30>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	689b      	ldr	r3, [r3, #8]
 8001596:	f003 0302 	and.w	r3, r3, #2
 800159a:	2b02      	cmp	r3, #2
 800159c:	d1f8      	bne.n	8001590 <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 800159e:	1df9      	adds	r1, r7, #7
 80015a0:	2364      	movs	r3, #100	; 0x64
 80015a2:	2201      	movs	r2, #1
 80015a4:	4803      	ldr	r0, [pc, #12]	; (80015b4 <SPI_TxByte+0x30>)
 80015a6:	f003 fe32 	bl	800520e <HAL_SPI_Transmit>
}
 80015aa:	bf00      	nop
 80015ac:	3708      	adds	r7, #8
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	20003b78 	.word	0x20003b78

080015b8 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b082      	sub	sp, #8
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
 80015c0:	460b      	mov	r3, r1
 80015c2:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80015c4:	bf00      	nop
 80015c6:	4b08      	ldr	r3, [pc, #32]	; (80015e8 <SPI_TxBuffer+0x30>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	689b      	ldr	r3, [r3, #8]
 80015cc:	f003 0302 	and.w	r3, r3, #2
 80015d0:	2b02      	cmp	r3, #2
 80015d2:	d1f8      	bne.n	80015c6 <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 80015d4:	887a      	ldrh	r2, [r7, #2]
 80015d6:	2364      	movs	r3, #100	; 0x64
 80015d8:	6879      	ldr	r1, [r7, #4]
 80015da:	4803      	ldr	r0, [pc, #12]	; (80015e8 <SPI_TxBuffer+0x30>)
 80015dc:	f003 fe17 	bl	800520e <HAL_SPI_Transmit>
}
 80015e0:	bf00      	nop
 80015e2:	3708      	adds	r7, #8
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}
 80015e8:	20003b78 	.word	0x20003b78

080015ec <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b084      	sub	sp, #16
 80015f0:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 80015f2:	23ff      	movs	r3, #255	; 0xff
 80015f4:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80015f6:	bf00      	nop
 80015f8:	4b09      	ldr	r3, [pc, #36]	; (8001620 <SPI_RxByte+0x34>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	689b      	ldr	r3, [r3, #8]
 80015fe:	f003 0302 	and.w	r3, r3, #2
 8001602:	2b02      	cmp	r3, #2
 8001604:	d1f8      	bne.n	80015f8 <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8001606:	1dba      	adds	r2, r7, #6
 8001608:	1df9      	adds	r1, r7, #7
 800160a:	2364      	movs	r3, #100	; 0x64
 800160c:	9300      	str	r3, [sp, #0]
 800160e:	2301      	movs	r3, #1
 8001610:	4803      	ldr	r0, [pc, #12]	; (8001620 <SPI_RxByte+0x34>)
 8001612:	f003 ff38 	bl	8005486 <HAL_SPI_TransmitReceive>

	return data;
 8001616:	79bb      	ldrb	r3, [r7, #6]
}
 8001618:	4618      	mov	r0, r3
 800161a:	3708      	adds	r7, #8
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}
 8001620:	20003b78 	.word	0x20003b78

08001624 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b082      	sub	sp, #8
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 800162c:	f7ff ffde 	bl	80015ec <SPI_RxByte>
 8001630:	4603      	mov	r3, r0
 8001632:	461a      	mov	r2, r3
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	701a      	strb	r2, [r3, #0]
}
 8001638:	bf00      	nop
 800163a:	3708      	adds	r7, #8
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}

08001640 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b082      	sub	sp, #8
 8001644:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 8001646:	4b0a      	ldr	r3, [pc, #40]	; (8001670 <SD_ReadyWait+0x30>)
 8001648:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800164c:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 800164e:	f7ff ffcd 	bl	80015ec <SPI_RxByte>
 8001652:	4603      	mov	r3, r0
 8001654:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 8001656:	79fb      	ldrb	r3, [r7, #7]
 8001658:	2bff      	cmp	r3, #255	; 0xff
 800165a:	d003      	beq.n	8001664 <SD_ReadyWait+0x24>
 800165c:	4b04      	ldr	r3, [pc, #16]	; (8001670 <SD_ReadyWait+0x30>)
 800165e:	881b      	ldrh	r3, [r3, #0]
 8001660:	2b00      	cmp	r3, #0
 8001662:	d1f4      	bne.n	800164e <SD_ReadyWait+0xe>

	return res;
 8001664:	79fb      	ldrb	r3, [r7, #7]
}
 8001666:	4618      	mov	r0, r3
 8001668:	3708      	adds	r7, #8
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	20003296 	.word	0x20003296

08001674 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void) 
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b084      	sub	sp, #16
 8001678:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 800167a:	f641 73ff 	movw	r3, #8191	; 0x1fff
 800167e:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 8001680:	f7ff ff70 	bl	8001564 <DESELECT>
	for(int i = 0; i < 10; i++)
 8001684:	2300      	movs	r3, #0
 8001686:	60bb      	str	r3, [r7, #8]
 8001688:	e005      	b.n	8001696 <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 800168a:	20ff      	movs	r0, #255	; 0xff
 800168c:	f7ff ff7a 	bl	8001584 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 8001690:	68bb      	ldr	r3, [r7, #8]
 8001692:	3301      	adds	r3, #1
 8001694:	60bb      	str	r3, [r7, #8]
 8001696:	68bb      	ldr	r3, [r7, #8]
 8001698:	2b09      	cmp	r3, #9
 800169a:	ddf6      	ble.n	800168a <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 800169c:	f7ff ff52 	bl	8001544 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 80016a0:	2340      	movs	r3, #64	; 0x40
 80016a2:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 80016a4:	2300      	movs	r3, #0
 80016a6:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 80016a8:	2300      	movs	r3, #0
 80016aa:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 80016ac:	2300      	movs	r3, #0
 80016ae:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 80016b0:	2300      	movs	r3, #0
 80016b2:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 80016b4:	2395      	movs	r3, #149	; 0x95
 80016b6:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 80016b8:	463b      	mov	r3, r7
 80016ba:	2106      	movs	r1, #6
 80016bc:	4618      	mov	r0, r3
 80016be:	f7ff ff7b 	bl	80015b8 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 80016c2:	e002      	b.n	80016ca <SD_PowerOn+0x56>
	{
		cnt--;
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	3b01      	subs	r3, #1
 80016c8:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 80016ca:	f7ff ff8f 	bl	80015ec <SPI_RxByte>
 80016ce:	4603      	mov	r3, r0
 80016d0:	2b01      	cmp	r3, #1
 80016d2:	d002      	beq.n	80016da <SD_PowerOn+0x66>
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d1f4      	bne.n	80016c4 <SD_PowerOn+0x50>
	}

	DESELECT();
 80016da:	f7ff ff43 	bl	8001564 <DESELECT>
	SPI_TxByte(0XFF);
 80016de:	20ff      	movs	r0, #255	; 0xff
 80016e0:	f7ff ff50 	bl	8001584 <SPI_TxByte>

	PowerFlag = 1;
 80016e4:	4b03      	ldr	r3, [pc, #12]	; (80016f4 <SD_PowerOn+0x80>)
 80016e6:	2201      	movs	r2, #1
 80016e8:	701a      	strb	r2, [r3, #0]
}
 80016ea:	bf00      	nop
 80016ec:	3710      	adds	r7, #16
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	bf00      	nop
 80016f4:	20003299 	.word	0x20003299

080016f8 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void) 
{
 80016f8:	b480      	push	{r7}
 80016fa:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 80016fc:	4b03      	ldr	r3, [pc, #12]	; (800170c <SD_PowerOff+0x14>)
 80016fe:	2200      	movs	r2, #0
 8001700:	701a      	strb	r2, [r3, #0]
}
 8001702:	bf00      	nop
 8001704:	46bd      	mov	sp, r7
 8001706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170a:	4770      	bx	lr
 800170c:	20003299 	.word	0x20003299

08001710 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void) 
{
 8001710:	b480      	push	{r7}
 8001712:	af00      	add	r7, sp, #0
	return PowerFlag;
 8001714:	4b03      	ldr	r3, [pc, #12]	; (8001724 <SD_CheckPower+0x14>)
 8001716:	781b      	ldrb	r3, [r3, #0]
}
 8001718:	4618      	mov	r0, r3
 800171a:	46bd      	mov	sp, r7
 800171c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001720:	4770      	bx	lr
 8001722:	bf00      	nop
 8001724:	20003299 	.word	0x20003299

08001728 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b084      	sub	sp, #16
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
 8001730:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 8001732:	4b13      	ldr	r3, [pc, #76]	; (8001780 <SD_RxDataBlock+0x58>)
 8001734:	22c8      	movs	r2, #200	; 0xc8
 8001736:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 8001738:	f7ff ff58 	bl	80015ec <SPI_RxByte>
 800173c:	4603      	mov	r3, r0
 800173e:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 8001740:	7bfb      	ldrb	r3, [r7, #15]
 8001742:	2bff      	cmp	r3, #255	; 0xff
 8001744:	d103      	bne.n	800174e <SD_RxDataBlock+0x26>
 8001746:	4b0e      	ldr	r3, [pc, #56]	; (8001780 <SD_RxDataBlock+0x58>)
 8001748:	881b      	ldrh	r3, [r3, #0]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d1f4      	bne.n	8001738 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 800174e:	7bfb      	ldrb	r3, [r7, #15]
 8001750:	2bfe      	cmp	r3, #254	; 0xfe
 8001752:	d001      	beq.n	8001758 <SD_RxDataBlock+0x30>
 8001754:	2300      	movs	r3, #0
 8001756:	e00f      	b.n	8001778 <SD_RxDataBlock+0x50>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	1c5a      	adds	r2, r3, #1
 800175c:	607a      	str	r2, [r7, #4]
 800175e:	4618      	mov	r0, r3
 8001760:	f7ff ff60 	bl	8001624 <SPI_RxBytePtr>
	} while(len--);
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	1e5a      	subs	r2, r3, #1
 8001768:	603a      	str	r2, [r7, #0]
 800176a:	2b00      	cmp	r3, #0
 800176c:	d1f4      	bne.n	8001758 <SD_RxDataBlock+0x30>

	/* discard CRC */
	SPI_RxByte();
 800176e:	f7ff ff3d 	bl	80015ec <SPI_RxByte>
	SPI_RxByte();
 8001772:	f7ff ff3b 	bl	80015ec <SPI_RxByte>

	return TRUE;
 8001776:	2301      	movs	r3, #1
}
 8001778:	4618      	mov	r0, r3
 800177a:	3710      	adds	r7, #16
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}
 8001780:	20003294 	.word	0x20003294

08001784 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b084      	sub	sp, #16
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
 800178c:	460b      	mov	r3, r1
 800178e:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 8001790:	2300      	movs	r3, #0
 8001792:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 8001794:	f7ff ff54 	bl	8001640 <SD_ReadyWait>
 8001798:	4603      	mov	r3, r0
 800179a:	2bff      	cmp	r3, #255	; 0xff
 800179c:	d001      	beq.n	80017a2 <SD_TxDataBlock+0x1e>
 800179e:	2300      	movs	r3, #0
 80017a0:	e02f      	b.n	8001802 <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 80017a2:	78fb      	ldrb	r3, [r7, #3]
 80017a4:	4618      	mov	r0, r3
 80017a6:	f7ff feed 	bl	8001584 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 80017aa:	78fb      	ldrb	r3, [r7, #3]
 80017ac:	2bfd      	cmp	r3, #253	; 0xfd
 80017ae:	d020      	beq.n	80017f2 <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 80017b0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80017b4:	6878      	ldr	r0, [r7, #4]
 80017b6:	f7ff feff 	bl	80015b8 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 80017ba:	f7ff ff17 	bl	80015ec <SPI_RxByte>
		SPI_RxByte();
 80017be:	f7ff ff15 	bl	80015ec <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 80017c2:	e00b      	b.n	80017dc <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 80017c4:	f7ff ff12 	bl	80015ec <SPI_RxByte>
 80017c8:	4603      	mov	r3, r0
 80017ca:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 80017cc:	7bfb      	ldrb	r3, [r7, #15]
 80017ce:	f003 031f 	and.w	r3, r3, #31
 80017d2:	2b05      	cmp	r3, #5
 80017d4:	d006      	beq.n	80017e4 <SD_TxDataBlock+0x60>
			i++;
 80017d6:	7bbb      	ldrb	r3, [r7, #14]
 80017d8:	3301      	adds	r3, #1
 80017da:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 80017dc:	7bbb      	ldrb	r3, [r7, #14]
 80017de:	2b40      	cmp	r3, #64	; 0x40
 80017e0:	d9f0      	bls.n	80017c4 <SD_TxDataBlock+0x40>
 80017e2:	e000      	b.n	80017e6 <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 80017e4:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 80017e6:	bf00      	nop
 80017e8:	f7ff ff00 	bl	80015ec <SPI_RxByte>
 80017ec:	4603      	mov	r3, r0
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d0fa      	beq.n	80017e8 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 80017f2:	7bfb      	ldrb	r3, [r7, #15]
 80017f4:	f003 031f 	and.w	r3, r3, #31
 80017f8:	2b05      	cmp	r3, #5
 80017fa:	d101      	bne.n	8001800 <SD_TxDataBlock+0x7c>
 80017fc:	2301      	movs	r3, #1
 80017fe:	e000      	b.n	8001802 <SD_TxDataBlock+0x7e>

	return FALSE;
 8001800:	2300      	movs	r3, #0
}
 8001802:	4618      	mov	r0, r3
 8001804:	3710      	adds	r7, #16
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}

0800180a <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 800180a:	b580      	push	{r7, lr}
 800180c:	b084      	sub	sp, #16
 800180e:	af00      	add	r7, sp, #0
 8001810:	4603      	mov	r3, r0
 8001812:	6039      	str	r1, [r7, #0]
 8001814:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 8001816:	f7ff ff13 	bl	8001640 <SD_ReadyWait>
 800181a:	4603      	mov	r3, r0
 800181c:	2bff      	cmp	r3, #255	; 0xff
 800181e:	d001      	beq.n	8001824 <SD_SendCmd+0x1a>
 8001820:	23ff      	movs	r3, #255	; 0xff
 8001822:	e042      	b.n	80018aa <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 8001824:	79fb      	ldrb	r3, [r7, #7]
 8001826:	4618      	mov	r0, r3
 8001828:	f7ff feac 	bl	8001584 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	0e1b      	lsrs	r3, r3, #24
 8001830:	b2db      	uxtb	r3, r3
 8001832:	4618      	mov	r0, r3
 8001834:	f7ff fea6 	bl	8001584 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	0c1b      	lsrs	r3, r3, #16
 800183c:	b2db      	uxtb	r3, r3
 800183e:	4618      	mov	r0, r3
 8001840:	f7ff fea0 	bl	8001584 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	0a1b      	lsrs	r3, r3, #8
 8001848:	b2db      	uxtb	r3, r3
 800184a:	4618      	mov	r0, r3
 800184c:	f7ff fe9a 	bl	8001584 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	b2db      	uxtb	r3, r3
 8001854:	4618      	mov	r0, r3
 8001856:	f7ff fe95 	bl	8001584 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 800185a:	79fb      	ldrb	r3, [r7, #7]
 800185c:	2b40      	cmp	r3, #64	; 0x40
 800185e:	d102      	bne.n	8001866 <SD_SendCmd+0x5c>
 8001860:	2395      	movs	r3, #149	; 0x95
 8001862:	73fb      	strb	r3, [r7, #15]
 8001864:	e007      	b.n	8001876 <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 8001866:	79fb      	ldrb	r3, [r7, #7]
 8001868:	2b48      	cmp	r3, #72	; 0x48
 800186a:	d102      	bne.n	8001872 <SD_SendCmd+0x68>
 800186c:	2387      	movs	r3, #135	; 0x87
 800186e:	73fb      	strb	r3, [r7, #15]
 8001870:	e001      	b.n	8001876 <SD_SendCmd+0x6c>
	else crc = 1;
 8001872:	2301      	movs	r3, #1
 8001874:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 8001876:	7bfb      	ldrb	r3, [r7, #15]
 8001878:	4618      	mov	r0, r3
 800187a:	f7ff fe83 	bl	8001584 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 800187e:	79fb      	ldrb	r3, [r7, #7]
 8001880:	2b4c      	cmp	r3, #76	; 0x4c
 8001882:	d101      	bne.n	8001888 <SD_SendCmd+0x7e>
 8001884:	f7ff feb2 	bl	80015ec <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 8001888:	230a      	movs	r3, #10
 800188a:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 800188c:	f7ff feae 	bl	80015ec <SPI_RxByte>
 8001890:	4603      	mov	r3, r0
 8001892:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 8001894:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001898:	2b00      	cmp	r3, #0
 800189a:	da05      	bge.n	80018a8 <SD_SendCmd+0x9e>
 800189c:	7bbb      	ldrb	r3, [r7, #14]
 800189e:	3b01      	subs	r3, #1
 80018a0:	73bb      	strb	r3, [r7, #14]
 80018a2:	7bbb      	ldrb	r3, [r7, #14]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d1f1      	bne.n	800188c <SD_SendCmd+0x82>

	return res;
 80018a8:	7b7b      	ldrb	r3, [r7, #13]
}
 80018aa:	4618      	mov	r0, r3
 80018ac:	3710      	adds	r7, #16
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}
	...

080018b4 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 80018b4:	b590      	push	{r4, r7, lr}
 80018b6:	b085      	sub	sp, #20
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	4603      	mov	r3, r0
 80018bc:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 80018be:	79fb      	ldrb	r3, [r7, #7]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d001      	beq.n	80018c8 <SD_disk_initialize+0x14>
 80018c4:	2301      	movs	r3, #1
 80018c6:	e0d1      	b.n	8001a6c <SD_disk_initialize+0x1b8>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 80018c8:	4b6a      	ldr	r3, [pc, #424]	; (8001a74 <SD_disk_initialize+0x1c0>)
 80018ca:	781b      	ldrb	r3, [r3, #0]
 80018cc:	b2db      	uxtb	r3, r3
 80018ce:	f003 0302 	and.w	r3, r3, #2
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d003      	beq.n	80018de <SD_disk_initialize+0x2a>
 80018d6:	4b67      	ldr	r3, [pc, #412]	; (8001a74 <SD_disk_initialize+0x1c0>)
 80018d8:	781b      	ldrb	r3, [r3, #0]
 80018da:	b2db      	uxtb	r3, r3
 80018dc:	e0c6      	b.n	8001a6c <SD_disk_initialize+0x1b8>

	/* power on */
	SD_PowerOn();
 80018de:	f7ff fec9 	bl	8001674 <SD_PowerOn>

	/* slave select */
	SELECT();
 80018e2:	f7ff fe2f 	bl	8001544 <SELECT>

	/* check disk type */
	type = 0;
 80018e6:	2300      	movs	r3, #0
 80018e8:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 80018ea:	2100      	movs	r1, #0
 80018ec:	2040      	movs	r0, #64	; 0x40
 80018ee:	f7ff ff8c 	bl	800180a <SD_SendCmd>
 80018f2:	4603      	mov	r3, r0
 80018f4:	2b01      	cmp	r3, #1
 80018f6:	f040 80a1 	bne.w	8001a3c <SD_disk_initialize+0x188>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 80018fa:	4b5f      	ldr	r3, [pc, #380]	; (8001a78 <SD_disk_initialize+0x1c4>)
 80018fc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001900:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8001902:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8001906:	2048      	movs	r0, #72	; 0x48
 8001908:	f7ff ff7f 	bl	800180a <SD_SendCmd>
 800190c:	4603      	mov	r3, r0
 800190e:	2b01      	cmp	r3, #1
 8001910:	d155      	bne.n	80019be <SD_disk_initialize+0x10a>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 8001912:	2300      	movs	r3, #0
 8001914:	73fb      	strb	r3, [r7, #15]
 8001916:	e00c      	b.n	8001932 <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 8001918:	7bfc      	ldrb	r4, [r7, #15]
 800191a:	f7ff fe67 	bl	80015ec <SPI_RxByte>
 800191e:	4603      	mov	r3, r0
 8001920:	461a      	mov	r2, r3
 8001922:	f104 0310 	add.w	r3, r4, #16
 8001926:	443b      	add	r3, r7
 8001928:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 800192c:	7bfb      	ldrb	r3, [r7, #15]
 800192e:	3301      	adds	r3, #1
 8001930:	73fb      	strb	r3, [r7, #15]
 8001932:	7bfb      	ldrb	r3, [r7, #15]
 8001934:	2b03      	cmp	r3, #3
 8001936:	d9ef      	bls.n	8001918 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8001938:	7abb      	ldrb	r3, [r7, #10]
 800193a:	2b01      	cmp	r3, #1
 800193c:	d17e      	bne.n	8001a3c <SD_disk_initialize+0x188>
 800193e:	7afb      	ldrb	r3, [r7, #11]
 8001940:	2baa      	cmp	r3, #170	; 0xaa
 8001942:	d17b      	bne.n	8001a3c <SD_disk_initialize+0x188>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8001944:	2100      	movs	r1, #0
 8001946:	2077      	movs	r0, #119	; 0x77
 8001948:	f7ff ff5f 	bl	800180a <SD_SendCmd>
 800194c:	4603      	mov	r3, r0
 800194e:	2b01      	cmp	r3, #1
 8001950:	d807      	bhi.n	8001962 <SD_disk_initialize+0xae>
 8001952:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001956:	2069      	movs	r0, #105	; 0x69
 8001958:	f7ff ff57 	bl	800180a <SD_SendCmd>
 800195c:	4603      	mov	r3, r0
 800195e:	2b00      	cmp	r3, #0
 8001960:	d004      	beq.n	800196c <SD_disk_initialize+0xb8>
				} while (Timer1);
 8001962:	4b45      	ldr	r3, [pc, #276]	; (8001a78 <SD_disk_initialize+0x1c4>)
 8001964:	881b      	ldrh	r3, [r3, #0]
 8001966:	2b00      	cmp	r3, #0
 8001968:	d1ec      	bne.n	8001944 <SD_disk_initialize+0x90>
 800196a:	e000      	b.n	800196e <SD_disk_initialize+0xba>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 800196c:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 800196e:	4b42      	ldr	r3, [pc, #264]	; (8001a78 <SD_disk_initialize+0x1c4>)
 8001970:	881b      	ldrh	r3, [r3, #0]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d062      	beq.n	8001a3c <SD_disk_initialize+0x188>
 8001976:	2100      	movs	r1, #0
 8001978:	207a      	movs	r0, #122	; 0x7a
 800197a:	f7ff ff46 	bl	800180a <SD_SendCmd>
 800197e:	4603      	mov	r3, r0
 8001980:	2b00      	cmp	r3, #0
 8001982:	d15b      	bne.n	8001a3c <SD_disk_initialize+0x188>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 8001984:	2300      	movs	r3, #0
 8001986:	73fb      	strb	r3, [r7, #15]
 8001988:	e00c      	b.n	80019a4 <SD_disk_initialize+0xf0>
					{
						ocr[n] = SPI_RxByte();
 800198a:	7bfc      	ldrb	r4, [r7, #15]
 800198c:	f7ff fe2e 	bl	80015ec <SPI_RxByte>
 8001990:	4603      	mov	r3, r0
 8001992:	461a      	mov	r2, r3
 8001994:	f104 0310 	add.w	r3, r4, #16
 8001998:	443b      	add	r3, r7
 800199a:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 800199e:	7bfb      	ldrb	r3, [r7, #15]
 80019a0:	3301      	adds	r3, #1
 80019a2:	73fb      	strb	r3, [r7, #15]
 80019a4:	7bfb      	ldrb	r3, [r7, #15]
 80019a6:	2b03      	cmp	r3, #3
 80019a8:	d9ef      	bls.n	800198a <SD_disk_initialize+0xd6>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 80019aa:	7a3b      	ldrb	r3, [r7, #8]
 80019ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d001      	beq.n	80019b8 <SD_disk_initialize+0x104>
 80019b4:	230c      	movs	r3, #12
 80019b6:	e000      	b.n	80019ba <SD_disk_initialize+0x106>
 80019b8:	2304      	movs	r3, #4
 80019ba:	73bb      	strb	r3, [r7, #14]
 80019bc:	e03e      	b.n	8001a3c <SD_disk_initialize+0x188>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 80019be:	2100      	movs	r1, #0
 80019c0:	2077      	movs	r0, #119	; 0x77
 80019c2:	f7ff ff22 	bl	800180a <SD_SendCmd>
 80019c6:	4603      	mov	r3, r0
 80019c8:	2b01      	cmp	r3, #1
 80019ca:	d808      	bhi.n	80019de <SD_disk_initialize+0x12a>
 80019cc:	2100      	movs	r1, #0
 80019ce:	2069      	movs	r0, #105	; 0x69
 80019d0:	f7ff ff1b 	bl	800180a <SD_SendCmd>
 80019d4:	4603      	mov	r3, r0
 80019d6:	2b01      	cmp	r3, #1
 80019d8:	d801      	bhi.n	80019de <SD_disk_initialize+0x12a>
 80019da:	2302      	movs	r3, #2
 80019dc:	e000      	b.n	80019e0 <SD_disk_initialize+0x12c>
 80019de:	2301      	movs	r3, #1
 80019e0:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 80019e2:	7bbb      	ldrb	r3, [r7, #14]
 80019e4:	2b02      	cmp	r3, #2
 80019e6:	d10e      	bne.n	8001a06 <SD_disk_initialize+0x152>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 80019e8:	2100      	movs	r1, #0
 80019ea:	2077      	movs	r0, #119	; 0x77
 80019ec:	f7ff ff0d 	bl	800180a <SD_SendCmd>
 80019f0:	4603      	mov	r3, r0
 80019f2:	2b01      	cmp	r3, #1
 80019f4:	d80e      	bhi.n	8001a14 <SD_disk_initialize+0x160>
 80019f6:	2100      	movs	r1, #0
 80019f8:	2069      	movs	r0, #105	; 0x69
 80019fa:	f7ff ff06 	bl	800180a <SD_SendCmd>
 80019fe:	4603      	mov	r3, r0
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d107      	bne.n	8001a14 <SD_disk_initialize+0x160>
 8001a04:	e00c      	b.n	8001a20 <SD_disk_initialize+0x16c>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8001a06:	2100      	movs	r1, #0
 8001a08:	2041      	movs	r0, #65	; 0x41
 8001a0a:	f7ff fefe 	bl	800180a <SD_SendCmd>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d004      	beq.n	8001a1e <SD_disk_initialize+0x16a>
				}

			} while (Timer1);
 8001a14:	4b18      	ldr	r3, [pc, #96]	; (8001a78 <SD_disk_initialize+0x1c4>)
 8001a16:	881b      	ldrh	r3, [r3, #0]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d1e2      	bne.n	80019e2 <SD_disk_initialize+0x12e>
 8001a1c:	e000      	b.n	8001a20 <SD_disk_initialize+0x16c>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8001a1e:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8001a20:	4b15      	ldr	r3, [pc, #84]	; (8001a78 <SD_disk_initialize+0x1c4>)
 8001a22:	881b      	ldrh	r3, [r3, #0]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d007      	beq.n	8001a38 <SD_disk_initialize+0x184>
 8001a28:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001a2c:	2050      	movs	r0, #80	; 0x50
 8001a2e:	f7ff feec 	bl	800180a <SD_SendCmd>
 8001a32:	4603      	mov	r3, r0
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d001      	beq.n	8001a3c <SD_disk_initialize+0x188>
 8001a38:	2300      	movs	r3, #0
 8001a3a:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 8001a3c:	4a0f      	ldr	r2, [pc, #60]	; (8001a7c <SD_disk_initialize+0x1c8>)
 8001a3e:	7bbb      	ldrb	r3, [r7, #14]
 8001a40:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 8001a42:	f7ff fd8f 	bl	8001564 <DESELECT>
	SPI_RxByte();
 8001a46:	f7ff fdd1 	bl	80015ec <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 8001a4a:	7bbb      	ldrb	r3, [r7, #14]
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d008      	beq.n	8001a62 <SD_disk_initialize+0x1ae>
	{
		Stat &= ~STA_NOINIT;
 8001a50:	4b08      	ldr	r3, [pc, #32]	; (8001a74 <SD_disk_initialize+0x1c0>)
 8001a52:	781b      	ldrb	r3, [r3, #0]
 8001a54:	b2db      	uxtb	r3, r3
 8001a56:	f023 0301 	bic.w	r3, r3, #1
 8001a5a:	b2da      	uxtb	r2, r3
 8001a5c:	4b05      	ldr	r3, [pc, #20]	; (8001a74 <SD_disk_initialize+0x1c0>)
 8001a5e:	701a      	strb	r2, [r3, #0]
 8001a60:	e001      	b.n	8001a66 <SD_disk_initialize+0x1b2>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 8001a62:	f7ff fe49 	bl	80016f8 <SD_PowerOff>
	}

	return Stat;
 8001a66:	4b03      	ldr	r3, [pc, #12]	; (8001a74 <SD_disk_initialize+0x1c0>)
 8001a68:	781b      	ldrb	r3, [r3, #0]
 8001a6a:	b2db      	uxtb	r3, r3
}
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	3714      	adds	r7, #20
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd90      	pop	{r4, r7, pc}
 8001a74:	2000000c 	.word	0x2000000c
 8001a78:	20003294 	.word	0x20003294
 8001a7c:	20003298 	.word	0x20003298

08001a80 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
 8001a80:	b480      	push	{r7}
 8001a82:	b083      	sub	sp, #12
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	4603      	mov	r3, r0
 8001a88:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 8001a8a:	79fb      	ldrb	r3, [r7, #7]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d001      	beq.n	8001a94 <SD_disk_status+0x14>
 8001a90:	2301      	movs	r3, #1
 8001a92:	e002      	b.n	8001a9a <SD_disk_status+0x1a>
	return Stat;
 8001a94:	4b04      	ldr	r3, [pc, #16]	; (8001aa8 <SD_disk_status+0x28>)
 8001a96:	781b      	ldrb	r3, [r3, #0]
 8001a98:	b2db      	uxtb	r3, r3
}
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	370c      	adds	r7, #12
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa4:	4770      	bx	lr
 8001aa6:	bf00      	nop
 8001aa8:	2000000c 	.word	0x2000000c

08001aac <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b084      	sub	sp, #16
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	60b9      	str	r1, [r7, #8]
 8001ab4:	607a      	str	r2, [r7, #4]
 8001ab6:	603b      	str	r3, [r7, #0]
 8001ab8:	4603      	mov	r3, r0
 8001aba:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8001abc:	7bfb      	ldrb	r3, [r7, #15]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d102      	bne.n	8001ac8 <SD_disk_read+0x1c>
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d101      	bne.n	8001acc <SD_disk_read+0x20>
 8001ac8:	2304      	movs	r3, #4
 8001aca:	e051      	b.n	8001b70 <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001acc:	4b2a      	ldr	r3, [pc, #168]	; (8001b78 <SD_disk_read+0xcc>)
 8001ace:	781b      	ldrb	r3, [r3, #0]
 8001ad0:	b2db      	uxtb	r3, r3
 8001ad2:	f003 0301 	and.w	r3, r3, #1
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d001      	beq.n	8001ade <SD_disk_read+0x32>
 8001ada:	2303      	movs	r3, #3
 8001adc:	e048      	b.n	8001b70 <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8001ade:	4b27      	ldr	r3, [pc, #156]	; (8001b7c <SD_disk_read+0xd0>)
 8001ae0:	781b      	ldrb	r3, [r3, #0]
 8001ae2:	f003 0304 	and.w	r3, r3, #4
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d102      	bne.n	8001af0 <SD_disk_read+0x44>
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	025b      	lsls	r3, r3, #9
 8001aee:	607b      	str	r3, [r7, #4]

	SELECT();
 8001af0:	f7ff fd28 	bl	8001544 <SELECT>

	if (count == 1)
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	2b01      	cmp	r3, #1
 8001af8:	d111      	bne.n	8001b1e <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8001afa:	6879      	ldr	r1, [r7, #4]
 8001afc:	2051      	movs	r0, #81	; 0x51
 8001afe:	f7ff fe84 	bl	800180a <SD_SendCmd>
 8001b02:	4603      	mov	r3, r0
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d129      	bne.n	8001b5c <SD_disk_read+0xb0>
 8001b08:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001b0c:	68b8      	ldr	r0, [r7, #8]
 8001b0e:	f7ff fe0b 	bl	8001728 <SD_RxDataBlock>
 8001b12:	4603      	mov	r3, r0
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d021      	beq.n	8001b5c <SD_disk_read+0xb0>
 8001b18:	2300      	movs	r3, #0
 8001b1a:	603b      	str	r3, [r7, #0]
 8001b1c:	e01e      	b.n	8001b5c <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 8001b1e:	6879      	ldr	r1, [r7, #4]
 8001b20:	2052      	movs	r0, #82	; 0x52
 8001b22:	f7ff fe72 	bl	800180a <SD_SendCmd>
 8001b26:	4603      	mov	r3, r0
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d117      	bne.n	8001b5c <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 8001b2c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001b30:	68b8      	ldr	r0, [r7, #8]
 8001b32:	f7ff fdf9 	bl	8001728 <SD_RxDataBlock>
 8001b36:	4603      	mov	r3, r0
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d00a      	beq.n	8001b52 <SD_disk_read+0xa6>
				buff += 512;
 8001b3c:	68bb      	ldr	r3, [r7, #8]
 8001b3e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001b42:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	3b01      	subs	r3, #1
 8001b48:	603b      	str	r3, [r7, #0]
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d1ed      	bne.n	8001b2c <SD_disk_read+0x80>
 8001b50:	e000      	b.n	8001b54 <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 8001b52:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 8001b54:	2100      	movs	r1, #0
 8001b56:	204c      	movs	r0, #76	; 0x4c
 8001b58:	f7ff fe57 	bl	800180a <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 8001b5c:	f7ff fd02 	bl	8001564 <DESELECT>
	SPI_RxByte();
 8001b60:	f7ff fd44 	bl	80015ec <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	bf14      	ite	ne
 8001b6a:	2301      	movne	r3, #1
 8001b6c:	2300      	moveq	r3, #0
 8001b6e:	b2db      	uxtb	r3, r3
}
 8001b70:	4618      	mov	r0, r3
 8001b72:	3710      	adds	r7, #16
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}
 8001b78:	2000000c 	.word	0x2000000c
 8001b7c:	20003298 	.word	0x20003298

08001b80 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b084      	sub	sp, #16
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	60b9      	str	r1, [r7, #8]
 8001b88:	607a      	str	r2, [r7, #4]
 8001b8a:	603b      	str	r3, [r7, #0]
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8001b90:	7bfb      	ldrb	r3, [r7, #15]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d102      	bne.n	8001b9c <SD_disk_write+0x1c>
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d101      	bne.n	8001ba0 <SD_disk_write+0x20>
 8001b9c:	2304      	movs	r3, #4
 8001b9e:	e06b      	b.n	8001c78 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001ba0:	4b37      	ldr	r3, [pc, #220]	; (8001c80 <SD_disk_write+0x100>)
 8001ba2:	781b      	ldrb	r3, [r3, #0]
 8001ba4:	b2db      	uxtb	r3, r3
 8001ba6:	f003 0301 	and.w	r3, r3, #1
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d001      	beq.n	8001bb2 <SD_disk_write+0x32>
 8001bae:	2303      	movs	r3, #3
 8001bb0:	e062      	b.n	8001c78 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 8001bb2:	4b33      	ldr	r3, [pc, #204]	; (8001c80 <SD_disk_write+0x100>)
 8001bb4:	781b      	ldrb	r3, [r3, #0]
 8001bb6:	b2db      	uxtb	r3, r3
 8001bb8:	f003 0304 	and.w	r3, r3, #4
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d001      	beq.n	8001bc4 <SD_disk_write+0x44>
 8001bc0:	2302      	movs	r3, #2
 8001bc2:	e059      	b.n	8001c78 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8001bc4:	4b2f      	ldr	r3, [pc, #188]	; (8001c84 <SD_disk_write+0x104>)
 8001bc6:	781b      	ldrb	r3, [r3, #0]
 8001bc8:	f003 0304 	and.w	r3, r3, #4
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d102      	bne.n	8001bd6 <SD_disk_write+0x56>
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	025b      	lsls	r3, r3, #9
 8001bd4:	607b      	str	r3, [r7, #4]

	SELECT();
 8001bd6:	f7ff fcb5 	bl	8001544 <SELECT>

	if (count == 1)
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	2b01      	cmp	r3, #1
 8001bde:	d110      	bne.n	8001c02 <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8001be0:	6879      	ldr	r1, [r7, #4]
 8001be2:	2058      	movs	r0, #88	; 0x58
 8001be4:	f7ff fe11 	bl	800180a <SD_SendCmd>
 8001be8:	4603      	mov	r3, r0
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d13a      	bne.n	8001c64 <SD_disk_write+0xe4>
 8001bee:	21fe      	movs	r1, #254	; 0xfe
 8001bf0:	68b8      	ldr	r0, [r7, #8]
 8001bf2:	f7ff fdc7 	bl	8001784 <SD_TxDataBlock>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d033      	beq.n	8001c64 <SD_disk_write+0xe4>
			count = 0;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	603b      	str	r3, [r7, #0]
 8001c00:	e030      	b.n	8001c64 <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 8001c02:	4b20      	ldr	r3, [pc, #128]	; (8001c84 <SD_disk_write+0x104>)
 8001c04:	781b      	ldrb	r3, [r3, #0]
 8001c06:	f003 0302 	and.w	r3, r3, #2
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d007      	beq.n	8001c1e <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 8001c0e:	2100      	movs	r1, #0
 8001c10:	2077      	movs	r0, #119	; 0x77
 8001c12:	f7ff fdfa 	bl	800180a <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 8001c16:	6839      	ldr	r1, [r7, #0]
 8001c18:	2057      	movs	r0, #87	; 0x57
 8001c1a:	f7ff fdf6 	bl	800180a <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 8001c1e:	6879      	ldr	r1, [r7, #4]
 8001c20:	2059      	movs	r0, #89	; 0x59
 8001c22:	f7ff fdf2 	bl	800180a <SD_SendCmd>
 8001c26:	4603      	mov	r3, r0
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d11b      	bne.n	8001c64 <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8001c2c:	21fc      	movs	r1, #252	; 0xfc
 8001c2e:	68b8      	ldr	r0, [r7, #8]
 8001c30:	f7ff fda8 	bl	8001784 <SD_TxDataBlock>
 8001c34:	4603      	mov	r3, r0
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d00a      	beq.n	8001c50 <SD_disk_write+0xd0>
				buff += 512;
 8001c3a:	68bb      	ldr	r3, [r7, #8]
 8001c3c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001c40:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	3b01      	subs	r3, #1
 8001c46:	603b      	str	r3, [r7, #0]
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d1ee      	bne.n	8001c2c <SD_disk_write+0xac>
 8001c4e:	e000      	b.n	8001c52 <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8001c50:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 8001c52:	21fd      	movs	r1, #253	; 0xfd
 8001c54:	2000      	movs	r0, #0
 8001c56:	f7ff fd95 	bl	8001784 <SD_TxDataBlock>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d101      	bne.n	8001c64 <SD_disk_write+0xe4>
			{
				count = 1;
 8001c60:	2301      	movs	r3, #1
 8001c62:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 8001c64:	f7ff fc7e 	bl	8001564 <DESELECT>
	SPI_RxByte();
 8001c68:	f7ff fcc0 	bl	80015ec <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	bf14      	ite	ne
 8001c72:	2301      	movne	r3, #1
 8001c74:	2300      	moveq	r3, #0
 8001c76:	b2db      	uxtb	r3, r3
}
 8001c78:	4618      	mov	r0, r3
 8001c7a:	3710      	adds	r7, #16
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bd80      	pop	{r7, pc}
 8001c80:	2000000c 	.word	0x2000000c
 8001c84:	20003298 	.word	0x20003298

08001c88 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 8001c88:	b590      	push	{r4, r7, lr}
 8001c8a:	b08b      	sub	sp, #44	; 0x2c
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	4603      	mov	r3, r0
 8001c90:	603a      	str	r2, [r7, #0]
 8001c92:	71fb      	strb	r3, [r7, #7]
 8001c94:	460b      	mov	r3, r1
 8001c96:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 8001c9c:	79fb      	ldrb	r3, [r7, #7]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d001      	beq.n	8001ca6 <SD_disk_ioctl+0x1e>
 8001ca2:	2304      	movs	r3, #4
 8001ca4:	e115      	b.n	8001ed2 <SD_disk_ioctl+0x24a>
	res = RES_ERROR;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER)
 8001cac:	79bb      	ldrb	r3, [r7, #6]
 8001cae:	2b05      	cmp	r3, #5
 8001cb0:	d124      	bne.n	8001cfc <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 8001cb2:	6a3b      	ldr	r3, [r7, #32]
 8001cb4:	781b      	ldrb	r3, [r3, #0]
 8001cb6:	2b02      	cmp	r3, #2
 8001cb8:	d012      	beq.n	8001ce0 <SD_disk_ioctl+0x58>
 8001cba:	2b02      	cmp	r3, #2
 8001cbc:	dc1a      	bgt.n	8001cf4 <SD_disk_ioctl+0x6c>
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d002      	beq.n	8001cc8 <SD_disk_ioctl+0x40>
 8001cc2:	2b01      	cmp	r3, #1
 8001cc4:	d006      	beq.n	8001cd4 <SD_disk_ioctl+0x4c>
 8001cc6:	e015      	b.n	8001cf4 <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 8001cc8:	f7ff fd16 	bl	80016f8 <SD_PowerOff>
			res = RES_OK;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001cd2:	e0fc      	b.n	8001ece <SD_disk_ioctl+0x246>
		case 1:
			SD_PowerOn();		/* Power On */
 8001cd4:	f7ff fcce 	bl	8001674 <SD_PowerOn>
			res = RES_OK;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001cde:	e0f6      	b.n	8001ece <SD_disk_ioctl+0x246>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 8001ce0:	6a3b      	ldr	r3, [r7, #32]
 8001ce2:	1c5c      	adds	r4, r3, #1
 8001ce4:	f7ff fd14 	bl	8001710 <SD_CheckPower>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 8001cec:	2300      	movs	r3, #0
 8001cee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001cf2:	e0ec      	b.n	8001ece <SD_disk_ioctl+0x246>
		default:
			res = RES_PARERR;
 8001cf4:	2304      	movs	r3, #4
 8001cf6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001cfa:	e0e8      	b.n	8001ece <SD_disk_ioctl+0x246>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001cfc:	4b77      	ldr	r3, [pc, #476]	; (8001edc <SD_disk_ioctl+0x254>)
 8001cfe:	781b      	ldrb	r3, [r3, #0]
 8001d00:	b2db      	uxtb	r3, r3
 8001d02:	f003 0301 	and.w	r3, r3, #1
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d001      	beq.n	8001d0e <SD_disk_ioctl+0x86>
 8001d0a:	2303      	movs	r3, #3
 8001d0c:	e0e1      	b.n	8001ed2 <SD_disk_ioctl+0x24a>

		SELECT();
 8001d0e:	f7ff fc19 	bl	8001544 <SELECT>

		switch (ctrl)
 8001d12:	79bb      	ldrb	r3, [r7, #6]
 8001d14:	2b0d      	cmp	r3, #13
 8001d16:	f200 80cb 	bhi.w	8001eb0 <SD_disk_ioctl+0x228>
 8001d1a:	a201      	add	r2, pc, #4	; (adr r2, 8001d20 <SD_disk_ioctl+0x98>)
 8001d1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d20:	08001e1b 	.word	0x08001e1b
 8001d24:	08001d59 	.word	0x08001d59
 8001d28:	08001e0b 	.word	0x08001e0b
 8001d2c:	08001eb1 	.word	0x08001eb1
 8001d30:	08001eb1 	.word	0x08001eb1
 8001d34:	08001eb1 	.word	0x08001eb1
 8001d38:	08001eb1 	.word	0x08001eb1
 8001d3c:	08001eb1 	.word	0x08001eb1
 8001d40:	08001eb1 	.word	0x08001eb1
 8001d44:	08001eb1 	.word	0x08001eb1
 8001d48:	08001eb1 	.word	0x08001eb1
 8001d4c:	08001e2d 	.word	0x08001e2d
 8001d50:	08001e51 	.word	0x08001e51
 8001d54:	08001e75 	.word	0x08001e75
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8001d58:	2100      	movs	r1, #0
 8001d5a:	2049      	movs	r0, #73	; 0x49
 8001d5c:	f7ff fd55 	bl	800180a <SD_SendCmd>
 8001d60:	4603      	mov	r3, r0
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	f040 80a8 	bne.w	8001eb8 <SD_disk_ioctl+0x230>
 8001d68:	f107 030c 	add.w	r3, r7, #12
 8001d6c:	2110      	movs	r1, #16
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f7ff fcda 	bl	8001728 <SD_RxDataBlock>
 8001d74:	4603      	mov	r3, r0
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	f000 809e 	beq.w	8001eb8 <SD_disk_ioctl+0x230>
			{
				if ((csd[0] >> 6) == 1)
 8001d7c:	7b3b      	ldrb	r3, [r7, #12]
 8001d7e:	099b      	lsrs	r3, r3, #6
 8001d80:	b2db      	uxtb	r3, r3
 8001d82:	2b01      	cmp	r3, #1
 8001d84:	d10e      	bne.n	8001da4 <SD_disk_ioctl+0x11c>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8001d86:	7d7b      	ldrb	r3, [r7, #21]
 8001d88:	b29a      	uxth	r2, r3
 8001d8a:	7d3b      	ldrb	r3, [r7, #20]
 8001d8c:	b29b      	uxth	r3, r3
 8001d8e:	021b      	lsls	r3, r3, #8
 8001d90:	b29b      	uxth	r3, r3
 8001d92:	4413      	add	r3, r2
 8001d94:	b29b      	uxth	r3, r3
 8001d96:	3301      	adds	r3, #1
 8001d98:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 8001d9a:	8bfb      	ldrh	r3, [r7, #30]
 8001d9c:	029a      	lsls	r2, r3, #10
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	601a      	str	r2, [r3, #0]
 8001da2:	e02e      	b.n	8001e02 <SD_disk_ioctl+0x17a>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8001da4:	7c7b      	ldrb	r3, [r7, #17]
 8001da6:	f003 030f 	and.w	r3, r3, #15
 8001daa:	b2da      	uxtb	r2, r3
 8001dac:	7dbb      	ldrb	r3, [r7, #22]
 8001dae:	09db      	lsrs	r3, r3, #7
 8001db0:	b2db      	uxtb	r3, r3
 8001db2:	4413      	add	r3, r2
 8001db4:	b2da      	uxtb	r2, r3
 8001db6:	7d7b      	ldrb	r3, [r7, #21]
 8001db8:	005b      	lsls	r3, r3, #1
 8001dba:	b2db      	uxtb	r3, r3
 8001dbc:	f003 0306 	and.w	r3, r3, #6
 8001dc0:	b2db      	uxtb	r3, r3
 8001dc2:	4413      	add	r3, r2
 8001dc4:	b2db      	uxtb	r3, r3
 8001dc6:	3302      	adds	r3, #2
 8001dc8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8001dcc:	7d3b      	ldrb	r3, [r7, #20]
 8001dce:	099b      	lsrs	r3, r3, #6
 8001dd0:	b2db      	uxtb	r3, r3
 8001dd2:	b29a      	uxth	r2, r3
 8001dd4:	7cfb      	ldrb	r3, [r7, #19]
 8001dd6:	b29b      	uxth	r3, r3
 8001dd8:	009b      	lsls	r3, r3, #2
 8001dda:	b29b      	uxth	r3, r3
 8001ddc:	4413      	add	r3, r2
 8001dde:	b29a      	uxth	r2, r3
 8001de0:	7cbb      	ldrb	r3, [r7, #18]
 8001de2:	029b      	lsls	r3, r3, #10
 8001de4:	b29b      	uxth	r3, r3
 8001de6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001dea:	b29b      	uxth	r3, r3
 8001dec:	4413      	add	r3, r2
 8001dee:	b29b      	uxth	r3, r3
 8001df0:	3301      	adds	r3, #1
 8001df2:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 8001df4:	8bfa      	ldrh	r2, [r7, #30]
 8001df6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001dfa:	3b09      	subs	r3, #9
 8001dfc:	409a      	lsls	r2, r3
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 8001e02:	2300      	movs	r3, #0
 8001e04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 8001e08:	e056      	b.n	8001eb8 <SD_disk_ioctl+0x230>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e10:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 8001e12:	2300      	movs	r3, #0
 8001e14:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001e18:	e055      	b.n	8001ec6 <SD_disk_ioctl+0x23e>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8001e1a:	f7ff fc11 	bl	8001640 <SD_ReadyWait>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	2bff      	cmp	r3, #255	; 0xff
 8001e22:	d14b      	bne.n	8001ebc <SD_disk_ioctl+0x234>
 8001e24:	2300      	movs	r3, #0
 8001e26:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001e2a:	e047      	b.n	8001ebc <SD_disk_ioctl+0x234>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8001e2c:	2100      	movs	r1, #0
 8001e2e:	2049      	movs	r0, #73	; 0x49
 8001e30:	f7ff fceb 	bl	800180a <SD_SendCmd>
 8001e34:	4603      	mov	r3, r0
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d142      	bne.n	8001ec0 <SD_disk_ioctl+0x238>
 8001e3a:	2110      	movs	r1, #16
 8001e3c:	6a38      	ldr	r0, [r7, #32]
 8001e3e:	f7ff fc73 	bl	8001728 <SD_RxDataBlock>
 8001e42:	4603      	mov	r3, r0
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d03b      	beq.n	8001ec0 <SD_disk_ioctl+0x238>
 8001e48:	2300      	movs	r3, #0
 8001e4a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001e4e:	e037      	b.n	8001ec0 <SD_disk_ioctl+0x238>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8001e50:	2100      	movs	r1, #0
 8001e52:	204a      	movs	r0, #74	; 0x4a
 8001e54:	f7ff fcd9 	bl	800180a <SD_SendCmd>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d132      	bne.n	8001ec4 <SD_disk_ioctl+0x23c>
 8001e5e:	2110      	movs	r1, #16
 8001e60:	6a38      	ldr	r0, [r7, #32]
 8001e62:	f7ff fc61 	bl	8001728 <SD_RxDataBlock>
 8001e66:	4603      	mov	r3, r0
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d02b      	beq.n	8001ec4 <SD_disk_ioctl+0x23c>
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001e72:	e027      	b.n	8001ec4 <SD_disk_ioctl+0x23c>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 8001e74:	2100      	movs	r1, #0
 8001e76:	207a      	movs	r0, #122	; 0x7a
 8001e78:	f7ff fcc7 	bl	800180a <SD_SendCmd>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d116      	bne.n	8001eb0 <SD_disk_ioctl+0x228>
			{
				for (n = 0; n < 4; n++)
 8001e82:	2300      	movs	r3, #0
 8001e84:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001e88:	e00b      	b.n	8001ea2 <SD_disk_ioctl+0x21a>
				{
					*ptr++ = SPI_RxByte();
 8001e8a:	6a3c      	ldr	r4, [r7, #32]
 8001e8c:	1c63      	adds	r3, r4, #1
 8001e8e:	623b      	str	r3, [r7, #32]
 8001e90:	f7ff fbac 	bl	80015ec <SPI_RxByte>
 8001e94:	4603      	mov	r3, r0
 8001e96:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8001e98:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001e9c:	3301      	adds	r3, #1
 8001e9e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001ea2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001ea6:	2b03      	cmp	r3, #3
 8001ea8:	d9ef      	bls.n	8001e8a <SD_disk_ioctl+0x202>
				}
				res = RES_OK;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
		default:
			res = RES_PARERR;
 8001eb0:	2304      	movs	r3, #4
 8001eb2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001eb6:	e006      	b.n	8001ec6 <SD_disk_ioctl+0x23e>
			break;
 8001eb8:	bf00      	nop
 8001eba:	e004      	b.n	8001ec6 <SD_disk_ioctl+0x23e>
			break;
 8001ebc:	bf00      	nop
 8001ebe:	e002      	b.n	8001ec6 <SD_disk_ioctl+0x23e>
			break;
 8001ec0:	bf00      	nop
 8001ec2:	e000      	b.n	8001ec6 <SD_disk_ioctl+0x23e>
			break;
 8001ec4:	bf00      	nop
		}

		DESELECT();
 8001ec6:	f7ff fb4d 	bl	8001564 <DESELECT>
		SPI_RxByte();
 8001eca:	f7ff fb8f 	bl	80015ec <SPI_RxByte>
	}

	return res;
 8001ece:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	372c      	adds	r7, #44	; 0x2c
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd90      	pop	{r4, r7, pc}
 8001eda:	bf00      	nop
 8001edc:	2000000c 	.word	0x2000000c

08001ee0 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b088      	sub	sp, #32
 8001ee4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ee6:	f107 030c 	add.w	r3, r7, #12
 8001eea:	2200      	movs	r2, #0
 8001eec:	601a      	str	r2, [r3, #0]
 8001eee:	605a      	str	r2, [r3, #4]
 8001ef0:	609a      	str	r2, [r3, #8]
 8001ef2:	60da      	str	r2, [r3, #12]
 8001ef4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	60bb      	str	r3, [r7, #8]
 8001efa:	4b2d      	ldr	r3, [pc, #180]	; (8001fb0 <MX_GPIO_Init+0xd0>)
 8001efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001efe:	4a2c      	ldr	r2, [pc, #176]	; (8001fb0 <MX_GPIO_Init+0xd0>)
 8001f00:	f043 0301 	orr.w	r3, r3, #1
 8001f04:	6313      	str	r3, [r2, #48]	; 0x30
 8001f06:	4b2a      	ldr	r3, [pc, #168]	; (8001fb0 <MX_GPIO_Init+0xd0>)
 8001f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f0a:	f003 0301 	and.w	r3, r3, #1
 8001f0e:	60bb      	str	r3, [r7, #8]
 8001f10:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f12:	2300      	movs	r3, #0
 8001f14:	607b      	str	r3, [r7, #4]
 8001f16:	4b26      	ldr	r3, [pc, #152]	; (8001fb0 <MX_GPIO_Init+0xd0>)
 8001f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f1a:	4a25      	ldr	r2, [pc, #148]	; (8001fb0 <MX_GPIO_Init+0xd0>)
 8001f1c:	f043 0302 	orr.w	r3, r3, #2
 8001f20:	6313      	str	r3, [r2, #48]	; 0x30
 8001f22:	4b23      	ldr	r3, [pc, #140]	; (8001fb0 <MX_GPIO_Init+0xd0>)
 8001f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f26:	f003 0302 	and.w	r3, r3, #2
 8001f2a:	607b      	str	r3, [r7, #4]
 8001f2c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_BL_Pin|LCD_DC_Pin|LCD_RST_Pin, GPIO_PIN_RESET);
 8001f2e:	2200      	movs	r2, #0
 8001f30:	f44f 7144 	mov.w	r1, #784	; 0x310
 8001f34:	481f      	ldr	r0, [pc, #124]	; (8001fb4 <MX_GPIO_Init+0xd4>)
 8001f36:	f002 fc57 	bl	80047e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SD_CS_Pin|LCD_CS_Pin, GPIO_PIN_RESET);
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	2144      	movs	r1, #68	; 0x44
 8001f3e:	481e      	ldr	r0, [pc, #120]	; (8001fb8 <MX_GPIO_Init+0xd8>)
 8001f40:	f002 fc52 	bl	80047e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LCD_BL_Pin|LCD_DC_Pin|LCD_RST_Pin;
 8001f44:	f44f 7344 	mov.w	r3, #784	; 0x310
 8001f48:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f52:	2300      	movs	r3, #0
 8001f54:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f56:	f107 030c 	add.w	r3, r7, #12
 8001f5a:	4619      	mov	r1, r3
 8001f5c:	4815      	ldr	r0, [pc, #84]	; (8001fb4 <MX_GPIO_Init+0xd4>)
 8001f5e:	f002 faa7 	bl	80044b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = SD_CS_Pin|LCD_CS_Pin;
 8001f62:	2344      	movs	r3, #68	; 0x44
 8001f64:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f66:	2301      	movs	r3, #1
 8001f68:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f72:	f107 030c 	add.w	r3, r7, #12
 8001f76:	4619      	mov	r1, r3
 8001f78:	480f      	ldr	r0, [pc, #60]	; (8001fb8 <MX_GPIO_Init+0xd8>)
 8001f7a:	f002 fa99 	bl	80044b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SW_Pin;
 8001f7e:	2308      	movs	r3, #8
 8001f80:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001f82:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001f86:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SW_GPIO_Port, &GPIO_InitStruct);
 8001f8c:	f107 030c 	add.w	r3, r7, #12
 8001f90:	4619      	mov	r1, r3
 8001f92:	4809      	ldr	r0, [pc, #36]	; (8001fb8 <MX_GPIO_Init+0xd8>)
 8001f94:	f002 fa8c 	bl	80044b0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8001f98:	2200      	movs	r2, #0
 8001f9a:	2100      	movs	r1, #0
 8001f9c:	2009      	movs	r0, #9
 8001f9e:	f001 fee0 	bl	8003d62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001fa2:	2009      	movs	r0, #9
 8001fa4:	f001 fef9 	bl	8003d9a <HAL_NVIC_EnableIRQ>

}
 8001fa8:	bf00      	nop
 8001faa:	3720      	adds	r7, #32
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd80      	pop	{r7, pc}
 8001fb0:	40023800 	.word	0x40023800
 8001fb4:	40020000 	.word	0x40020000
 8001fb8:	40020400 	.word	0x40020400

08001fbc <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001fc0:	f3bf 8f4f 	dsb	sy
}
 8001fc4:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001fc6:	4b06      	ldr	r3, [pc, #24]	; (8001fe0 <__NVIC_SystemReset+0x24>)
 8001fc8:	68db      	ldr	r3, [r3, #12]
 8001fca:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001fce:	4904      	ldr	r1, [pc, #16]	; (8001fe0 <__NVIC_SystemReset+0x24>)
 8001fd0:	4b04      	ldr	r3, [pc, #16]	; (8001fe4 <__NVIC_SystemReset+0x28>)
 8001fd2:	4313      	orrs	r3, r2
 8001fd4:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8001fd6:	f3bf 8f4f 	dsb	sy
}
 8001fda:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001fdc:	bf00      	nop
 8001fde:	e7fd      	b.n	8001fdc <__NVIC_SystemReset+0x20>
 8001fe0:	e000ed00 	.word	0xe000ed00
 8001fe4:	05fa0004 	.word	0x05fa0004

08001fe8 <conversion>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void conversion(uint16_t range){
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b084      	sub	sp, #16
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	4603      	mov	r3, r0
 8001ff0:	80fb      	strh	r3, [r7, #6]
	for(int16_t i=range;i<range+500;i++){
 8001ff2:	88fb      	ldrh	r3, [r7, #6]
 8001ff4:	81fb      	strh	r3, [r7, #14]
 8001ff6:	e0e8      	b.n	80021ca <conversion+0x1e2>
		sprintf(tempconv,"%d",dma_buf[i]);
 8001ff8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001ffc:	4a79      	ldr	r2, [pc, #484]	; (80021e4 <conversion+0x1fc>)
 8001ffe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002002:	461a      	mov	r2, r3
 8002004:	4978      	ldr	r1, [pc, #480]	; (80021e8 <conversion+0x200>)
 8002006:	4879      	ldr	r0, [pc, #484]	; (80021ec <conversion+0x204>)
 8002008:	f008 fe24 	bl	800ac54 <siprintf>
		if(dma_buf[i]>999){
 800200c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002010:	4a74      	ldr	r2, [pc, #464]	; (80021e4 <conversion+0x1fc>)
 8002012:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002016:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800201a:	d333      	bcc.n	8002084 <conversion+0x9c>
			SD.buffer[4*i]=tempconv[0];
 800201c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002020:	009b      	lsls	r3, r3, #2
 8002022:	4a72      	ldr	r2, [pc, #456]	; (80021ec <conversion+0x204>)
 8002024:	7811      	ldrb	r1, [r2, #0]
 8002026:	4a72      	ldr	r2, [pc, #456]	; (80021f0 <conversion+0x208>)
 8002028:	4413      	add	r3, r2
 800202a:	f503 5301 	add.w	r3, r3, #8256	; 0x2040
 800202e:	3329      	adds	r3, #41	; 0x29
 8002030:	460a      	mov	r2, r1
 8002032:	701a      	strb	r2, [r3, #0]
			SD.buffer[4*i+1]=tempconv[1];
 8002034:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002038:	009b      	lsls	r3, r3, #2
 800203a:	3301      	adds	r3, #1
 800203c:	4a6b      	ldr	r2, [pc, #428]	; (80021ec <conversion+0x204>)
 800203e:	7851      	ldrb	r1, [r2, #1]
 8002040:	4a6b      	ldr	r2, [pc, #428]	; (80021f0 <conversion+0x208>)
 8002042:	4413      	add	r3, r2
 8002044:	f503 5301 	add.w	r3, r3, #8256	; 0x2040
 8002048:	3329      	adds	r3, #41	; 0x29
 800204a:	460a      	mov	r2, r1
 800204c:	701a      	strb	r2, [r3, #0]
			SD.buffer[4*i+2]=tempconv[2];
 800204e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002052:	009b      	lsls	r3, r3, #2
 8002054:	3302      	adds	r3, #2
 8002056:	4a65      	ldr	r2, [pc, #404]	; (80021ec <conversion+0x204>)
 8002058:	7891      	ldrb	r1, [r2, #2]
 800205a:	4a65      	ldr	r2, [pc, #404]	; (80021f0 <conversion+0x208>)
 800205c:	4413      	add	r3, r2
 800205e:	f503 5301 	add.w	r3, r3, #8256	; 0x2040
 8002062:	3329      	adds	r3, #41	; 0x29
 8002064:	460a      	mov	r2, r1
 8002066:	701a      	strb	r2, [r3, #0]
			SD.buffer[4*i+3]=tempconv[3];
 8002068:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800206c:	009b      	lsls	r3, r3, #2
 800206e:	3303      	adds	r3, #3
 8002070:	4a5e      	ldr	r2, [pc, #376]	; (80021ec <conversion+0x204>)
 8002072:	78d1      	ldrb	r1, [r2, #3]
 8002074:	4a5e      	ldr	r2, [pc, #376]	; (80021f0 <conversion+0x208>)
 8002076:	4413      	add	r3, r2
 8002078:	f503 5301 	add.w	r3, r3, #8256	; 0x2040
 800207c:	3329      	adds	r3, #41	; 0x29
 800207e:	460a      	mov	r2, r1
 8002080:	701a      	strb	r2, [r3, #0]
 8002082:	e09c      	b.n	80021be <conversion+0x1d6>
		}
		else if(dma_buf[i]>99){
 8002084:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002088:	4a56      	ldr	r2, [pc, #344]	; (80021e4 <conversion+0x1fc>)
 800208a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800208e:	2b63      	cmp	r3, #99	; 0x63
 8002090:	d931      	bls.n	80020f6 <conversion+0x10e>
			SD.buffer[4*i]='0';
 8002092:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002096:	009b      	lsls	r3, r3, #2
 8002098:	4a55      	ldr	r2, [pc, #340]	; (80021f0 <conversion+0x208>)
 800209a:	4413      	add	r3, r2
 800209c:	f503 5301 	add.w	r3, r3, #8256	; 0x2040
 80020a0:	3329      	adds	r3, #41	; 0x29
 80020a2:	2230      	movs	r2, #48	; 0x30
 80020a4:	701a      	strb	r2, [r3, #0]
			SD.buffer[4*i+1]=tempconv[0];
 80020a6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80020aa:	009b      	lsls	r3, r3, #2
 80020ac:	3301      	adds	r3, #1
 80020ae:	4a4f      	ldr	r2, [pc, #316]	; (80021ec <conversion+0x204>)
 80020b0:	7811      	ldrb	r1, [r2, #0]
 80020b2:	4a4f      	ldr	r2, [pc, #316]	; (80021f0 <conversion+0x208>)
 80020b4:	4413      	add	r3, r2
 80020b6:	f503 5301 	add.w	r3, r3, #8256	; 0x2040
 80020ba:	3329      	adds	r3, #41	; 0x29
 80020bc:	460a      	mov	r2, r1
 80020be:	701a      	strb	r2, [r3, #0]
			SD.buffer[4*i+2]=tempconv[1];
 80020c0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80020c4:	009b      	lsls	r3, r3, #2
 80020c6:	3302      	adds	r3, #2
 80020c8:	4a48      	ldr	r2, [pc, #288]	; (80021ec <conversion+0x204>)
 80020ca:	7851      	ldrb	r1, [r2, #1]
 80020cc:	4a48      	ldr	r2, [pc, #288]	; (80021f0 <conversion+0x208>)
 80020ce:	4413      	add	r3, r2
 80020d0:	f503 5301 	add.w	r3, r3, #8256	; 0x2040
 80020d4:	3329      	adds	r3, #41	; 0x29
 80020d6:	460a      	mov	r2, r1
 80020d8:	701a      	strb	r2, [r3, #0]
			SD.buffer[4*i+3]=tempconv[2];
 80020da:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80020de:	009b      	lsls	r3, r3, #2
 80020e0:	3303      	adds	r3, #3
 80020e2:	4a42      	ldr	r2, [pc, #264]	; (80021ec <conversion+0x204>)
 80020e4:	7891      	ldrb	r1, [r2, #2]
 80020e6:	4a42      	ldr	r2, [pc, #264]	; (80021f0 <conversion+0x208>)
 80020e8:	4413      	add	r3, r2
 80020ea:	f503 5301 	add.w	r3, r3, #8256	; 0x2040
 80020ee:	3329      	adds	r3, #41	; 0x29
 80020f0:	460a      	mov	r2, r1
 80020f2:	701a      	strb	r2, [r3, #0]
 80020f4:	e063      	b.n	80021be <conversion+0x1d6>
		}
		else if(dma_buf[i]>99){
 80020f6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80020fa:	4a3a      	ldr	r2, [pc, #232]	; (80021e4 <conversion+0x1fc>)
 80020fc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002100:	2b63      	cmp	r3, #99	; 0x63
 8002102:	d92f      	bls.n	8002164 <conversion+0x17c>
			SD.buffer[4*i]='0';
 8002104:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002108:	009b      	lsls	r3, r3, #2
 800210a:	4a39      	ldr	r2, [pc, #228]	; (80021f0 <conversion+0x208>)
 800210c:	4413      	add	r3, r2
 800210e:	f503 5301 	add.w	r3, r3, #8256	; 0x2040
 8002112:	3329      	adds	r3, #41	; 0x29
 8002114:	2230      	movs	r2, #48	; 0x30
 8002116:	701a      	strb	r2, [r3, #0]
			SD.buffer[4*i+1]='0';
 8002118:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800211c:	009b      	lsls	r3, r3, #2
 800211e:	3301      	adds	r3, #1
 8002120:	4a33      	ldr	r2, [pc, #204]	; (80021f0 <conversion+0x208>)
 8002122:	4413      	add	r3, r2
 8002124:	f503 5301 	add.w	r3, r3, #8256	; 0x2040
 8002128:	3329      	adds	r3, #41	; 0x29
 800212a:	2230      	movs	r2, #48	; 0x30
 800212c:	701a      	strb	r2, [r3, #0]
			SD.buffer[4*i+2]=tempconv[0];
 800212e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002132:	009b      	lsls	r3, r3, #2
 8002134:	3302      	adds	r3, #2
 8002136:	4a2d      	ldr	r2, [pc, #180]	; (80021ec <conversion+0x204>)
 8002138:	7811      	ldrb	r1, [r2, #0]
 800213a:	4a2d      	ldr	r2, [pc, #180]	; (80021f0 <conversion+0x208>)
 800213c:	4413      	add	r3, r2
 800213e:	f503 5301 	add.w	r3, r3, #8256	; 0x2040
 8002142:	3329      	adds	r3, #41	; 0x29
 8002144:	460a      	mov	r2, r1
 8002146:	701a      	strb	r2, [r3, #0]
			SD.buffer[4*i+3]=tempconv[1];
 8002148:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800214c:	009b      	lsls	r3, r3, #2
 800214e:	3303      	adds	r3, #3
 8002150:	4a26      	ldr	r2, [pc, #152]	; (80021ec <conversion+0x204>)
 8002152:	7851      	ldrb	r1, [r2, #1]
 8002154:	4a26      	ldr	r2, [pc, #152]	; (80021f0 <conversion+0x208>)
 8002156:	4413      	add	r3, r2
 8002158:	f503 5301 	add.w	r3, r3, #8256	; 0x2040
 800215c:	3329      	adds	r3, #41	; 0x29
 800215e:	460a      	mov	r2, r1
 8002160:	701a      	strb	r2, [r3, #0]
 8002162:	e02c      	b.n	80021be <conversion+0x1d6>
		}
		else{
			SD.buffer[4*i]='0';
 8002164:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002168:	009b      	lsls	r3, r3, #2
 800216a:	4a21      	ldr	r2, [pc, #132]	; (80021f0 <conversion+0x208>)
 800216c:	4413      	add	r3, r2
 800216e:	f503 5301 	add.w	r3, r3, #8256	; 0x2040
 8002172:	3329      	adds	r3, #41	; 0x29
 8002174:	2230      	movs	r2, #48	; 0x30
 8002176:	701a      	strb	r2, [r3, #0]
			SD.buffer[4*i+1]='0';
 8002178:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800217c:	009b      	lsls	r3, r3, #2
 800217e:	3301      	adds	r3, #1
 8002180:	4a1b      	ldr	r2, [pc, #108]	; (80021f0 <conversion+0x208>)
 8002182:	4413      	add	r3, r2
 8002184:	f503 5301 	add.w	r3, r3, #8256	; 0x2040
 8002188:	3329      	adds	r3, #41	; 0x29
 800218a:	2230      	movs	r2, #48	; 0x30
 800218c:	701a      	strb	r2, [r3, #0]
			SD.buffer[4*i+2]='0';
 800218e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002192:	009b      	lsls	r3, r3, #2
 8002194:	3302      	adds	r3, #2
 8002196:	4a16      	ldr	r2, [pc, #88]	; (80021f0 <conversion+0x208>)
 8002198:	4413      	add	r3, r2
 800219a:	f503 5301 	add.w	r3, r3, #8256	; 0x2040
 800219e:	3329      	adds	r3, #41	; 0x29
 80021a0:	2230      	movs	r2, #48	; 0x30
 80021a2:	701a      	strb	r2, [r3, #0]
			SD.buffer[4*i+3]=tempconv[0];
 80021a4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80021a8:	009b      	lsls	r3, r3, #2
 80021aa:	3303      	adds	r3, #3
 80021ac:	4a0f      	ldr	r2, [pc, #60]	; (80021ec <conversion+0x204>)
 80021ae:	7811      	ldrb	r1, [r2, #0]
 80021b0:	4a0f      	ldr	r2, [pc, #60]	; (80021f0 <conversion+0x208>)
 80021b2:	4413      	add	r3, r2
 80021b4:	f503 5301 	add.w	r3, r3, #8256	; 0x2040
 80021b8:	3329      	adds	r3, #41	; 0x29
 80021ba:	460a      	mov	r2, r1
 80021bc:	701a      	strb	r2, [r3, #0]
	for(int16_t i=range;i<range+500;i++){
 80021be:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80021c2:	b29b      	uxth	r3, r3
 80021c4:	3301      	adds	r3, #1
 80021c6:	b29b      	uxth	r3, r3
 80021c8:	81fb      	strh	r3, [r7, #14]
 80021ca:	88fb      	ldrh	r3, [r7, #6]
 80021cc:	f203 12f3 	addw	r2, r3, #499	; 0x1f3
 80021d0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80021d4:	429a      	cmp	r2, r3
 80021d6:	f6bf af0f 	bge.w	8001ff8 <conversion+0x10>
		}
	}
}
 80021da:	bf00      	nop
 80021dc:	bf00      	nop
 80021de:	3710      	adds	r7, #16
 80021e0:	46bd      	mov	sp, r7
 80021e2:	bd80      	pop	{r7, pc}
 80021e4:	200032a4 	.word	0x200032a4
 80021e8:	0800b54c 	.word	0x0800b54c
 80021ec:	20003a74 	.word	0x20003a74
 80021f0:	20000160 	.word	0x20000160

080021f4 <save_data_to_SD>:
void save_data_to_SD(){
 80021f4:	b580      	push	{r7, lr}
 80021f6:	af00      	add	r7, sp, #0
	if(datatransmision){
 80021f8:	4b09      	ldr	r3, [pc, #36]	; (8002220 <save_data_to_SD+0x2c>)
 80021fa:	781b      	ldrb	r3, [r3, #0]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d00c      	beq.n	800221a <save_data_to_SD+0x26>
		SD.buffer[4000]='\n';
 8002200:	4b08      	ldr	r3, [pc, #32]	; (8002224 <save_data_to_SD+0x30>)
 8002202:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8002206:	220a      	movs	r2, #10
 8002208:	725a      	strb	r2, [r3, #9]
		RSTstatus=writeDataPacked("emg.txt", FA_OPEN_APPEND | FA_WRITE | FA_READ);
 800220a:	2133      	movs	r1, #51	; 0x33
 800220c:	4806      	ldr	r0, [pc, #24]	; (8002228 <save_data_to_SD+0x34>)
 800220e:	f7ff f80f 	bl	8001230 <writeDataPacked>
 8002212:	4603      	mov	r3, r0
 8002214:	461a      	mov	r2, r3
 8002216:	4b05      	ldr	r3, [pc, #20]	; (800222c <save_data_to_SD+0x38>)
 8002218:	701a      	strb	r2, [r3, #0]
	}
}
 800221a:	bf00      	nop
 800221c:	bd80      	pop	{r7, pc}
 800221e:	bf00      	nop
 8002220:	20000020 	.word	0x20000020
 8002224:	20000160 	.word	0x20000160
 8002228:	0800b550 	.word	0x0800b550
 800222c:	2000329c 	.word	0x2000329c

08002230 <adcbufToBlbuf>:
void adcbufToBlbuf(){
 8002230:	b480      	push	{r7}
 8002232:	b083      	sub	sp, #12
 8002234:	af00      	add	r7, sp, #0
	for(uint8_t i=0;i<25;i++){
 8002236:	2300      	movs	r3, #0
 8002238:	71fb      	strb	r3, [r7, #7]
 800223a:	e055      	b.n	80022e8 <adcbufToBlbuf+0xb8>
		Bluetooth[5*i]='s';
 800223c:	79fa      	ldrb	r2, [r7, #7]
 800223e:	4613      	mov	r3, r2
 8002240:	009b      	lsls	r3, r3, #2
 8002242:	4413      	add	r3, r2
 8002244:	4a2d      	ldr	r2, [pc, #180]	; (80022fc <adcbufToBlbuf+0xcc>)
 8002246:	2173      	movs	r1, #115	; 0x73
 8002248:	54d1      	strb	r1, [r2, r3]
		Bluetooth[5*i+1]=SD.buffer[160*i];
 800224a:	79fa      	ldrb	r2, [r7, #7]
 800224c:	4613      	mov	r3, r2
 800224e:	009b      	lsls	r3, r3, #2
 8002250:	4413      	add	r3, r2
 8002252:	015b      	lsls	r3, r3, #5
 8002254:	4619      	mov	r1, r3
 8002256:	79fa      	ldrb	r2, [r7, #7]
 8002258:	4613      	mov	r3, r2
 800225a:	009b      	lsls	r3, r3, #2
 800225c:	4413      	add	r3, r2
 800225e:	1c5a      	adds	r2, r3, #1
 8002260:	4b27      	ldr	r3, [pc, #156]	; (8002300 <adcbufToBlbuf+0xd0>)
 8002262:	440b      	add	r3, r1
 8002264:	f503 5301 	add.w	r3, r3, #8256	; 0x2040
 8002268:	3329      	adds	r3, #41	; 0x29
 800226a:	7819      	ldrb	r1, [r3, #0]
 800226c:	4b23      	ldr	r3, [pc, #140]	; (80022fc <adcbufToBlbuf+0xcc>)
 800226e:	5499      	strb	r1, [r3, r2]
		Bluetooth[5*i+2]=SD.buffer[160*i+1];
 8002270:	79fa      	ldrb	r2, [r7, #7]
 8002272:	4613      	mov	r3, r2
 8002274:	009b      	lsls	r3, r3, #2
 8002276:	4413      	add	r3, r2
 8002278:	015b      	lsls	r3, r3, #5
 800227a:	1c59      	adds	r1, r3, #1
 800227c:	79fa      	ldrb	r2, [r7, #7]
 800227e:	4613      	mov	r3, r2
 8002280:	009b      	lsls	r3, r3, #2
 8002282:	4413      	add	r3, r2
 8002284:	1c9a      	adds	r2, r3, #2
 8002286:	4b1e      	ldr	r3, [pc, #120]	; (8002300 <adcbufToBlbuf+0xd0>)
 8002288:	440b      	add	r3, r1
 800228a:	f503 5301 	add.w	r3, r3, #8256	; 0x2040
 800228e:	3329      	adds	r3, #41	; 0x29
 8002290:	7819      	ldrb	r1, [r3, #0]
 8002292:	4b1a      	ldr	r3, [pc, #104]	; (80022fc <adcbufToBlbuf+0xcc>)
 8002294:	5499      	strb	r1, [r3, r2]
		Bluetooth[5*i+3]=SD.buffer[160*i+2];
 8002296:	79fa      	ldrb	r2, [r7, #7]
 8002298:	4613      	mov	r3, r2
 800229a:	009b      	lsls	r3, r3, #2
 800229c:	4413      	add	r3, r2
 800229e:	015b      	lsls	r3, r3, #5
 80022a0:	1c99      	adds	r1, r3, #2
 80022a2:	79fa      	ldrb	r2, [r7, #7]
 80022a4:	4613      	mov	r3, r2
 80022a6:	009b      	lsls	r3, r3, #2
 80022a8:	4413      	add	r3, r2
 80022aa:	1cda      	adds	r2, r3, #3
 80022ac:	4b14      	ldr	r3, [pc, #80]	; (8002300 <adcbufToBlbuf+0xd0>)
 80022ae:	440b      	add	r3, r1
 80022b0:	f503 5301 	add.w	r3, r3, #8256	; 0x2040
 80022b4:	3329      	adds	r3, #41	; 0x29
 80022b6:	7819      	ldrb	r1, [r3, #0]
 80022b8:	4b10      	ldr	r3, [pc, #64]	; (80022fc <adcbufToBlbuf+0xcc>)
 80022ba:	5499      	strb	r1, [r3, r2]
		Bluetooth[5*i+4]=SD.buffer[160*i+3];
 80022bc:	79fa      	ldrb	r2, [r7, #7]
 80022be:	4613      	mov	r3, r2
 80022c0:	009b      	lsls	r3, r3, #2
 80022c2:	4413      	add	r3, r2
 80022c4:	015b      	lsls	r3, r3, #5
 80022c6:	1cd9      	adds	r1, r3, #3
 80022c8:	79fa      	ldrb	r2, [r7, #7]
 80022ca:	4613      	mov	r3, r2
 80022cc:	009b      	lsls	r3, r3, #2
 80022ce:	4413      	add	r3, r2
 80022d0:	1d1a      	adds	r2, r3, #4
 80022d2:	4b0b      	ldr	r3, [pc, #44]	; (8002300 <adcbufToBlbuf+0xd0>)
 80022d4:	440b      	add	r3, r1
 80022d6:	f503 5301 	add.w	r3, r3, #8256	; 0x2040
 80022da:	3329      	adds	r3, #41	; 0x29
 80022dc:	7819      	ldrb	r1, [r3, #0]
 80022de:	4b07      	ldr	r3, [pc, #28]	; (80022fc <adcbufToBlbuf+0xcc>)
 80022e0:	5499      	strb	r1, [r3, r2]
	for(uint8_t i=0;i<25;i++){
 80022e2:	79fb      	ldrb	r3, [r7, #7]
 80022e4:	3301      	adds	r3, #1
 80022e6:	71fb      	strb	r3, [r7, #7]
 80022e8:	79fb      	ldrb	r3, [r7, #7]
 80022ea:	2b18      	cmp	r3, #24
 80022ec:	d9a6      	bls.n	800223c <adcbufToBlbuf+0xc>
	}

}
 80022ee:	bf00      	nop
 80022f0:	bf00      	nop
 80022f2:	370c      	adds	r7, #12
 80022f4:	46bd      	mov	sp, r7
 80022f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fa:	4770      	bx	lr
 80022fc:	20003a80 	.word	0x20003a80
 8002300:	20000160 	.word	0x20000160

08002304 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b084      	sub	sp, #16
 8002308:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800230a:	f000 ffc7 	bl	800329c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800230e:	f000 f8cb 	bl	80024a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002312:	f7ff fde5 	bl	8001ee0 <MX_GPIO_Init>
  MX_DMA_Init();
 8002316:	f7ff f8f5 	bl	8001504 <MX_DMA_Init>
  MX_SPI1_Init();
 800231a:	f000 fb7f 	bl	8002a1c <MX_SPI1_Init>
  MX_TIM3_Init();
 800231e:	f000 fd81 	bl	8002e24 <MX_TIM3_Init>
  MX_ADC1_Init();
 8002322:	f7fe fffb 	bl	800131c <MX_ADC1_Init>
  MX_SPI2_Init();
 8002326:	f000 fbaf 	bl	8002a88 <MX_SPI2_Init>
  MX_TIM4_Init();
 800232a:	f000 fdcf 	bl	8002ecc <MX_TIM4_Init>
  MX_FATFS_Init();
 800232e:	f005 f881 	bl	8007434 <MX_FATFS_Init>
  MX_TIM2_Init();
 8002332:	f000 fd2b 	bl	8002d8c <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8002336:	f000 ff15 	bl	8003164 <MX_USART2_UART_Init>
  MX_TIM5_Init();
 800233a:	f000 fe1d 	bl	8002f78 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  LCD_SCAN_DIR Lcd_ScanDir = D2U_L2R;//SCAN_DIR_DFT = D2U_L2R
 800233e:	2306      	movs	r3, #6
 8002340:	73fb      	strb	r3, [r7, #15]
  LCD_Init( Lcd_ScanDir );
 8002342:	7bfb      	ldrb	r3, [r7, #15]
 8002344:	4618      	mov	r0, r3
 8002346:	f7fe fb4f 	bl	80009e8 <LCD_Init>
  Driver_Delay_ms(1000);
 800234a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800234e:	f7fe f953 	bl	80005f8 <Driver_Delay_ms>
  LCD_Clear(GRAY);
 8002352:	f248 4030 	movw	r0, #33840	; 0x8430
 8002356:	f7fe fc41 	bl	8000bdc <LCD_Clear>
  create_structarray();
 800235a:	f000 fa21 	bl	80027a0 <create_structarray>
  menu_refresh();
 800235e:	f000 fa57 	bl	8002810 <menu_refresh>
  HAL_TIM_Base_Start(&htim2);
 8002362:	483c      	ldr	r0, [pc, #240]	; (8002454 <main+0x150>)
 8002364:	f003 fb4c 	bl	8005a00 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim5);
 8002368:	483b      	ldr	r0, [pc, #236]	; (8002458 <main+0x154>)
 800236a:	f003 fb49 	bl	8005a00 <HAL_TIM_Base_Start>
  HAL_TIM_Encoder_Start_IT(&htim3, TIM_CHANNEL_ALL);
 800236e:	213c      	movs	r1, #60	; 0x3c
 8002370:	483a      	ldr	r0, [pc, #232]	; (800245c <main+0x158>)
 8002372:	f003 fd45 	bl	8005e00 <HAL_TIM_Encoder_Start_IT>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8002376:	210c      	movs	r1, #12
 8002378:	4839      	ldr	r0, [pc, #228]	; (8002460 <main+0x15c>)
 800237a:	f003 fbeb 	bl	8005b54 <HAL_TIM_PWM_Start>
  HAL_ADC_Start_DMA(&hadc1,(uint32_t*)dma_buf, DMABUFSIZE);
 800237e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002382:	4938      	ldr	r1, [pc, #224]	; (8002464 <main+0x160>)
 8002384:	4838      	ldr	r0, [pc, #224]	; (8002468 <main+0x164>)
 8002386:	f001 f863 	bl	8003450 <HAL_ADC_Start_DMA>
  hdma_adc1.XferHalfCpltCallback = farray;
 800238a:	4b38      	ldr	r3, [pc, #224]	; (800246c <main+0x168>)
 800238c:	4a38      	ldr	r2, [pc, #224]	; (8002470 <main+0x16c>)
 800238e:	641a      	str	r2, [r3, #64]	; 0x40
  hdma_adc1.XferCpltCallback = sarray;
 8002390:	4b36      	ldr	r3, [pc, #216]	; (800246c <main+0x168>)
 8002392:	4a38      	ldr	r2, [pc, #224]	; (8002474 <main+0x170>)
 8002394:	63da      	str	r2, [r3, #60]	; 0x3c
  mountSDcard();
 8002396:	f7fe ff23 	bl	80011e0 <mountSDcard>
  char pData[]="AT";
 800239a:	4a37      	ldr	r2, [pc, #220]	; (8002478 <main+0x174>)
 800239c:	f107 030c 	add.w	r3, r7, #12
 80023a0:	6812      	ldr	r2, [r2, #0]
 80023a2:	4611      	mov	r1, r2
 80023a4:	8019      	strh	r1, [r3, #0]
 80023a6:	3302      	adds	r3, #2
 80023a8:	0c12      	lsrs	r2, r2, #16
 80023aa:	701a      	strb	r2, [r3, #0]
  HAL_UART_Transmit(&huart2,(uint8_t*) pData, sizeof(pData)-1, 100);
 80023ac:	f107 010c 	add.w	r1, r7, #12
 80023b0:	2364      	movs	r3, #100	; 0x64
 80023b2:	2202      	movs	r2, #2
 80023b4:	4831      	ldr	r0, [pc, #196]	; (800247c <main+0x178>)
 80023b6:	f004 fc26 	bl	8006c06 <HAL_UART_Transmit>
char pDATAr[10];
HAL_UART_Receive(&huart2, (uint8_t*) pDATAr, 10, 100);
 80023ba:	4639      	mov	r1, r7
 80023bc:	2364      	movs	r3, #100	; 0x64
 80023be:	220a      	movs	r2, #10
 80023c0:	482e      	ldr	r0, [pc, #184]	; (800247c <main+0x178>)
 80023c2:	f004 fcb2 	bl	8006d2a <HAL_UART_Receive>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if(clearSDflag){
 80023c6:	4b2e      	ldr	r3, [pc, #184]	; (8002480 <main+0x17c>)
 80023c8:	781b      	ldrb	r3, [r3, #0]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d005      	beq.n	80023da <main+0xd6>
		  deleteFile("emg.txt");
 80023ce:	482d      	ldr	r0, [pc, #180]	; (8002484 <main+0x180>)
 80023d0:	f7fe ff1c 	bl	800120c <deleteFile>
		  clearSDflag=0;
 80023d4:	4b2a      	ldr	r3, [pc, #168]	; (8002480 <main+0x17c>)
 80023d6:	2200      	movs	r2, #0
 80023d8:	701a      	strb	r2, [r3, #0]
	  }
	  if(RST){
 80023da:	4b2b      	ldr	r3, [pc, #172]	; (8002488 <main+0x184>)
 80023dc:	781b      	ldrb	r3, [r3, #0]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d001      	beq.n	80023e6 <main+0xe2>
		  NVIC_SystemReset();
 80023e2:	f7ff fdeb 	bl	8001fbc <__NVIC_SystemReset>
	  }
	  if(firstconversion){
 80023e6:	4b29      	ldr	r3, [pc, #164]	; (800248c <main+0x188>)
 80023e8:	781b      	ldrb	r3, [r3, #0]
 80023ea:	b2db      	uxtb	r3, r3
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d005      	beq.n	80023fc <main+0xf8>
		conversion(0);
 80023f0:	2000      	movs	r0, #0
 80023f2:	f7ff fdf9 	bl	8001fe8 <conversion>
		firstconversion=0;
 80023f6:	4b25      	ldr	r3, [pc, #148]	; (800248c <main+0x188>)
 80023f8:	2200      	movs	r2, #0
 80023fa:	701a      	strb	r2, [r3, #0]

	  }
	  if(secondconversion){
 80023fc:	4b24      	ldr	r3, [pc, #144]	; (8002490 <main+0x18c>)
 80023fe:	781b      	ldrb	r3, [r3, #0]
 8002400:	b2db      	uxtb	r3, r3
 8002402:	2b00      	cmp	r3, #0
 8002404:	d0df      	beq.n	80023c6 <main+0xc2>
		  t1=TIM2->CNT;
 8002406:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800240a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800240c:	4a21      	ldr	r2, [pc, #132]	; (8002494 <main+0x190>)
 800240e:	6013      	str	r3, [r2, #0]
		  conversion(500);
 8002410:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002414:	f7ff fde8 	bl	8001fe8 <conversion>
		  if(BLstatus){
 8002418:	4b1f      	ldr	r3, [pc, #124]	; (8002498 <main+0x194>)
 800241a:	781b      	ldrb	r3, [r3, #0]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d007      	beq.n	8002430 <main+0x12c>
		  		  adcbufToBlbuf();
 8002420:	f7ff ff06 	bl	8002230 <adcbufToBlbuf>
		  		  	HAL_UART_Transmit(&huart2,(uint8_t *)Bluetooth , 125, 100);
 8002424:	2364      	movs	r3, #100	; 0x64
 8002426:	227d      	movs	r2, #125	; 0x7d
 8002428:	491c      	ldr	r1, [pc, #112]	; (800249c <main+0x198>)
 800242a:	4814      	ldr	r0, [pc, #80]	; (800247c <main+0x178>)
 800242c:	f004 fbeb 	bl	8006c06 <HAL_UART_Transmit>
		  		  }
		  if(SDstatus){save_data_to_SD();}
 8002430:	4b1b      	ldr	r3, [pc, #108]	; (80024a0 <main+0x19c>)
 8002432:	781b      	ldrb	r3, [r3, #0]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d001      	beq.n	800243c <main+0x138>
 8002438:	f7ff fedc 	bl	80021f4 <save_data_to_SD>

		  t2=TIM2->CNT-t1;
 800243c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002440:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002442:	4b14      	ldr	r3, [pc, #80]	; (8002494 <main+0x190>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	1ad3      	subs	r3, r2, r3
 8002448:	4a16      	ldr	r2, [pc, #88]	; (80024a4 <main+0x1a0>)
 800244a:	6013      	str	r3, [r2, #0]
		  secondconversion=0;
 800244c:	4b10      	ldr	r3, [pc, #64]	; (8002490 <main+0x18c>)
 800244e:	2200      	movs	r2, #0
 8002450:	701a      	strb	r2, [r3, #0]
	  if(clearSDflag){
 8002452:	e7b8      	b.n	80023c6 <main+0xc2>
 8002454:	20003bd4 	.word	0x20003bd4
 8002458:	20003cac 	.word	0x20003cac
 800245c:	20003c1c 	.word	0x20003c1c
 8002460:	20003c64 	.word	0x20003c64
 8002464:	200032a4 	.word	0x200032a4
 8002468:	200031ec 	.word	0x200031ec
 800246c:	20003234 	.word	0x20003234
 8002470:	0800257d 	.word	0x0800257d
 8002474:	0800259d 	.word	0x0800259d
 8002478:	0800b558 	.word	0x0800b558
 800247c:	20003cf4 	.word	0x20003cf4
 8002480:	2000329e 	.word	0x2000329e
 8002484:	0800b550 	.word	0x0800b550
 8002488:	2000329d 	.word	0x2000329d
 800248c:	2000329f 	.word	0x2000329f
 8002490:	200032a0 	.word	0x200032a0
 8002494:	20003a78 	.word	0x20003a78
 8002498:	2000329a 	.word	0x2000329a
 800249c:	20003a80 	.word	0x20003a80
 80024a0:	2000329b 	.word	0x2000329b
 80024a4:	20003a7c 	.word	0x20003a7c

080024a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b094      	sub	sp, #80	; 0x50
 80024ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80024ae:	f107 0320 	add.w	r3, r7, #32
 80024b2:	2230      	movs	r2, #48	; 0x30
 80024b4:	2100      	movs	r1, #0
 80024b6:	4618      	mov	r0, r3
 80024b8:	f008 fbc4 	bl	800ac44 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80024bc:	f107 030c 	add.w	r3, r7, #12
 80024c0:	2200      	movs	r2, #0
 80024c2:	601a      	str	r2, [r3, #0]
 80024c4:	605a      	str	r2, [r3, #4]
 80024c6:	609a      	str	r2, [r3, #8]
 80024c8:	60da      	str	r2, [r3, #12]
 80024ca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80024cc:	2300      	movs	r3, #0
 80024ce:	60bb      	str	r3, [r7, #8]
 80024d0:	4b28      	ldr	r3, [pc, #160]	; (8002574 <SystemClock_Config+0xcc>)
 80024d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024d4:	4a27      	ldr	r2, [pc, #156]	; (8002574 <SystemClock_Config+0xcc>)
 80024d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024da:	6413      	str	r3, [r2, #64]	; 0x40
 80024dc:	4b25      	ldr	r3, [pc, #148]	; (8002574 <SystemClock_Config+0xcc>)
 80024de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024e4:	60bb      	str	r3, [r7, #8]
 80024e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80024e8:	2300      	movs	r3, #0
 80024ea:	607b      	str	r3, [r7, #4]
 80024ec:	4b22      	ldr	r3, [pc, #136]	; (8002578 <SystemClock_Config+0xd0>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80024f4:	4a20      	ldr	r2, [pc, #128]	; (8002578 <SystemClock_Config+0xd0>)
 80024f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80024fa:	6013      	str	r3, [r2, #0]
 80024fc:	4b1e      	ldr	r3, [pc, #120]	; (8002578 <SystemClock_Config+0xd0>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002504:	607b      	str	r3, [r7, #4]
 8002506:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002508:	2302      	movs	r3, #2
 800250a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800250c:	2301      	movs	r3, #1
 800250e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002510:	2310      	movs	r3, #16
 8002512:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002514:	2302      	movs	r3, #2
 8002516:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002518:	2300      	movs	r3, #0
 800251a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800251c:	2308      	movs	r3, #8
 800251e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8002520:	2354      	movs	r3, #84	; 0x54
 8002522:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002524:	2302      	movs	r3, #2
 8002526:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002528:	2304      	movs	r3, #4
 800252a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800252c:	f107 0320 	add.w	r3, r7, #32
 8002530:	4618      	mov	r0, r3
 8002532:	f002 f98b 	bl	800484c <HAL_RCC_OscConfig>
 8002536:	4603      	mov	r3, r0
 8002538:	2b00      	cmp	r3, #0
 800253a:	d001      	beq.n	8002540 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800253c:	f000 f8b0 	bl	80026a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002540:	230f      	movs	r3, #15
 8002542:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002544:	2302      	movs	r3, #2
 8002546:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002548:	2300      	movs	r3, #0
 800254a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800254c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002550:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002552:	2300      	movs	r3, #0
 8002554:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002556:	f107 030c 	add.w	r3, r7, #12
 800255a:	2102      	movs	r1, #2
 800255c:	4618      	mov	r0, r3
 800255e:	f002 fbed 	bl	8004d3c <HAL_RCC_ClockConfig>
 8002562:	4603      	mov	r3, r0
 8002564:	2b00      	cmp	r3, #0
 8002566:	d001      	beq.n	800256c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8002568:	f000 f89a 	bl	80026a0 <Error_Handler>
  }
}
 800256c:	bf00      	nop
 800256e:	3750      	adds	r7, #80	; 0x50
 8002570:	46bd      	mov	sp, r7
 8002572:	bd80      	pop	{r7, pc}
 8002574:	40023800 	.word	0x40023800
 8002578:	40007000 	.word	0x40007000

0800257c <farray>:

/* USER CODE BEGIN 4 */


void farray(DMA_HandleTypeDef *hdma) {
 800257c:	b480      	push	{r7}
 800257e:	b083      	sub	sp, #12
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
	firstconversion=1;
 8002584:	4b04      	ldr	r3, [pc, #16]	; (8002598 <farray+0x1c>)
 8002586:	2201      	movs	r2, #1
 8002588:	701a      	strb	r2, [r3, #0]
}
 800258a:	bf00      	nop
 800258c:	370c      	adds	r7, #12
 800258e:	46bd      	mov	sp, r7
 8002590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002594:	4770      	bx	lr
 8002596:	bf00      	nop
 8002598:	2000329f 	.word	0x2000329f

0800259c <sarray>:

void sarray(DMA_HandleTypeDef *hdma) {
 800259c:	b480      	push	{r7}
 800259e:	b083      	sub	sp, #12
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
	secondconversion = 1;
 80025a4:	4b04      	ldr	r3, [pc, #16]	; (80025b8 <sarray+0x1c>)
 80025a6:	2201      	movs	r2, #1
 80025a8:	701a      	strb	r2, [r3, #0]
}
 80025aa:	bf00      	nop
 80025ac:	370c      	adds	r7, #12
 80025ae:	46bd      	mov	sp, r7
 80025b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b4:	4770      	bx	lr
 80025b6:	bf00      	nop
 80025b8:	200032a0 	.word	0x200032a0

080025bc <HAL_TIM_IC_CaptureCallback>:



void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 80025bc:	b580      	push	{r7, lr}
 80025be:	b082      	sub	sp, #8
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
	if(htim->Instance==TIM3){
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a18      	ldr	r2, [pc, #96]	; (800262c <HAL_TIM_IC_CaptureCallback+0x70>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d129      	bne.n	8002622 <HAL_TIM_IC_CaptureCallback+0x66>

		if((TIM5->CNT-enc_time)>20){
 80025ce:	4b18      	ldr	r3, [pc, #96]	; (8002630 <HAL_TIM_IC_CaptureCallback+0x74>)
 80025d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80025d2:	4b18      	ldr	r3, [pc, #96]	; (8002634 <HAL_TIM_IC_CaptureCallback+0x78>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	1ad3      	subs	r3, r2, r3
 80025d8:	2b14      	cmp	r3, #20
 80025da:	d920      	bls.n	800261e <HAL_TIM_IC_CaptureCallback+0x62>
			enc_time=TIM5->CNT;
 80025dc:	4b14      	ldr	r3, [pc, #80]	; (8002630 <HAL_TIM_IC_CaptureCallback+0x74>)
 80025de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025e0:	4a14      	ldr	r2, [pc, #80]	; (8002634 <HAL_TIM_IC_CaptureCallback+0x78>)
 80025e2:	6013      	str	r3, [r2, #0]
			if(enc_rot<(int16_t)__HAL_TIM_GET_COUNTER(htim)){
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ea:	b21a      	sxth	r2, r3
 80025ec:	4b12      	ldr	r3, [pc, #72]	; (8002638 <HAL_TIM_IC_CaptureCallback+0x7c>)
 80025ee:	881b      	ldrh	r3, [r3, #0]
 80025f0:	b21b      	sxth	r3, r3
 80025f2:	429a      	cmp	r2, r3
 80025f4:	dd02      	ble.n	80025fc <HAL_TIM_IC_CaptureCallback+0x40>
				key_prev_press();
 80025f6:	f7fe ff69 	bl	80014cc <key_prev_press>
 80025fa:	e00a      	b.n	8002612 <HAL_TIM_IC_CaptureCallback+0x56>
			}
			else if(enc_rot>(int16_t)__HAL_TIM_GET_COUNTER(htim)){
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002602:	b21a      	sxth	r2, r3
 8002604:	4b0c      	ldr	r3, [pc, #48]	; (8002638 <HAL_TIM_IC_CaptureCallback+0x7c>)
 8002606:	881b      	ldrh	r3, [r3, #0]
 8002608:	b21b      	sxth	r3, r3
 800260a:	429a      	cmp	r2, r3
 800260c:	da01      	bge.n	8002612 <HAL_TIM_IC_CaptureCallback+0x56>
				key_next_press();
 800260e:	f7fe ff4f 	bl	80014b0 <key_next_press>
			}
			enc_rot=(int16_t)__HAL_TIM_GET_COUNTER(&htim3);
 8002612:	4b0a      	ldr	r3, [pc, #40]	; (800263c <HAL_TIM_IC_CaptureCallback+0x80>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002618:	b21a      	sxth	r2, r3
 800261a:	4b07      	ldr	r3, [pc, #28]	; (8002638 <HAL_TIM_IC_CaptureCallback+0x7c>)
 800261c:	801a      	strh	r2, [r3, #0]
		}
		if(enc_time>HAL_MAX_DELAY){
 800261e:	4b05      	ldr	r3, [pc, #20]	; (8002634 <HAL_TIM_IC_CaptureCallback+0x78>)
 8002620:	681b      	ldr	r3, [r3, #0]
			enc_time=0;
		}
	}
}
 8002622:	bf00      	nop
 8002624:	3708      	adds	r7, #8
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}
 800262a:	bf00      	nop
 800262c:	40000400 	.word	0x40000400
 8002630:	40000c00 	.word	0x40000c00
 8002634:	20003b00 	.word	0x20003b00
 8002638:	20003b04 	.word	0x20003b04
 800263c:	20003c1c 	.word	0x20003c1c

08002640 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8002640:	b580      	push	{r7, lr}
 8002642:	b082      	sub	sp, #8
 8002644:	af00      	add	r7, sp, #0
 8002646:	4603      	mov	r3, r0
 8002648:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin==SW_Pin){
 800264a:	88fb      	ldrh	r3, [r7, #6]
 800264c:	2b08      	cmp	r3, #8
 800264e:	d11f      	bne.n	8002690 <HAL_GPIO_EXTI_Callback+0x50>
		static uint32_t prev_time=0;
		if(!HAL_GPIO_ReadPin(SW_GPIO_Port, SW_Pin)&& (HAL_GetTick()-prev_time)>20){
 8002650:	2108      	movs	r1, #8
 8002652:	4811      	ldr	r0, [pc, #68]	; (8002698 <HAL_GPIO_EXTI_Callback+0x58>)
 8002654:	f002 f8b0 	bl	80047b8 <HAL_GPIO_ReadPin>
 8002658:	4603      	mov	r3, r0
 800265a:	2b00      	cmp	r3, #0
 800265c:	d10e      	bne.n	800267c <HAL_GPIO_EXTI_Callback+0x3c>
 800265e:	f000 fe83 	bl	8003368 <HAL_GetTick>
 8002662:	4602      	mov	r2, r0
 8002664:	4b0d      	ldr	r3, [pc, #52]	; (800269c <HAL_GPIO_EXTI_Callback+0x5c>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	1ad3      	subs	r3, r2, r3
 800266a:	2b14      	cmp	r3, #20
 800266c:	d906      	bls.n	800267c <HAL_GPIO_EXTI_Callback+0x3c>
			key_enter_press();
 800266e:	f7fe ff3b 	bl	80014e8 <key_enter_press>
			prev_time=HAL_GetTick();
 8002672:	f000 fe79 	bl	8003368 <HAL_GetTick>
 8002676:	4603      	mov	r3, r0
 8002678:	4a08      	ldr	r2, [pc, #32]	; (800269c <HAL_GPIO_EXTI_Callback+0x5c>)
 800267a:	6013      	str	r3, [r2, #0]
		}
		if(prev_time>HAL_GetTick()){
 800267c:	f000 fe74 	bl	8003368 <HAL_GetTick>
 8002680:	4602      	mov	r2, r0
 8002682:	4b06      	ldr	r3, [pc, #24]	; (800269c <HAL_GPIO_EXTI_Callback+0x5c>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	429a      	cmp	r2, r3
 8002688:	d202      	bcs.n	8002690 <HAL_GPIO_EXTI_Callback+0x50>
			prev_time=0;
 800268a:	4b04      	ldr	r3, [pc, #16]	; (800269c <HAL_GPIO_EXTI_Callback+0x5c>)
 800268c:	2200      	movs	r2, #0
 800268e:	601a      	str	r2, [r3, #0]
		}
	}
}
 8002690:	bf00      	nop
 8002692:	3708      	adds	r7, #8
 8002694:	46bd      	mov	sp, r7
 8002696:	bd80      	pop	{r7, pc}
 8002698:	40020400 	.word	0x40020400
 800269c:	20003b08 	.word	0x20003b08

080026a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80026a0:	b480      	push	{r7}
 80026a2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80026a4:	b672      	cpsid	i
}
 80026a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80026a8:	e7fe      	b.n	80026a8 <Error_Handler+0x8>
	...

080026ac <refresh_taskbar>:





void  refresh_taskbar(){
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b082      	sub	sp, #8
 80026b0:	af02      	add	r7, sp, #8
	LCD_SetArealColor(0, 0, 160, 19, BLACK);
 80026b2:	2300      	movs	r3, #0
 80026b4:	9300      	str	r3, [sp, #0]
 80026b6:	2313      	movs	r3, #19
 80026b8:	22a0      	movs	r2, #160	; 0xa0
 80026ba:	2100      	movs	r1, #0
 80026bc:	2000      	movs	r0, #0
 80026be:	f7fe fa5f 	bl	8000b80 <LCD_SetArealColor>
	//BLUETOOTH TASKBAR
	//LCD_DrawCircle(151, 9, 6, BLUE, DRAW_EMPTY,  DOT_PIXEL_DFT );
	LCD_DisplayString(120,2,"BL",&Font16,LCD_BACKGROUND,GRAY);
 80026c2:	f248 4330 	movw	r3, #33840	; 0x8430
 80026c6:	9301      	str	r3, [sp, #4]
 80026c8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80026cc:	9300      	str	r3, [sp, #0]
 80026ce:	4b2d      	ldr	r3, [pc, #180]	; (8002784 <refresh_taskbar+0xd8>)
 80026d0:	4a2d      	ldr	r2, [pc, #180]	; (8002788 <refresh_taskbar+0xdc>)
 80026d2:	2102      	movs	r1, #2
 80026d4:	2078      	movs	r0, #120	; 0x78
 80026d6:	f7fe fd31 	bl	800113c <LCD_DisplayString>

	//SD TASKBAR
	//LCD_DrawCircle(111, 9, 6, BLUE, DRAW_EMPTY,  DOT_PIXEL_DFT );
	LCD_DisplayString(80,2,"SD",&Font16,LCD_BACKGROUND,GRAY);
 80026da:	f248 4330 	movw	r3, #33840	; 0x8430
 80026de:	9301      	str	r3, [sp, #4]
 80026e0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80026e4:	9300      	str	r3, [sp, #0]
 80026e6:	4b27      	ldr	r3, [pc, #156]	; (8002784 <refresh_taskbar+0xd8>)
 80026e8:	4a28      	ldr	r2, [pc, #160]	; (800278c <refresh_taskbar+0xe0>)
 80026ea:	2102      	movs	r1, #2
 80026ec:	2050      	movs	r0, #80	; 0x50
 80026ee:	f7fe fd25 	bl	800113c <LCD_DisplayString>

	//DEBUG TASKBAR
	//LCD_DrawCircle(71, 9, 6, BLUE, DRAW_EMPTY,  DOT_PIXEL_DFT );

	//BLUETOOTH STATUS TASKBAR
	if(BLstatus)
 80026f2:	4b27      	ldr	r3, [pc, #156]	; (8002790 <refresh_taskbar+0xe4>)
 80026f4:	781b      	ldrb	r3, [r3, #0]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d00b      	beq.n	8002712 <refresh_taskbar+0x66>
		LCD_DrawCircle(150, 9, 6, GREEN, DRAW_FULL, DOT_PIXEL_DFT);
 80026fa:	2301      	movs	r3, #1
 80026fc:	9301      	str	r3, [sp, #4]
 80026fe:	2301      	movs	r3, #1
 8002700:	9300      	str	r3, [sp, #0]
 8002702:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002706:	2206      	movs	r2, #6
 8002708:	2109      	movs	r1, #9
 800270a:	2096      	movs	r0, #150	; 0x96
 800270c:	f7fe faf4 	bl	8000cf8 <LCD_DrawCircle>
 8002710:	e00a      	b.n	8002728 <refresh_taskbar+0x7c>
	else
		LCD_DrawCircle(150, 9, 6, RED, DRAW_FULL, DOT_PIXEL_DFT);
 8002712:	2301      	movs	r3, #1
 8002714:	9301      	str	r3, [sp, #4]
 8002716:	2301      	movs	r3, #1
 8002718:	9300      	str	r3, [sp, #0]
 800271a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800271e:	2206      	movs	r2, #6
 8002720:	2109      	movs	r1, #9
 8002722:	2096      	movs	r0, #150	; 0x96
 8002724:	f7fe fae8 	bl	8000cf8 <LCD_DrawCircle>
	//SD STATUS TASKBAR
	if(SDstatus)
 8002728:	4b1a      	ldr	r3, [pc, #104]	; (8002794 <refresh_taskbar+0xe8>)
 800272a:	781b      	ldrb	r3, [r3, #0]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d00b      	beq.n	8002748 <refresh_taskbar+0x9c>
		LCD_DrawCircle(110, 9, 6, GREEN, DRAW_FULL, DOT_PIXEL_DFT);
 8002730:	2301      	movs	r3, #1
 8002732:	9301      	str	r3, [sp, #4]
 8002734:	2301      	movs	r3, #1
 8002736:	9300      	str	r3, [sp, #0]
 8002738:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800273c:	2206      	movs	r2, #6
 800273e:	2109      	movs	r1, #9
 8002740:	206e      	movs	r0, #110	; 0x6e
 8002742:	f7fe fad9 	bl	8000cf8 <LCD_DrawCircle>
 8002746:	e00a      	b.n	800275e <refresh_taskbar+0xb2>
	else
		LCD_DrawCircle(110, 9, 6, RED, DRAW_FULL, DOT_PIXEL_DFT);
 8002748:	2301      	movs	r3, #1
 800274a:	9301      	str	r3, [sp, #4]
 800274c:	2301      	movs	r3, #1
 800274e:	9300      	str	r3, [sp, #0]
 8002750:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002754:	2206      	movs	r2, #6
 8002756:	2109      	movs	r1, #9
 8002758:	206e      	movs	r0, #110	; 0x6e
 800275a:	f7fe facd 	bl	8000cf8 <LCD_DrawCircle>
	//DEBUG STATUS TASKBAR
	if(RSTstatus)
 800275e:	4b0e      	ldr	r3, [pc, #56]	; (8002798 <refresh_taskbar+0xec>)
 8002760:	781b      	ldrb	r3, [r3, #0]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d00b      	beq.n	800277e <refresh_taskbar+0xd2>
		LCD_DisplayString(1,2,"RESETSD",&Font16,LCD_BACKGROUND,0xFCE0);
 8002766:	f64f 43e0 	movw	r3, #64736	; 0xfce0
 800276a:	9301      	str	r3, [sp, #4]
 800276c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002770:	9300      	str	r3, [sp, #0]
 8002772:	4b04      	ldr	r3, [pc, #16]	; (8002784 <refresh_taskbar+0xd8>)
 8002774:	4a09      	ldr	r2, [pc, #36]	; (800279c <refresh_taskbar+0xf0>)
 8002776:	2102      	movs	r1, #2
 8002778:	2001      	movs	r0, #1
 800277a:	f7fe fcdf 	bl	800113c <LCD_DisplayString>


}
 800277e:	bf00      	nop
 8002780:	46bd      	mov	sp, r7
 8002782:	bd80      	pop	{r7, pc}
 8002784:	20000010 	.word	0x20000010
 8002788:	0800b590 	.word	0x0800b590
 800278c:	0800b594 	.word	0x0800b594
 8002790:	2000329a 	.word	0x2000329a
 8002794:	2000329b 	.word	0x2000329b
 8002798:	2000329c 	.word	0x2000329c
 800279c:	0800b598 	.word	0x0800b598

080027a0 <create_structarray>:


void create_structarray(){
 80027a0:	b480      	push	{r7}
 80027a2:	b083      	sub	sp, #12
 80027a4:	af00      	add	r7, sp, #0
	menu_t * temp =currentPointer;
 80027a6:	4b18      	ldr	r3, [pc, #96]	; (8002808 <create_structarray+0x68>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	607b      	str	r3, [r7, #4]
	while(temp->prev){
 80027ac:	e002      	b.n	80027b4 <create_structarray+0x14>
		temp=temp->prev;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	689b      	ldr	r3, [r3, #8]
 80027b2:	607b      	str	r3, [r7, #4]
	while(temp->prev){
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	689b      	ldr	r3, [r3, #8]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d1f8      	bne.n	80027ae <create_structarray+0xe>
	}
	structarray[0]=temp;
 80027bc:	4a13      	ldr	r2, [pc, #76]	; (800280c <create_structarray+0x6c>)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6013      	str	r3, [r2, #0]
	for(uint8_t i=1;i<MENU_LENGHT;i++){
 80027c2:	2301      	movs	r3, #1
 80027c4:	70fb      	strb	r3, [r7, #3]
 80027c6:	e014      	b.n	80027f2 <create_structarray+0x52>
		if(temp->next){
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d008      	beq.n	80027e2 <create_structarray+0x42>
			temp=temp->next;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	607b      	str	r3, [r7, #4]
			structarray[i]=temp;
 80027d6:	78fb      	ldrb	r3, [r7, #3]
 80027d8:	490c      	ldr	r1, [pc, #48]	; (800280c <create_structarray+0x6c>)
 80027da:	687a      	ldr	r2, [r7, #4]
 80027dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80027e0:	e004      	b.n	80027ec <create_structarray+0x4c>
		}
		else{
			structarray[i]=NULL;
 80027e2:	78fb      	ldrb	r3, [r7, #3]
 80027e4:	4a09      	ldr	r2, [pc, #36]	; (800280c <create_structarray+0x6c>)
 80027e6:	2100      	movs	r1, #0
 80027e8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(uint8_t i=1;i<MENU_LENGHT;i++){
 80027ec:	78fb      	ldrb	r3, [r7, #3]
 80027ee:	3301      	adds	r3, #1
 80027f0:	70fb      	strb	r3, [r7, #3]
 80027f2:	78fb      	ldrb	r3, [r7, #3]
 80027f4:	2b04      	cmp	r3, #4
 80027f6:	d9e7      	bls.n	80027c8 <create_structarray+0x28>
		}
	}
}
 80027f8:	bf00      	nop
 80027fa:	bf00      	nop
 80027fc:	370c      	adds	r7, #12
 80027fe:	46bd      	mov	sp, r7
 8002800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002804:	4770      	bx	lr
 8002806:	bf00      	nop
 8002808:	2000009c 	.word	0x2000009c
 800280c:	20003b0c 	.word	0x20003b0c

08002810 <menu_refresh>:



void menu_refresh(){
 8002810:	b580      	push	{r7, lr}
 8002812:	b086      	sub	sp, #24
 8002814:	af02      	add	r7, sp, #8
	//LCD_Clear(GRAY);
	refresh_taskbar();
 8002816:	f7ff ff49 	bl	80026ac <refresh_taskbar>
	uint16_t colors[5];
	for(uint8_t i =0;i<MENU_LENGHT;i++){
 800281a:	2300      	movs	r3, #0
 800281c:	73fb      	strb	r3, [r7, #15]
 800281e:	e018      	b.n	8002852 <menu_refresh+0x42>
		if(i==CurrentPointerPosition-1){
 8002820:	7bfa      	ldrb	r2, [r7, #15]
 8002822:	4b24      	ldr	r3, [pc, #144]	; (80028b4 <menu_refresh+0xa4>)
 8002824:	781b      	ldrb	r3, [r3, #0]
 8002826:	3b01      	subs	r3, #1
 8002828:	429a      	cmp	r2, r3
 800282a:	d108      	bne.n	800283e <menu_refresh+0x2e>
			colors[i]=RED;
 800282c:	7bfb      	ldrb	r3, [r7, #15]
 800282e:	005b      	lsls	r3, r3, #1
 8002830:	3310      	adds	r3, #16
 8002832:	443b      	add	r3, r7
 8002834:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8002838:	f823 2c0c 	strh.w	r2, [r3, #-12]
 800283c:	e006      	b.n	800284c <menu_refresh+0x3c>
		}
		else{
			colors[i]=BLACK;
 800283e:	7bfb      	ldrb	r3, [r7, #15]
 8002840:	005b      	lsls	r3, r3, #1
 8002842:	3310      	adds	r3, #16
 8002844:	443b      	add	r3, r7
 8002846:	2200      	movs	r2, #0
 8002848:	f823 2c0c 	strh.w	r2, [r3, #-12]
	for(uint8_t i =0;i<MENU_LENGHT;i++){
 800284c:	7bfb      	ldrb	r3, [r7, #15]
 800284e:	3301      	adds	r3, #1
 8002850:	73fb      	strb	r3, [r7, #15]
 8002852:	7bfb      	ldrb	r3, [r7, #15]
 8002854:	2b04      	cmp	r3, #4
 8002856:	d9e3      	bls.n	8002820 <menu_refresh+0x10>
		}
	}
	for(uint8_t i=0;i<MENU_LENGHT;i++){
 8002858:	2300      	movs	r3, #0
 800285a:	73bb      	strb	r3, [r7, #14]
 800285c:	e022      	b.n	80028a4 <menu_refresh+0x94>
		if(structarray[i])
 800285e:	7bbb      	ldrb	r3, [r7, #14]
 8002860:	4a15      	ldr	r2, [pc, #84]	; (80028b8 <menu_refresh+0xa8>)
 8002862:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d019      	beq.n	800289e <menu_refresh+0x8e>
			LCD_DisplayString(stringPosX[i],stringPosY[i],structarray[i]->name,&Font24,LCD_BACKGROUND,colors[i]);
 800286a:	7bbb      	ldrb	r3, [r7, #14]
 800286c:	4a13      	ldr	r2, [pc, #76]	; (80028bc <menu_refresh+0xac>)
 800286e:	5cd3      	ldrb	r3, [r2, r3]
 8002870:	b298      	uxth	r0, r3
 8002872:	7bbb      	ldrb	r3, [r7, #14]
 8002874:	4a12      	ldr	r2, [pc, #72]	; (80028c0 <menu_refresh+0xb0>)
 8002876:	5cd3      	ldrb	r3, [r2, r3]
 8002878:	b299      	uxth	r1, r3
 800287a:	7bbb      	ldrb	r3, [r7, #14]
 800287c:	4a0e      	ldr	r2, [pc, #56]	; (80028b8 <menu_refresh+0xa8>)
 800287e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002882:	681a      	ldr	r2, [r3, #0]
 8002884:	7bbb      	ldrb	r3, [r7, #14]
 8002886:	005b      	lsls	r3, r3, #1
 8002888:	3310      	adds	r3, #16
 800288a:	443b      	add	r3, r7
 800288c:	f833 3c0c 	ldrh.w	r3, [r3, #-12]
 8002890:	9301      	str	r3, [sp, #4]
 8002892:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002896:	9300      	str	r3, [sp, #0]
 8002898:	4b0a      	ldr	r3, [pc, #40]	; (80028c4 <menu_refresh+0xb4>)
 800289a:	f7fe fc4f 	bl	800113c <LCD_DisplayString>
	for(uint8_t i=0;i<MENU_LENGHT;i++){
 800289e:	7bbb      	ldrb	r3, [r7, #14]
 80028a0:	3301      	adds	r3, #1
 80028a2:	73bb      	strb	r3, [r7, #14]
 80028a4:	7bbb      	ldrb	r3, [r7, #14]
 80028a6:	2b04      	cmp	r3, #4
 80028a8:	d9d9      	bls.n	800285e <menu_refresh+0x4e>
	}

}
 80028aa:	bf00      	nop
 80028ac:	bf00      	nop
 80028ae:	3710      	adds	r7, #16
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bd80      	pop	{r7, pc}
 80028b4:	200000a0 	.word	0x200000a0
 80028b8:	20003b0c 	.word	0x20003b0c
 80028bc:	200000ac 	.word	0x200000ac
 80028c0:	200000a4 	.word	0x200000a4
 80028c4:	20000018 	.word	0x20000018

080028c8 <menu_next>:

void menu_next() {
 80028c8:	b580      	push	{r7, lr}
 80028ca:	af00      	add	r7, sp, #0
	//create_structarray();
	if(currentPointer->next){
 80028cc:	4b09      	ldr	r3, [pc, #36]	; (80028f4 <menu_next+0x2c>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d00a      	beq.n	80028ec <menu_next+0x24>

		currentPointer=currentPointer->next;
 80028d6:	4b07      	ldr	r3, [pc, #28]	; (80028f4 <menu_next+0x2c>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	4a05      	ldr	r2, [pc, #20]	; (80028f4 <menu_next+0x2c>)
 80028de:	6013      	str	r3, [r2, #0]
		CurrentPointerPosition++;
 80028e0:	4b05      	ldr	r3, [pc, #20]	; (80028f8 <menu_next+0x30>)
 80028e2:	781b      	ldrb	r3, [r3, #0]
 80028e4:	3301      	adds	r3, #1
 80028e6:	b2da      	uxtb	r2, r3
 80028e8:	4b03      	ldr	r3, [pc, #12]	; (80028f8 <menu_next+0x30>)
 80028ea:	701a      	strb	r2, [r3, #0]
	}
	menu_refresh();
 80028ec:	f7ff ff90 	bl	8002810 <menu_refresh>

}
 80028f0:	bf00      	nop
 80028f2:	bd80      	pop	{r7, pc}
 80028f4:	2000009c 	.word	0x2000009c
 80028f8:	200000a0 	.word	0x200000a0

080028fc <menu_prev>:

void menu_prev(void) {
 80028fc:	b580      	push	{r7, lr}
 80028fe:	af00      	add	r7, sp, #0
	//create_structarray();
	if(currentPointer->prev){
 8002900:	4b09      	ldr	r3, [pc, #36]	; (8002928 <menu_prev+0x2c>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	689b      	ldr	r3, [r3, #8]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d00a      	beq.n	8002920 <menu_prev+0x24>
		currentPointer=currentPointer->prev;
 800290a:	4b07      	ldr	r3, [pc, #28]	; (8002928 <menu_prev+0x2c>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	689b      	ldr	r3, [r3, #8]
 8002910:	4a05      	ldr	r2, [pc, #20]	; (8002928 <menu_prev+0x2c>)
 8002912:	6013      	str	r3, [r2, #0]
		CurrentPointerPosition--;
 8002914:	4b05      	ldr	r3, [pc, #20]	; (800292c <menu_prev+0x30>)
 8002916:	781b      	ldrb	r3, [r3, #0]
 8002918:	3b01      	subs	r3, #1
 800291a:	b2da      	uxtb	r2, r3
 800291c:	4b03      	ldr	r3, [pc, #12]	; (800292c <menu_prev+0x30>)
 800291e:	701a      	strb	r2, [r3, #0]
	}
	menu_refresh();
 8002920:	f7ff ff76 	bl	8002810 <menu_refresh>
}
 8002924:	bf00      	nop
 8002926:	bd80      	pop	{r7, pc}
 8002928:	2000009c 	.word	0x2000009c
 800292c:	200000a0 	.word	0x200000a0

08002930 <menu_enter>:

void menu_enter(void) {
 8002930:	b580      	push	{r7, lr}
 8002932:	af00      	add	r7, sp, #0
	//create_structarray();
	if(!currentPointer->menu_function && currentPointer->child)
 8002934:	4b0f      	ldr	r3, [pc, #60]	; (8002974 <menu_enter+0x44>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	695b      	ldr	r3, [r3, #20]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d10c      	bne.n	8002958 <menu_enter+0x28>
 800293e:	4b0d      	ldr	r3, [pc, #52]	; (8002974 <menu_enter+0x44>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	68db      	ldr	r3, [r3, #12]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d007      	beq.n	8002958 <menu_enter+0x28>
	{
		currentPointer=currentPointer->child;
 8002948:	4b0a      	ldr	r3, [pc, #40]	; (8002974 <menu_enter+0x44>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	68db      	ldr	r3, [r3, #12]
 800294e:	4a09      	ldr	r2, [pc, #36]	; (8002974 <menu_enter+0x44>)
 8002950:	6013      	str	r3, [r2, #0]
		menu_refresh();
 8002952:	f7ff ff5d 	bl	8002810 <menu_refresh>
 8002956:	e008      	b.n	800296a <menu_enter+0x3a>

	}
	else if(currentPointer->menu_function)
 8002958:	4b06      	ldr	r3, [pc, #24]	; (8002974 <menu_enter+0x44>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	695b      	ldr	r3, [r3, #20]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d003      	beq.n	800296a <menu_enter+0x3a>
	{
		currentPointer->menu_function();
 8002962:	4b04      	ldr	r3, [pc, #16]	; (8002974 <menu_enter+0x44>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	695b      	ldr	r3, [r3, #20]
 8002968:	4798      	blx	r3
	}
	refresh_taskbar();
 800296a:	f7ff fe9f 	bl	80026ac <refresh_taskbar>

}
 800296e:	bf00      	nop
 8002970:	bd80      	pop	{r7, pc}
 8002972:	bf00      	nop
 8002974:	2000009c 	.word	0x2000009c

08002978 <clearSD>:
extern uint8_t RST;
extern uint8_t clearSDflag;
extern  menu_t *currentPointer;


void clearSD(void){
 8002978:	b480      	push	{r7}
 800297a:	af00      	add	r7, sp, #0
	clearSDflag=1;
 800297c:	4b03      	ldr	r3, [pc, #12]	; (800298c <clearSD+0x14>)
 800297e:	2201      	movs	r2, #1
 8002980:	701a      	strb	r2, [r3, #0]

}
 8002982:	bf00      	nop
 8002984:	46bd      	mov	sp, r7
 8002986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298a:	4770      	bx	lr
 800298c:	2000329e 	.word	0x2000329e

08002990 <turn_ALL_OFF>:

void turn_ALL_OFF(){
 8002990:	b480      	push	{r7}
 8002992:	af00      	add	r7, sp, #0
	BLstatus=0;
 8002994:	4b05      	ldr	r3, [pc, #20]	; (80029ac <turn_ALL_OFF+0x1c>)
 8002996:	2200      	movs	r2, #0
 8002998:	701a      	strb	r2, [r3, #0]
	SDstatus=0;
 800299a:	4b05      	ldr	r3, [pc, #20]	; (80029b0 <turn_ALL_OFF+0x20>)
 800299c:	2200      	movs	r2, #0
 800299e:	701a      	strb	r2, [r3, #0]
}
 80029a0:	bf00      	nop
 80029a2:	46bd      	mov	sp, r7
 80029a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a8:	4770      	bx	lr
 80029aa:	bf00      	nop
 80029ac:	2000329a 	.word	0x2000329a
 80029b0:	2000329b 	.word	0x2000329b

080029b4 <turn_BL>:

 void turn_BL(){
 80029b4:	b480      	push	{r7}
 80029b6:	af00      	add	r7, sp, #0
	 if(BLstatus)
 80029b8:	4b07      	ldr	r3, [pc, #28]	; (80029d8 <turn_BL+0x24>)
 80029ba:	781b      	ldrb	r3, [r3, #0]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d003      	beq.n	80029c8 <turn_BL+0x14>
	 	BLstatus=0;
 80029c0:	4b05      	ldr	r3, [pc, #20]	; (80029d8 <turn_BL+0x24>)
 80029c2:	2200      	movs	r2, #0
 80029c4:	701a      	strb	r2, [r3, #0]
	 else
	 	BLstatus=1;
 }
 80029c6:	e002      	b.n	80029ce <turn_BL+0x1a>
	 	BLstatus=1;
 80029c8:	4b03      	ldr	r3, [pc, #12]	; (80029d8 <turn_BL+0x24>)
 80029ca:	2201      	movs	r2, #1
 80029cc:	701a      	strb	r2, [r3, #0]
 }
 80029ce:	bf00      	nop
 80029d0:	46bd      	mov	sp, r7
 80029d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d6:	4770      	bx	lr
 80029d8:	2000329a 	.word	0x2000329a

080029dc <turn_SD>:
extern void turn_SD(){
 80029dc:	b480      	push	{r7}
 80029de:	af00      	add	r7, sp, #0
	if(SDstatus)
 80029e0:	4b07      	ldr	r3, [pc, #28]	; (8002a00 <turn_SD+0x24>)
 80029e2:	781b      	ldrb	r3, [r3, #0]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d003      	beq.n	80029f0 <turn_SD+0x14>
		SDstatus=0;
 80029e8:	4b05      	ldr	r3, [pc, #20]	; (8002a00 <turn_SD+0x24>)
 80029ea:	2200      	movs	r2, #0
 80029ec:	701a      	strb	r2, [r3, #0]
	else
		SDstatus=1;
}
 80029ee:	e002      	b.n	80029f6 <turn_SD+0x1a>
		SDstatus=1;
 80029f0:	4b03      	ldr	r3, [pc, #12]	; (8002a00 <turn_SD+0x24>)
 80029f2:	2201      	movs	r2, #1
 80029f4:	701a      	strb	r2, [r3, #0]
}
 80029f6:	bf00      	nop
 80029f8:	46bd      	mov	sp, r7
 80029fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fe:	4770      	bx	lr
 8002a00:	2000329b 	.word	0x2000329b

08002a04 <reset>:


void reset(){
 8002a04:	b480      	push	{r7}
 8002a06:	af00      	add	r7, sp, #0
	RST=1;
 8002a08:	4b03      	ldr	r3, [pc, #12]	; (8002a18 <reset+0x14>)
 8002a0a:	2201      	movs	r2, #1
 8002a0c:	701a      	strb	r2, [r3, #0]

}
 8002a0e:	bf00      	nop
 8002a10:	46bd      	mov	sp, r7
 8002a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a16:	4770      	bx	lr
 8002a18:	2000329d 	.word	0x2000329d

08002a1c <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002a20:	4b17      	ldr	r3, [pc, #92]	; (8002a80 <MX_SPI1_Init+0x64>)
 8002a22:	4a18      	ldr	r2, [pc, #96]	; (8002a84 <MX_SPI1_Init+0x68>)
 8002a24:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002a26:	4b16      	ldr	r3, [pc, #88]	; (8002a80 <MX_SPI1_Init+0x64>)
 8002a28:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002a2c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002a2e:	4b14      	ldr	r3, [pc, #80]	; (8002a80 <MX_SPI1_Init+0x64>)
 8002a30:	2200      	movs	r2, #0
 8002a32:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002a34:	4b12      	ldr	r3, [pc, #72]	; (8002a80 <MX_SPI1_Init+0x64>)
 8002a36:	2200      	movs	r2, #0
 8002a38:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002a3a:	4b11      	ldr	r3, [pc, #68]	; (8002a80 <MX_SPI1_Init+0x64>)
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002a40:	4b0f      	ldr	r3, [pc, #60]	; (8002a80 <MX_SPI1_Init+0x64>)
 8002a42:	2200      	movs	r2, #0
 8002a44:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002a46:	4b0e      	ldr	r3, [pc, #56]	; (8002a80 <MX_SPI1_Init+0x64>)
 8002a48:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a4c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8002a4e:	4b0c      	ldr	r3, [pc, #48]	; (8002a80 <MX_SPI1_Init+0x64>)
 8002a50:	2210      	movs	r2, #16
 8002a52:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002a54:	4b0a      	ldr	r3, [pc, #40]	; (8002a80 <MX_SPI1_Init+0x64>)
 8002a56:	2200      	movs	r2, #0
 8002a58:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002a5a:	4b09      	ldr	r3, [pc, #36]	; (8002a80 <MX_SPI1_Init+0x64>)
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002a60:	4b07      	ldr	r3, [pc, #28]	; (8002a80 <MX_SPI1_Init+0x64>)
 8002a62:	2200      	movs	r2, #0
 8002a64:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002a66:	4b06      	ldr	r3, [pc, #24]	; (8002a80 <MX_SPI1_Init+0x64>)
 8002a68:	220a      	movs	r2, #10
 8002a6a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002a6c:	4804      	ldr	r0, [pc, #16]	; (8002a80 <MX_SPI1_Init+0x64>)
 8002a6e:	f002 fb45 	bl	80050fc <HAL_SPI_Init>
 8002a72:	4603      	mov	r3, r0
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d001      	beq.n	8002a7c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002a78:	f7ff fe12 	bl	80026a0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002a7c:	bf00      	nop
 8002a7e:	bd80      	pop	{r7, pc}
 8002a80:	20003b20 	.word	0x20003b20
 8002a84:	40013000 	.word	0x40013000

08002a88 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8002a8c:	4b17      	ldr	r3, [pc, #92]	; (8002aec <MX_SPI2_Init+0x64>)
 8002a8e:	4a18      	ldr	r2, [pc, #96]	; (8002af0 <MX_SPI2_Init+0x68>)
 8002a90:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002a92:	4b16      	ldr	r3, [pc, #88]	; (8002aec <MX_SPI2_Init+0x64>)
 8002a94:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002a98:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002a9a:	4b14      	ldr	r3, [pc, #80]	; (8002aec <MX_SPI2_Init+0x64>)
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002aa0:	4b12      	ldr	r3, [pc, #72]	; (8002aec <MX_SPI2_Init+0x64>)
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002aa6:	4b11      	ldr	r3, [pc, #68]	; (8002aec <MX_SPI2_Init+0x64>)
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002aac:	4b0f      	ldr	r3, [pc, #60]	; (8002aec <MX_SPI2_Init+0x64>)
 8002aae:	2200      	movs	r2, #0
 8002ab0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002ab2:	4b0e      	ldr	r3, [pc, #56]	; (8002aec <MX_SPI2_Init+0x64>)
 8002ab4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ab8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8002aba:	4b0c      	ldr	r3, [pc, #48]	; (8002aec <MX_SPI2_Init+0x64>)
 8002abc:	2210      	movs	r2, #16
 8002abe:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002ac0:	4b0a      	ldr	r3, [pc, #40]	; (8002aec <MX_SPI2_Init+0x64>)
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002ac6:	4b09      	ldr	r3, [pc, #36]	; (8002aec <MX_SPI2_Init+0x64>)
 8002ac8:	2200      	movs	r2, #0
 8002aca:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002acc:	4b07      	ldr	r3, [pc, #28]	; (8002aec <MX_SPI2_Init+0x64>)
 8002ace:	2200      	movs	r2, #0
 8002ad0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8002ad2:	4b06      	ldr	r3, [pc, #24]	; (8002aec <MX_SPI2_Init+0x64>)
 8002ad4:	220a      	movs	r2, #10
 8002ad6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002ad8:	4804      	ldr	r0, [pc, #16]	; (8002aec <MX_SPI2_Init+0x64>)
 8002ada:	f002 fb0f 	bl	80050fc <HAL_SPI_Init>
 8002ade:	4603      	mov	r3, r0
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d001      	beq.n	8002ae8 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8002ae4:	f7ff fddc 	bl	80026a0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002ae8:	bf00      	nop
 8002aea:	bd80      	pop	{r7, pc}
 8002aec:	20003b78 	.word	0x20003b78
 8002af0:	40003800 	.word	0x40003800

08002af4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b08c      	sub	sp, #48	; 0x30
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002afc:	f107 031c 	add.w	r3, r7, #28
 8002b00:	2200      	movs	r2, #0
 8002b02:	601a      	str	r2, [r3, #0]
 8002b04:	605a      	str	r2, [r3, #4]
 8002b06:	609a      	str	r2, [r3, #8]
 8002b08:	60da      	str	r2, [r3, #12]
 8002b0a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a32      	ldr	r2, [pc, #200]	; (8002bdc <HAL_SPI_MspInit+0xe8>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d12c      	bne.n	8002b70 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002b16:	2300      	movs	r3, #0
 8002b18:	61bb      	str	r3, [r7, #24]
 8002b1a:	4b31      	ldr	r3, [pc, #196]	; (8002be0 <HAL_SPI_MspInit+0xec>)
 8002b1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b1e:	4a30      	ldr	r2, [pc, #192]	; (8002be0 <HAL_SPI_MspInit+0xec>)
 8002b20:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002b24:	6453      	str	r3, [r2, #68]	; 0x44
 8002b26:	4b2e      	ldr	r3, [pc, #184]	; (8002be0 <HAL_SPI_MspInit+0xec>)
 8002b28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b2a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b2e:	61bb      	str	r3, [r7, #24]
 8002b30:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b32:	2300      	movs	r3, #0
 8002b34:	617b      	str	r3, [r7, #20]
 8002b36:	4b2a      	ldr	r3, [pc, #168]	; (8002be0 <HAL_SPI_MspInit+0xec>)
 8002b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b3a:	4a29      	ldr	r2, [pc, #164]	; (8002be0 <HAL_SPI_MspInit+0xec>)
 8002b3c:	f043 0301 	orr.w	r3, r3, #1
 8002b40:	6313      	str	r3, [r2, #48]	; 0x30
 8002b42:	4b27      	ldr	r3, [pc, #156]	; (8002be0 <HAL_SPI_MspInit+0xec>)
 8002b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b46:	f003 0301 	and.w	r3, r3, #1
 8002b4a:	617b      	str	r3, [r7, #20]
 8002b4c:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002b4e:	23e0      	movs	r3, #224	; 0xe0
 8002b50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b52:	2302      	movs	r3, #2
 8002b54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b56:	2300      	movs	r3, #0
 8002b58:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b5a:	2303      	movs	r3, #3
 8002b5c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002b5e:	2305      	movs	r3, #5
 8002b60:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b62:	f107 031c 	add.w	r3, r7, #28
 8002b66:	4619      	mov	r1, r3
 8002b68:	481e      	ldr	r0, [pc, #120]	; (8002be4 <HAL_SPI_MspInit+0xf0>)
 8002b6a:	f001 fca1 	bl	80044b0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8002b6e:	e031      	b.n	8002bd4 <HAL_SPI_MspInit+0xe0>
  else if(spiHandle->Instance==SPI2)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4a1c      	ldr	r2, [pc, #112]	; (8002be8 <HAL_SPI_MspInit+0xf4>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d12c      	bne.n	8002bd4 <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	613b      	str	r3, [r7, #16]
 8002b7e:	4b18      	ldr	r3, [pc, #96]	; (8002be0 <HAL_SPI_MspInit+0xec>)
 8002b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b82:	4a17      	ldr	r2, [pc, #92]	; (8002be0 <HAL_SPI_MspInit+0xec>)
 8002b84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b88:	6413      	str	r3, [r2, #64]	; 0x40
 8002b8a:	4b15      	ldr	r3, [pc, #84]	; (8002be0 <HAL_SPI_MspInit+0xec>)
 8002b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b92:	613b      	str	r3, [r7, #16]
 8002b94:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b96:	2300      	movs	r3, #0
 8002b98:	60fb      	str	r3, [r7, #12]
 8002b9a:	4b11      	ldr	r3, [pc, #68]	; (8002be0 <HAL_SPI_MspInit+0xec>)
 8002b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b9e:	4a10      	ldr	r2, [pc, #64]	; (8002be0 <HAL_SPI_MspInit+0xec>)
 8002ba0:	f043 0302 	orr.w	r3, r3, #2
 8002ba4:	6313      	str	r3, [r2, #48]	; 0x30
 8002ba6:	4b0e      	ldr	r3, [pc, #56]	; (8002be0 <HAL_SPI_MspInit+0xec>)
 8002ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002baa:	f003 0302 	and.w	r3, r3, #2
 8002bae:	60fb      	str	r3, [r7, #12]
 8002bb0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_15;
 8002bb2:	f44f 4344 	mov.w	r3, #50176	; 0xc400
 8002bb6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bb8:	2302      	movs	r3, #2
 8002bba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bc0:	2303      	movs	r3, #3
 8002bc2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002bc4:	2305      	movs	r3, #5
 8002bc6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bc8:	f107 031c 	add.w	r3, r7, #28
 8002bcc:	4619      	mov	r1, r3
 8002bce:	4807      	ldr	r0, [pc, #28]	; (8002bec <HAL_SPI_MspInit+0xf8>)
 8002bd0:	f001 fc6e 	bl	80044b0 <HAL_GPIO_Init>
}
 8002bd4:	bf00      	nop
 8002bd6:	3730      	adds	r7, #48	; 0x30
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	bd80      	pop	{r7, pc}
 8002bdc:	40013000 	.word	0x40013000
 8002be0:	40023800 	.word	0x40023800
 8002be4:	40020000 	.word	0x40020000
 8002be8:	40003800 	.word	0x40003800
 8002bec:	40020400 	.word	0x40020400

08002bf0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	b083      	sub	sp, #12
 8002bf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	607b      	str	r3, [r7, #4]
 8002bfa:	4b10      	ldr	r3, [pc, #64]	; (8002c3c <HAL_MspInit+0x4c>)
 8002bfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bfe:	4a0f      	ldr	r2, [pc, #60]	; (8002c3c <HAL_MspInit+0x4c>)
 8002c00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c04:	6453      	str	r3, [r2, #68]	; 0x44
 8002c06:	4b0d      	ldr	r3, [pc, #52]	; (8002c3c <HAL_MspInit+0x4c>)
 8002c08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c0e:	607b      	str	r3, [r7, #4]
 8002c10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c12:	2300      	movs	r3, #0
 8002c14:	603b      	str	r3, [r7, #0]
 8002c16:	4b09      	ldr	r3, [pc, #36]	; (8002c3c <HAL_MspInit+0x4c>)
 8002c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c1a:	4a08      	ldr	r2, [pc, #32]	; (8002c3c <HAL_MspInit+0x4c>)
 8002c1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c20:	6413      	str	r3, [r2, #64]	; 0x40
 8002c22:	4b06      	ldr	r3, [pc, #24]	; (8002c3c <HAL_MspInit+0x4c>)
 8002c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c2a:	603b      	str	r3, [r7, #0]
 8002c2c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002c2e:	bf00      	nop
 8002c30:	370c      	adds	r7, #12
 8002c32:	46bd      	mov	sp, r7
 8002c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c38:	4770      	bx	lr
 8002c3a:	bf00      	nop
 8002c3c:	40023800 	.word	0x40023800

08002c40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c40:	b480      	push	{r7}
 8002c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002c44:	e7fe      	b.n	8002c44 <NMI_Handler+0x4>

08002c46 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c46:	b480      	push	{r7}
 8002c48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c4a:	e7fe      	b.n	8002c4a <HardFault_Handler+0x4>

08002c4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002c50:	e7fe      	b.n	8002c50 <MemManage_Handler+0x4>

08002c52 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002c52:	b480      	push	{r7}
 8002c54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002c56:	e7fe      	b.n	8002c56 <BusFault_Handler+0x4>

08002c58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002c5c:	e7fe      	b.n	8002c5c <UsageFault_Handler+0x4>

08002c5e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002c5e:	b480      	push	{r7}
 8002c60:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002c62:	bf00      	nop
 8002c64:	46bd      	mov	sp, r7
 8002c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6a:	4770      	bx	lr

08002c6c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002c70:	bf00      	nop
 8002c72:	46bd      	mov	sp, r7
 8002c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c78:	4770      	bx	lr

08002c7a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002c7a:	b480      	push	{r7}
 8002c7c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002c7e:	bf00      	nop
 8002c80:	46bd      	mov	sp, r7
 8002c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c86:	4770      	bx	lr

08002c88 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	if(Timer1 > 0)
 8002c8c:	4b0b      	ldr	r3, [pc, #44]	; (8002cbc <SysTick_Handler+0x34>)
 8002c8e:	881b      	ldrh	r3, [r3, #0]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d005      	beq.n	8002ca0 <SysTick_Handler+0x18>
		Timer1--;
 8002c94:	4b09      	ldr	r3, [pc, #36]	; (8002cbc <SysTick_Handler+0x34>)
 8002c96:	881b      	ldrh	r3, [r3, #0]
 8002c98:	3b01      	subs	r3, #1
 8002c9a:	b29a      	uxth	r2, r3
 8002c9c:	4b07      	ldr	r3, [pc, #28]	; (8002cbc <SysTick_Handler+0x34>)
 8002c9e:	801a      	strh	r2, [r3, #0]

	if(Timer2 > 0)
 8002ca0:	4b07      	ldr	r3, [pc, #28]	; (8002cc0 <SysTick_Handler+0x38>)
 8002ca2:	881b      	ldrh	r3, [r3, #0]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d005      	beq.n	8002cb4 <SysTick_Handler+0x2c>
		Timer2--;
 8002ca8:	4b05      	ldr	r3, [pc, #20]	; (8002cc0 <SysTick_Handler+0x38>)
 8002caa:	881b      	ldrh	r3, [r3, #0]
 8002cac:	3b01      	subs	r3, #1
 8002cae:	b29a      	uxth	r2, r3
 8002cb0:	4b03      	ldr	r3, [pc, #12]	; (8002cc0 <SysTick_Handler+0x38>)
 8002cb2:	801a      	strh	r2, [r3, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002cb4:	f000 fb44 	bl	8003340 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002cb8:	bf00      	nop
 8002cba:	bd80      	pop	{r7, pc}
 8002cbc:	20003294 	.word	0x20003294
 8002cc0:	20003296 	.word	0x20003296

08002cc4 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SW_Pin);
 8002cc8:	2008      	movs	r0, #8
 8002cca:	f001 fda7 	bl	800481c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8002cce:	bf00      	nop
 8002cd0:	bd80      	pop	{r7, pc}
	...

08002cd4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002cd8:	4802      	ldr	r0, [pc, #8]	; (8002ce4 <TIM3_IRQHandler+0x10>)
 8002cda:	f003 f93f 	bl	8005f5c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002cde:	bf00      	nop
 8002ce0:	bd80      	pop	{r7, pc}
 8002ce2:	bf00      	nop
 8002ce4:	20003c1c 	.word	0x20003c1c

08002ce8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002cec:	4802      	ldr	r0, [pc, #8]	; (8002cf8 <DMA2_Stream0_IRQHandler+0x10>)
 8002cee:	f001 f975 	bl	8003fdc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002cf2:	bf00      	nop
 8002cf4:	bd80      	pop	{r7, pc}
 8002cf6:	bf00      	nop
 8002cf8:	20003234 	.word	0x20003234

08002cfc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b086      	sub	sp, #24
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002d04:	4a14      	ldr	r2, [pc, #80]	; (8002d58 <_sbrk+0x5c>)
 8002d06:	4b15      	ldr	r3, [pc, #84]	; (8002d5c <_sbrk+0x60>)
 8002d08:	1ad3      	subs	r3, r2, r3
 8002d0a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002d0c:	697b      	ldr	r3, [r7, #20]
 8002d0e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002d10:	4b13      	ldr	r3, [pc, #76]	; (8002d60 <_sbrk+0x64>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d102      	bne.n	8002d1e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002d18:	4b11      	ldr	r3, [pc, #68]	; (8002d60 <_sbrk+0x64>)
 8002d1a:	4a12      	ldr	r2, [pc, #72]	; (8002d64 <_sbrk+0x68>)
 8002d1c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002d1e:	4b10      	ldr	r3, [pc, #64]	; (8002d60 <_sbrk+0x64>)
 8002d20:	681a      	ldr	r2, [r3, #0]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	4413      	add	r3, r2
 8002d26:	693a      	ldr	r2, [r7, #16]
 8002d28:	429a      	cmp	r2, r3
 8002d2a:	d207      	bcs.n	8002d3c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002d2c:	f007 ff60 	bl	800abf0 <__errno>
 8002d30:	4603      	mov	r3, r0
 8002d32:	220c      	movs	r2, #12
 8002d34:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002d36:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002d3a:	e009      	b.n	8002d50 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002d3c:	4b08      	ldr	r3, [pc, #32]	; (8002d60 <_sbrk+0x64>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002d42:	4b07      	ldr	r3, [pc, #28]	; (8002d60 <_sbrk+0x64>)
 8002d44:	681a      	ldr	r2, [r3, #0]
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	4413      	add	r3, r2
 8002d4a:	4a05      	ldr	r2, [pc, #20]	; (8002d60 <_sbrk+0x64>)
 8002d4c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
}
 8002d50:	4618      	mov	r0, r3
 8002d52:	3718      	adds	r7, #24
 8002d54:	46bd      	mov	sp, r7
 8002d56:	bd80      	pop	{r7, pc}
 8002d58:	20010000 	.word	0x20010000
 8002d5c:	00000400 	.word	0x00000400
 8002d60:	20003bd0 	.word	0x20003bd0
 8002d64:	20003f88 	.word	0x20003f88

08002d68 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002d6c:	4b06      	ldr	r3, [pc, #24]	; (8002d88 <SystemInit+0x20>)
 8002d6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d72:	4a05      	ldr	r2, [pc, #20]	; (8002d88 <SystemInit+0x20>)
 8002d74:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002d78:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002d7c:	bf00      	nop
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d84:	4770      	bx	lr
 8002d86:	bf00      	nop
 8002d88:	e000ed00 	.word	0xe000ed00

08002d8c <MX_TIM2_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim5;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b086      	sub	sp, #24
 8002d90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002d92:	f107 0308 	add.w	r3, r7, #8
 8002d96:	2200      	movs	r2, #0
 8002d98:	601a      	str	r2, [r3, #0]
 8002d9a:	605a      	str	r2, [r3, #4]
 8002d9c:	609a      	str	r2, [r3, #8]
 8002d9e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002da0:	463b      	mov	r3, r7
 8002da2:	2200      	movs	r2, #0
 8002da4:	601a      	str	r2, [r3, #0]
 8002da6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002da8:	4b1d      	ldr	r3, [pc, #116]	; (8002e20 <MX_TIM2_Init+0x94>)
 8002daa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002dae:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 8002db0:	4b1b      	ldr	r3, [pc, #108]	; (8002e20 <MX_TIM2_Init+0x94>)
 8002db2:	2253      	movs	r2, #83	; 0x53
 8002db4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002db6:	4b1a      	ldr	r3, [pc, #104]	; (8002e20 <MX_TIM2_Init+0x94>)
 8002db8:	2200      	movs	r2, #0
 8002dba:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8002dbc:	4b18      	ldr	r3, [pc, #96]	; (8002e20 <MX_TIM2_Init+0x94>)
 8002dbe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002dc2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002dc4:	4b16      	ldr	r3, [pc, #88]	; (8002e20 <MX_TIM2_Init+0x94>)
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002dca:	4b15      	ldr	r3, [pc, #84]	; (8002e20 <MX_TIM2_Init+0x94>)
 8002dcc:	2200      	movs	r2, #0
 8002dce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002dd0:	4813      	ldr	r0, [pc, #76]	; (8002e20 <MX_TIM2_Init+0x94>)
 8002dd2:	f002 fdc5 	bl	8005960 <HAL_TIM_Base_Init>
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d001      	beq.n	8002de0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002ddc:	f7ff fc60 	bl	80026a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002de0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002de4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002de6:	f107 0308 	add.w	r3, r7, #8
 8002dea:	4619      	mov	r1, r3
 8002dec:	480c      	ldr	r0, [pc, #48]	; (8002e20 <MX_TIM2_Init+0x94>)
 8002dee:	f003 fa7f 	bl	80062f0 <HAL_TIM_ConfigClockSource>
 8002df2:	4603      	mov	r3, r0
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d001      	beq.n	8002dfc <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002df8:	f7ff fc52 	bl	80026a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e00:	2300      	movs	r3, #0
 8002e02:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002e04:	463b      	mov	r3, r7
 8002e06:	4619      	mov	r1, r3
 8002e08:	4805      	ldr	r0, [pc, #20]	; (8002e20 <MX_TIM2_Init+0x94>)
 8002e0a:	f003 fe2d 	bl	8006a68 <HAL_TIMEx_MasterConfigSynchronization>
 8002e0e:	4603      	mov	r3, r0
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d001      	beq.n	8002e18 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002e14:	f7ff fc44 	bl	80026a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002e18:	bf00      	nop
 8002e1a:	3718      	adds	r7, #24
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	bd80      	pop	{r7, pc}
 8002e20:	20003bd4 	.word	0x20003bd4

08002e24 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b08c      	sub	sp, #48	; 0x30
 8002e28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002e2a:	f107 030c 	add.w	r3, r7, #12
 8002e2e:	2224      	movs	r2, #36	; 0x24
 8002e30:	2100      	movs	r1, #0
 8002e32:	4618      	mov	r0, r3
 8002e34:	f007 ff06 	bl	800ac44 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e38:	1d3b      	adds	r3, r7, #4
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	601a      	str	r2, [r3, #0]
 8002e3e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002e40:	4b20      	ldr	r3, [pc, #128]	; (8002ec4 <MX_TIM3_Init+0xa0>)
 8002e42:	4a21      	ldr	r2, [pc, #132]	; (8002ec8 <MX_TIM3_Init+0xa4>)
 8002e44:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002e46:	4b1f      	ldr	r3, [pc, #124]	; (8002ec4 <MX_TIM3_Init+0xa0>)
 8002e48:	2200      	movs	r2, #0
 8002e4a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e4c:	4b1d      	ldr	r3, [pc, #116]	; (8002ec4 <MX_TIM3_Init+0xa0>)
 8002e4e:	2200      	movs	r2, #0
 8002e50:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002e52:	4b1c      	ldr	r3, [pc, #112]	; (8002ec4 <MX_TIM3_Init+0xa0>)
 8002e54:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002e58:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e5a:	4b1a      	ldr	r3, [pc, #104]	; (8002ec4 <MX_TIM3_Init+0xa0>)
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e60:	4b18      	ldr	r3, [pc, #96]	; (8002ec4 <MX_TIM3_Init+0xa0>)
 8002e62:	2200      	movs	r2, #0
 8002e64:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8002e66:	2301      	movs	r3, #1
 8002e68:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8002e6a:	2302      	movs	r3, #2
 8002e6c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002e6e:	2301      	movs	r3, #1
 8002e70:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002e72:	2300      	movs	r3, #0
 8002e74:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002e76:	2300      	movs	r3, #0
 8002e78:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8002e7a:	2302      	movs	r3, #2
 8002e7c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002e82:	2300      	movs	r3, #0
 8002e84:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002e86:	2300      	movs	r3, #0
 8002e88:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8002e8a:	f107 030c 	add.w	r3, r7, #12
 8002e8e:	4619      	mov	r1, r3
 8002e90:	480c      	ldr	r0, [pc, #48]	; (8002ec4 <MX_TIM3_Init+0xa0>)
 8002e92:	f002 ff0f 	bl	8005cb4 <HAL_TIM_Encoder_Init>
 8002e96:	4603      	mov	r3, r0
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d001      	beq.n	8002ea0 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8002e9c:	f7ff fc00 	bl	80026a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002ea8:	1d3b      	adds	r3, r7, #4
 8002eaa:	4619      	mov	r1, r3
 8002eac:	4805      	ldr	r0, [pc, #20]	; (8002ec4 <MX_TIM3_Init+0xa0>)
 8002eae:	f003 fddb 	bl	8006a68 <HAL_TIMEx_MasterConfigSynchronization>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d001      	beq.n	8002ebc <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8002eb8:	f7ff fbf2 	bl	80026a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002ebc:	bf00      	nop
 8002ebe:	3730      	adds	r7, #48	; 0x30
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bd80      	pop	{r7, pc}
 8002ec4:	20003c1c 	.word	0x20003c1c
 8002ec8:	40000400 	.word	0x40000400

08002ecc <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b08a      	sub	sp, #40	; 0x28
 8002ed0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ed2:	f107 0320 	add.w	r3, r7, #32
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	601a      	str	r2, [r3, #0]
 8002eda:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002edc:	1d3b      	adds	r3, r7, #4
 8002ede:	2200      	movs	r2, #0
 8002ee0:	601a      	str	r2, [r3, #0]
 8002ee2:	605a      	str	r2, [r3, #4]
 8002ee4:	609a      	str	r2, [r3, #8]
 8002ee6:	60da      	str	r2, [r3, #12]
 8002ee8:	611a      	str	r2, [r3, #16]
 8002eea:	615a      	str	r2, [r3, #20]
 8002eec:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002eee:	4b20      	ldr	r3, [pc, #128]	; (8002f70 <MX_TIM4_Init+0xa4>)
 8002ef0:	4a20      	ldr	r2, [pc, #128]	; (8002f74 <MX_TIM4_Init+0xa8>)
 8002ef2:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 83;
 8002ef4:	4b1e      	ldr	r3, [pc, #120]	; (8002f70 <MX_TIM4_Init+0xa4>)
 8002ef6:	2253      	movs	r2, #83	; 0x53
 8002ef8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002efa:	4b1d      	ldr	r3, [pc, #116]	; (8002f70 <MX_TIM4_Init+0xa4>)
 8002efc:	2200      	movs	r2, #0
 8002efe:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 320;
 8002f00:	4b1b      	ldr	r3, [pc, #108]	; (8002f70 <MX_TIM4_Init+0xa4>)
 8002f02:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002f06:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f08:	4b19      	ldr	r3, [pc, #100]	; (8002f70 <MX_TIM4_Init+0xa4>)
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f0e:	4b18      	ldr	r3, [pc, #96]	; (8002f70 <MX_TIM4_Init+0xa4>)
 8002f10:	2200      	movs	r2, #0
 8002f12:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002f14:	4816      	ldr	r0, [pc, #88]	; (8002f70 <MX_TIM4_Init+0xa4>)
 8002f16:	f002 fdcd 	bl	8005ab4 <HAL_TIM_PWM_Init>
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d001      	beq.n	8002f24 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8002f20:	f7ff fbbe 	bl	80026a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f24:	2300      	movs	r3, #0
 8002f26:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f28:	2300      	movs	r3, #0
 8002f2a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002f2c:	f107 0320 	add.w	r3, r7, #32
 8002f30:	4619      	mov	r1, r3
 8002f32:	480f      	ldr	r0, [pc, #60]	; (8002f70 <MX_TIM4_Init+0xa4>)
 8002f34:	f003 fd98 	bl	8006a68 <HAL_TIMEx_MasterConfigSynchronization>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d001      	beq.n	8002f42 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8002f3e:	f7ff fbaf 	bl	80026a0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002f42:	2360      	movs	r3, #96	; 0x60
 8002f44:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1;
 8002f46:	2301      	movs	r3, #1
 8002f48:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002f4e:	2300      	movs	r3, #0
 8002f50:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002f52:	1d3b      	adds	r3, r7, #4
 8002f54:	220c      	movs	r2, #12
 8002f56:	4619      	mov	r1, r3
 8002f58:	4805      	ldr	r0, [pc, #20]	; (8002f70 <MX_TIM4_Init+0xa4>)
 8002f5a:	f003 f907 	bl	800616c <HAL_TIM_PWM_ConfigChannel>
 8002f5e:	4603      	mov	r3, r0
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d001      	beq.n	8002f68 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8002f64:	f7ff fb9c 	bl	80026a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002f68:	bf00      	nop
 8002f6a:	3728      	adds	r7, #40	; 0x28
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	bd80      	pop	{r7, pc}
 8002f70:	20003c64 	.word	0x20003c64
 8002f74:	40000800 	.word	0x40000800

08002f78 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b086      	sub	sp, #24
 8002f7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002f7e:	f107 0308 	add.w	r3, r7, #8
 8002f82:	2200      	movs	r2, #0
 8002f84:	601a      	str	r2, [r3, #0]
 8002f86:	605a      	str	r2, [r3, #4]
 8002f88:	609a      	str	r2, [r3, #8]
 8002f8a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002f8c:	463b      	mov	r3, r7
 8002f8e:	2200      	movs	r2, #0
 8002f90:	601a      	str	r2, [r3, #0]
 8002f92:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002f94:	4b1d      	ldr	r3, [pc, #116]	; (800300c <MX_TIM5_Init+0x94>)
 8002f96:	4a1e      	ldr	r2, [pc, #120]	; (8003010 <MX_TIM5_Init+0x98>)
 8002f98:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 83;
 8002f9a:	4b1c      	ldr	r3, [pc, #112]	; (800300c <MX_TIM5_Init+0x94>)
 8002f9c:	2253      	movs	r2, #83	; 0x53
 8002f9e:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002fa0:	4b1a      	ldr	r3, [pc, #104]	; (800300c <MX_TIM5_Init+0x94>)
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8002fa6:	4b19      	ldr	r3, [pc, #100]	; (800300c <MX_TIM5_Init+0x94>)
 8002fa8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002fac:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002fae:	4b17      	ldr	r3, [pc, #92]	; (800300c <MX_TIM5_Init+0x94>)
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002fb4:	4b15      	ldr	r3, [pc, #84]	; (800300c <MX_TIM5_Init+0x94>)
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002fba:	4814      	ldr	r0, [pc, #80]	; (800300c <MX_TIM5_Init+0x94>)
 8002fbc:	f002 fcd0 	bl	8005960 <HAL_TIM_Base_Init>
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d001      	beq.n	8002fca <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 8002fc6:	f7ff fb6b 	bl	80026a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002fca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002fce:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8002fd0:	f107 0308 	add.w	r3, r7, #8
 8002fd4:	4619      	mov	r1, r3
 8002fd6:	480d      	ldr	r0, [pc, #52]	; (800300c <MX_TIM5_Init+0x94>)
 8002fd8:	f003 f98a 	bl	80062f0 <HAL_TIM_ConfigClockSource>
 8002fdc:	4603      	mov	r3, r0
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d001      	beq.n	8002fe6 <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 8002fe2:	f7ff fb5d 	bl	80026a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002fea:	2300      	movs	r3, #0
 8002fec:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002fee:	463b      	mov	r3, r7
 8002ff0:	4619      	mov	r1, r3
 8002ff2:	4806      	ldr	r0, [pc, #24]	; (800300c <MX_TIM5_Init+0x94>)
 8002ff4:	f003 fd38 	bl	8006a68 <HAL_TIMEx_MasterConfigSynchronization>
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d001      	beq.n	8003002 <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 8002ffe:	f7ff fb4f 	bl	80026a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8003002:	bf00      	nop
 8003004:	3718      	adds	r7, #24
 8003006:	46bd      	mov	sp, r7
 8003008:	bd80      	pop	{r7, pc}
 800300a:	bf00      	nop
 800300c:	20003cac 	.word	0x20003cac
 8003010:	40000c00 	.word	0x40000c00

08003014 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003014:	b480      	push	{r7}
 8003016:	b085      	sub	sp, #20
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003024:	d10e      	bne.n	8003044 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003026:	2300      	movs	r3, #0
 8003028:	60fb      	str	r3, [r7, #12]
 800302a:	4b13      	ldr	r3, [pc, #76]	; (8003078 <HAL_TIM_Base_MspInit+0x64>)
 800302c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800302e:	4a12      	ldr	r2, [pc, #72]	; (8003078 <HAL_TIM_Base_MspInit+0x64>)
 8003030:	f043 0301 	orr.w	r3, r3, #1
 8003034:	6413      	str	r3, [r2, #64]	; 0x40
 8003036:	4b10      	ldr	r3, [pc, #64]	; (8003078 <HAL_TIM_Base_MspInit+0x64>)
 8003038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800303a:	f003 0301 	and.w	r3, r3, #1
 800303e:	60fb      	str	r3, [r7, #12]
 8003040:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM5_CLK_ENABLE();
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8003042:	e012      	b.n	800306a <HAL_TIM_Base_MspInit+0x56>
  else if(tim_baseHandle->Instance==TIM5)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4a0c      	ldr	r2, [pc, #48]	; (800307c <HAL_TIM_Base_MspInit+0x68>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d10d      	bne.n	800306a <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800304e:	2300      	movs	r3, #0
 8003050:	60bb      	str	r3, [r7, #8]
 8003052:	4b09      	ldr	r3, [pc, #36]	; (8003078 <HAL_TIM_Base_MspInit+0x64>)
 8003054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003056:	4a08      	ldr	r2, [pc, #32]	; (8003078 <HAL_TIM_Base_MspInit+0x64>)
 8003058:	f043 0308 	orr.w	r3, r3, #8
 800305c:	6413      	str	r3, [r2, #64]	; 0x40
 800305e:	4b06      	ldr	r3, [pc, #24]	; (8003078 <HAL_TIM_Base_MspInit+0x64>)
 8003060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003062:	f003 0308 	and.w	r3, r3, #8
 8003066:	60bb      	str	r3, [r7, #8]
 8003068:	68bb      	ldr	r3, [r7, #8]
}
 800306a:	bf00      	nop
 800306c:	3714      	adds	r7, #20
 800306e:	46bd      	mov	sp, r7
 8003070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003074:	4770      	bx	lr
 8003076:	bf00      	nop
 8003078:	40023800 	.word	0x40023800
 800307c:	40000c00 	.word	0x40000c00

08003080 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b08a      	sub	sp, #40	; 0x28
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003088:	f107 0314 	add.w	r3, r7, #20
 800308c:	2200      	movs	r2, #0
 800308e:	601a      	str	r2, [r3, #0]
 8003090:	605a      	str	r2, [r3, #4]
 8003092:	609a      	str	r2, [r3, #8]
 8003094:	60da      	str	r2, [r3, #12]
 8003096:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4a1d      	ldr	r2, [pc, #116]	; (8003114 <HAL_TIM_Encoder_MspInit+0x94>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d133      	bne.n	800310a <HAL_TIM_Encoder_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80030a2:	2300      	movs	r3, #0
 80030a4:	613b      	str	r3, [r7, #16]
 80030a6:	4b1c      	ldr	r3, [pc, #112]	; (8003118 <HAL_TIM_Encoder_MspInit+0x98>)
 80030a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030aa:	4a1b      	ldr	r2, [pc, #108]	; (8003118 <HAL_TIM_Encoder_MspInit+0x98>)
 80030ac:	f043 0302 	orr.w	r3, r3, #2
 80030b0:	6413      	str	r3, [r2, #64]	; 0x40
 80030b2:	4b19      	ldr	r3, [pc, #100]	; (8003118 <HAL_TIM_Encoder_MspInit+0x98>)
 80030b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030b6:	f003 0302 	and.w	r3, r3, #2
 80030ba:	613b      	str	r3, [r7, #16]
 80030bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80030be:	2300      	movs	r3, #0
 80030c0:	60fb      	str	r3, [r7, #12]
 80030c2:	4b15      	ldr	r3, [pc, #84]	; (8003118 <HAL_TIM_Encoder_MspInit+0x98>)
 80030c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030c6:	4a14      	ldr	r2, [pc, #80]	; (8003118 <HAL_TIM_Encoder_MspInit+0x98>)
 80030c8:	f043 0302 	orr.w	r3, r3, #2
 80030cc:	6313      	str	r3, [r2, #48]	; 0x30
 80030ce:	4b12      	ldr	r3, [pc, #72]	; (8003118 <HAL_TIM_Encoder_MspInit+0x98>)
 80030d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030d2:	f003 0302 	and.w	r3, r3, #2
 80030d6:	60fb      	str	r3, [r7, #12]
 80030d8:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80030da:	2330      	movs	r3, #48	; 0x30
 80030dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030de:	2302      	movs	r3, #2
 80030e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030e2:	2300      	movs	r3, #0
 80030e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030e6:	2300      	movs	r3, #0
 80030e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80030ea:	2302      	movs	r3, #2
 80030ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030ee:	f107 0314 	add.w	r3, r7, #20
 80030f2:	4619      	mov	r1, r3
 80030f4:	4809      	ldr	r0, [pc, #36]	; (800311c <HAL_TIM_Encoder_MspInit+0x9c>)
 80030f6:	f001 f9db 	bl	80044b0 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80030fa:	2200      	movs	r2, #0
 80030fc:	2100      	movs	r1, #0
 80030fe:	201d      	movs	r0, #29
 8003100:	f000 fe2f 	bl	8003d62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003104:	201d      	movs	r0, #29
 8003106:	f000 fe48 	bl	8003d9a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800310a:	bf00      	nop
 800310c:	3728      	adds	r7, #40	; 0x28
 800310e:	46bd      	mov	sp, r7
 8003110:	bd80      	pop	{r7, pc}
 8003112:	bf00      	nop
 8003114:	40000400 	.word	0x40000400
 8003118:	40023800 	.word	0x40023800
 800311c:	40020400 	.word	0x40020400

08003120 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8003120:	b480      	push	{r7}
 8003122:	b085      	sub	sp, #20
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM4)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4a0b      	ldr	r2, [pc, #44]	; (800315c <HAL_TIM_PWM_MspInit+0x3c>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d10d      	bne.n	800314e <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003132:	2300      	movs	r3, #0
 8003134:	60fb      	str	r3, [r7, #12]
 8003136:	4b0a      	ldr	r3, [pc, #40]	; (8003160 <HAL_TIM_PWM_MspInit+0x40>)
 8003138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800313a:	4a09      	ldr	r2, [pc, #36]	; (8003160 <HAL_TIM_PWM_MspInit+0x40>)
 800313c:	f043 0304 	orr.w	r3, r3, #4
 8003140:	6413      	str	r3, [r2, #64]	; 0x40
 8003142:	4b07      	ldr	r3, [pc, #28]	; (8003160 <HAL_TIM_PWM_MspInit+0x40>)
 8003144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003146:	f003 0304 	and.w	r3, r3, #4
 800314a:	60fb      	str	r3, [r7, #12]
 800314c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 800314e:	bf00      	nop
 8003150:	3714      	adds	r7, #20
 8003152:	46bd      	mov	sp, r7
 8003154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003158:	4770      	bx	lr
 800315a:	bf00      	nop
 800315c:	40000800 	.word	0x40000800
 8003160:	40023800 	.word	0x40023800

08003164 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003168:	4b11      	ldr	r3, [pc, #68]	; (80031b0 <MX_USART2_UART_Init+0x4c>)
 800316a:	4a12      	ldr	r2, [pc, #72]	; (80031b4 <MX_USART2_UART_Init+0x50>)
 800316c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800316e:	4b10      	ldr	r3, [pc, #64]	; (80031b0 <MX_USART2_UART_Init+0x4c>)
 8003170:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003174:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003176:	4b0e      	ldr	r3, [pc, #56]	; (80031b0 <MX_USART2_UART_Init+0x4c>)
 8003178:	2200      	movs	r2, #0
 800317a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800317c:	4b0c      	ldr	r3, [pc, #48]	; (80031b0 <MX_USART2_UART_Init+0x4c>)
 800317e:	2200      	movs	r2, #0
 8003180:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003182:	4b0b      	ldr	r3, [pc, #44]	; (80031b0 <MX_USART2_UART_Init+0x4c>)
 8003184:	2200      	movs	r2, #0
 8003186:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003188:	4b09      	ldr	r3, [pc, #36]	; (80031b0 <MX_USART2_UART_Init+0x4c>)
 800318a:	220c      	movs	r2, #12
 800318c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800318e:	4b08      	ldr	r3, [pc, #32]	; (80031b0 <MX_USART2_UART_Init+0x4c>)
 8003190:	2200      	movs	r2, #0
 8003192:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003194:	4b06      	ldr	r3, [pc, #24]	; (80031b0 <MX_USART2_UART_Init+0x4c>)
 8003196:	2200      	movs	r2, #0
 8003198:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800319a:	4805      	ldr	r0, [pc, #20]	; (80031b0 <MX_USART2_UART_Init+0x4c>)
 800319c:	f003 fce6 	bl	8006b6c <HAL_UART_Init>
 80031a0:	4603      	mov	r3, r0
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d001      	beq.n	80031aa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80031a6:	f7ff fa7b 	bl	80026a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80031aa:	bf00      	nop
 80031ac:	bd80      	pop	{r7, pc}
 80031ae:	bf00      	nop
 80031b0:	20003cf4 	.word	0x20003cf4
 80031b4:	40004400 	.word	0x40004400

080031b8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b08a      	sub	sp, #40	; 0x28
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031c0:	f107 0314 	add.w	r3, r7, #20
 80031c4:	2200      	movs	r2, #0
 80031c6:	601a      	str	r2, [r3, #0]
 80031c8:	605a      	str	r2, [r3, #4]
 80031ca:	609a      	str	r2, [r3, #8]
 80031cc:	60da      	str	r2, [r3, #12]
 80031ce:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a19      	ldr	r2, [pc, #100]	; (800323c <HAL_UART_MspInit+0x84>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d12b      	bne.n	8003232 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80031da:	2300      	movs	r3, #0
 80031dc:	613b      	str	r3, [r7, #16]
 80031de:	4b18      	ldr	r3, [pc, #96]	; (8003240 <HAL_UART_MspInit+0x88>)
 80031e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031e2:	4a17      	ldr	r2, [pc, #92]	; (8003240 <HAL_UART_MspInit+0x88>)
 80031e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80031e8:	6413      	str	r3, [r2, #64]	; 0x40
 80031ea:	4b15      	ldr	r3, [pc, #84]	; (8003240 <HAL_UART_MspInit+0x88>)
 80031ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031f2:	613b      	str	r3, [r7, #16]
 80031f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031f6:	2300      	movs	r3, #0
 80031f8:	60fb      	str	r3, [r7, #12]
 80031fa:	4b11      	ldr	r3, [pc, #68]	; (8003240 <HAL_UART_MspInit+0x88>)
 80031fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031fe:	4a10      	ldr	r2, [pc, #64]	; (8003240 <HAL_UART_MspInit+0x88>)
 8003200:	f043 0301 	orr.w	r3, r3, #1
 8003204:	6313      	str	r3, [r2, #48]	; 0x30
 8003206:	4b0e      	ldr	r3, [pc, #56]	; (8003240 <HAL_UART_MspInit+0x88>)
 8003208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800320a:	f003 0301 	and.w	r3, r3, #1
 800320e:	60fb      	str	r3, [r7, #12]
 8003210:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003212:	230c      	movs	r3, #12
 8003214:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003216:	2302      	movs	r3, #2
 8003218:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800321a:	2300      	movs	r3, #0
 800321c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800321e:	2303      	movs	r3, #3
 8003220:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003222:	2307      	movs	r3, #7
 8003224:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003226:	f107 0314 	add.w	r3, r7, #20
 800322a:	4619      	mov	r1, r3
 800322c:	4805      	ldr	r0, [pc, #20]	; (8003244 <HAL_UART_MspInit+0x8c>)
 800322e:	f001 f93f 	bl	80044b0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8003232:	bf00      	nop
 8003234:	3728      	adds	r7, #40	; 0x28
 8003236:	46bd      	mov	sp, r7
 8003238:	bd80      	pop	{r7, pc}
 800323a:	bf00      	nop
 800323c:	40004400 	.word	0x40004400
 8003240:	40023800 	.word	0x40023800
 8003244:	40020000 	.word	0x40020000

08003248 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003248:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003280 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800324c:	480d      	ldr	r0, [pc, #52]	; (8003284 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800324e:	490e      	ldr	r1, [pc, #56]	; (8003288 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003250:	4a0e      	ldr	r2, [pc, #56]	; (800328c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003252:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003254:	e002      	b.n	800325c <LoopCopyDataInit>

08003256 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003256:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003258:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800325a:	3304      	adds	r3, #4

0800325c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800325c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800325e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003260:	d3f9      	bcc.n	8003256 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003262:	4a0b      	ldr	r2, [pc, #44]	; (8003290 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003264:	4c0b      	ldr	r4, [pc, #44]	; (8003294 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003266:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003268:	e001      	b.n	800326e <LoopFillZerobss>

0800326a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800326a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800326c:	3204      	adds	r2, #4

0800326e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800326e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003270:	d3fb      	bcc.n	800326a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003272:	f7ff fd79 	bl	8002d68 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003276:	f007 fcc1 	bl	800abfc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800327a:	f7ff f843 	bl	8002304 <main>
  bx  lr    
 800327e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003280:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8003284:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003288:	20000138 	.word	0x20000138
  ldr r2, =_sidata
 800328c:	0800e184 	.word	0x0800e184
  ldr r2, =_sbss
 8003290:	20000138 	.word	0x20000138
  ldr r4, =_ebss
 8003294:	20003f88 	.word	0x20003f88

08003298 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003298:	e7fe      	b.n	8003298 <ADC_IRQHandler>
	...

0800329c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80032a0:	4b0e      	ldr	r3, [pc, #56]	; (80032dc <HAL_Init+0x40>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4a0d      	ldr	r2, [pc, #52]	; (80032dc <HAL_Init+0x40>)
 80032a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80032aa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80032ac:	4b0b      	ldr	r3, [pc, #44]	; (80032dc <HAL_Init+0x40>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4a0a      	ldr	r2, [pc, #40]	; (80032dc <HAL_Init+0x40>)
 80032b2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80032b6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80032b8:	4b08      	ldr	r3, [pc, #32]	; (80032dc <HAL_Init+0x40>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4a07      	ldr	r2, [pc, #28]	; (80032dc <HAL_Init+0x40>)
 80032be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032c2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80032c4:	2003      	movs	r0, #3
 80032c6:	f000 fd41 	bl	8003d4c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80032ca:	200f      	movs	r0, #15
 80032cc:	f000 f808 	bl	80032e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80032d0:	f7ff fc8e 	bl	8002bf0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80032d4:	2300      	movs	r3, #0
}
 80032d6:	4618      	mov	r0, r3
 80032d8:	bd80      	pop	{r7, pc}
 80032da:	bf00      	nop
 80032dc:	40023c00 	.word	0x40023c00

080032e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b082      	sub	sp, #8
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80032e8:	4b12      	ldr	r3, [pc, #72]	; (8003334 <HAL_InitTick+0x54>)
 80032ea:	681a      	ldr	r2, [r3, #0]
 80032ec:	4b12      	ldr	r3, [pc, #72]	; (8003338 <HAL_InitTick+0x58>)
 80032ee:	781b      	ldrb	r3, [r3, #0]
 80032f0:	4619      	mov	r1, r3
 80032f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80032f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80032fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80032fe:	4618      	mov	r0, r3
 8003300:	f000 fd59 	bl	8003db6 <HAL_SYSTICK_Config>
 8003304:	4603      	mov	r3, r0
 8003306:	2b00      	cmp	r3, #0
 8003308:	d001      	beq.n	800330e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800330a:	2301      	movs	r3, #1
 800330c:	e00e      	b.n	800332c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2b0f      	cmp	r3, #15
 8003312:	d80a      	bhi.n	800332a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003314:	2200      	movs	r2, #0
 8003316:	6879      	ldr	r1, [r7, #4]
 8003318:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800331c:	f000 fd21 	bl	8003d62 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003320:	4a06      	ldr	r2, [pc, #24]	; (800333c <HAL_InitTick+0x5c>)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003326:	2300      	movs	r3, #0
 8003328:	e000      	b.n	800332c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800332a:	2301      	movs	r3, #1
}
 800332c:	4618      	mov	r0, r3
 800332e:	3708      	adds	r7, #8
 8003330:	46bd      	mov	sp, r7
 8003332:	bd80      	pop	{r7, pc}
 8003334:	200000b4 	.word	0x200000b4
 8003338:	200000bc 	.word	0x200000bc
 800333c:	200000b8 	.word	0x200000b8

08003340 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003340:	b480      	push	{r7}
 8003342:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003344:	4b06      	ldr	r3, [pc, #24]	; (8003360 <HAL_IncTick+0x20>)
 8003346:	781b      	ldrb	r3, [r3, #0]
 8003348:	461a      	mov	r2, r3
 800334a:	4b06      	ldr	r3, [pc, #24]	; (8003364 <HAL_IncTick+0x24>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4413      	add	r3, r2
 8003350:	4a04      	ldr	r2, [pc, #16]	; (8003364 <HAL_IncTick+0x24>)
 8003352:	6013      	str	r3, [r2, #0]
}
 8003354:	bf00      	nop
 8003356:	46bd      	mov	sp, r7
 8003358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335c:	4770      	bx	lr
 800335e:	bf00      	nop
 8003360:	200000bc 	.word	0x200000bc
 8003364:	20003d38 	.word	0x20003d38

08003368 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003368:	b480      	push	{r7}
 800336a:	af00      	add	r7, sp, #0
  return uwTick;
 800336c:	4b03      	ldr	r3, [pc, #12]	; (800337c <HAL_GetTick+0x14>)
 800336e:	681b      	ldr	r3, [r3, #0]
}
 8003370:	4618      	mov	r0, r3
 8003372:	46bd      	mov	sp, r7
 8003374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003378:	4770      	bx	lr
 800337a:	bf00      	nop
 800337c:	20003d38 	.word	0x20003d38

08003380 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b084      	sub	sp, #16
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003388:	f7ff ffee 	bl	8003368 <HAL_GetTick>
 800338c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003398:	d005      	beq.n	80033a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800339a:	4b0a      	ldr	r3, [pc, #40]	; (80033c4 <HAL_Delay+0x44>)
 800339c:	781b      	ldrb	r3, [r3, #0]
 800339e:	461a      	mov	r2, r3
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	4413      	add	r3, r2
 80033a4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80033a6:	bf00      	nop
 80033a8:	f7ff ffde 	bl	8003368 <HAL_GetTick>
 80033ac:	4602      	mov	r2, r0
 80033ae:	68bb      	ldr	r3, [r7, #8]
 80033b0:	1ad3      	subs	r3, r2, r3
 80033b2:	68fa      	ldr	r2, [r7, #12]
 80033b4:	429a      	cmp	r2, r3
 80033b6:	d8f7      	bhi.n	80033a8 <HAL_Delay+0x28>
  {
  }
}
 80033b8:	bf00      	nop
 80033ba:	bf00      	nop
 80033bc:	3710      	adds	r7, #16
 80033be:	46bd      	mov	sp, r7
 80033c0:	bd80      	pop	{r7, pc}
 80033c2:	bf00      	nop
 80033c4:	200000bc 	.word	0x200000bc

080033c8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b084      	sub	sp, #16
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80033d0:	2300      	movs	r3, #0
 80033d2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d101      	bne.n	80033de <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80033da:	2301      	movs	r3, #1
 80033dc:	e033      	b.n	8003446 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d109      	bne.n	80033fa <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80033e6:	6878      	ldr	r0, [r7, #4]
 80033e8:	f7fd ffea 	bl	80013c0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2200      	movs	r2, #0
 80033f0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2200      	movs	r2, #0
 80033f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033fe:	f003 0310 	and.w	r3, r3, #16
 8003402:	2b00      	cmp	r3, #0
 8003404:	d118      	bne.n	8003438 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800340a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800340e:	f023 0302 	bic.w	r3, r3, #2
 8003412:	f043 0202 	orr.w	r2, r3, #2
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800341a:	6878      	ldr	r0, [r7, #4]
 800341c:	f000 fa48 	bl	80038b0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2200      	movs	r2, #0
 8003424:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800342a:	f023 0303 	bic.w	r3, r3, #3
 800342e:	f043 0201 	orr.w	r2, r3, #1
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	641a      	str	r2, [r3, #64]	; 0x40
 8003436:	e001      	b.n	800343c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003438:	2301      	movs	r3, #1
 800343a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2200      	movs	r2, #0
 8003440:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003444:	7bfb      	ldrb	r3, [r7, #15]
}
 8003446:	4618      	mov	r0, r3
 8003448:	3710      	adds	r7, #16
 800344a:	46bd      	mov	sp, r7
 800344c:	bd80      	pop	{r7, pc}
	...

08003450 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b086      	sub	sp, #24
 8003454:	af00      	add	r7, sp, #0
 8003456:	60f8      	str	r0, [r7, #12]
 8003458:	60b9      	str	r1, [r7, #8]
 800345a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 800345c:	2300      	movs	r3, #0
 800345e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003466:	2b01      	cmp	r3, #1
 8003468:	d101      	bne.n	800346e <HAL_ADC_Start_DMA+0x1e>
 800346a:	2302      	movs	r3, #2
 800346c:	e0ce      	b.n	800360c <HAL_ADC_Start_DMA+0x1bc>
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	2201      	movs	r2, #1
 8003472:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	689b      	ldr	r3, [r3, #8]
 800347c:	f003 0301 	and.w	r3, r3, #1
 8003480:	2b01      	cmp	r3, #1
 8003482:	d018      	beq.n	80034b6 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	689a      	ldr	r2, [r3, #8]
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f042 0201 	orr.w	r2, r2, #1
 8003492:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003494:	4b5f      	ldr	r3, [pc, #380]	; (8003614 <HAL_ADC_Start_DMA+0x1c4>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4a5f      	ldr	r2, [pc, #380]	; (8003618 <HAL_ADC_Start_DMA+0x1c8>)
 800349a:	fba2 2303 	umull	r2, r3, r2, r3
 800349e:	0c9a      	lsrs	r2, r3, #18
 80034a0:	4613      	mov	r3, r2
 80034a2:	005b      	lsls	r3, r3, #1
 80034a4:	4413      	add	r3, r2
 80034a6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80034a8:	e002      	b.n	80034b0 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80034aa:	693b      	ldr	r3, [r7, #16]
 80034ac:	3b01      	subs	r3, #1
 80034ae:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80034b0:	693b      	ldr	r3, [r7, #16]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d1f9      	bne.n	80034aa <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	689b      	ldr	r3, [r3, #8]
 80034bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80034c4:	d107      	bne.n	80034d6 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	689a      	ldr	r2, [r3, #8]
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80034d4:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	689b      	ldr	r3, [r3, #8]
 80034dc:	f003 0301 	and.w	r3, r3, #1
 80034e0:	2b01      	cmp	r3, #1
 80034e2:	f040 8086 	bne.w	80035f2 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ea:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80034ee:	f023 0301 	bic.w	r3, r3, #1
 80034f2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	685b      	ldr	r3, [r3, #4]
 8003500:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003504:	2b00      	cmp	r3, #0
 8003506:	d007      	beq.n	8003518 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800350c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003510:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800351c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003520:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003524:	d106      	bne.n	8003534 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800352a:	f023 0206 	bic.w	r2, r3, #6
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	645a      	str	r2, [r3, #68]	; 0x44
 8003532:	e002      	b.n	800353a <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	2200      	movs	r2, #0
 8003538:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	2200      	movs	r2, #0
 800353e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003542:	4b36      	ldr	r3, [pc, #216]	; (800361c <HAL_ADC_Start_DMA+0x1cc>)
 8003544:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800354a:	4a35      	ldr	r2, [pc, #212]	; (8003620 <HAL_ADC_Start_DMA+0x1d0>)
 800354c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003552:	4a34      	ldr	r2, [pc, #208]	; (8003624 <HAL_ADC_Start_DMA+0x1d4>)
 8003554:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800355a:	4a33      	ldr	r2, [pc, #204]	; (8003628 <HAL_ADC_Start_DMA+0x1d8>)
 800355c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003566:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	685a      	ldr	r2, [r3, #4]
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003576:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	689a      	ldr	r2, [r3, #8]
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003586:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	334c      	adds	r3, #76	; 0x4c
 8003592:	4619      	mov	r1, r3
 8003594:	68ba      	ldr	r2, [r7, #8]
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	f000 fcc8 	bl	8003f2c <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800359c:	697b      	ldr	r3, [r7, #20]
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	f003 031f 	and.w	r3, r3, #31
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d10f      	bne.n	80035c8 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	689b      	ldr	r3, [r3, #8]
 80035ae:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d129      	bne.n	800360a <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	689a      	ldr	r2, [r3, #8]
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80035c4:	609a      	str	r2, [r3, #8]
 80035c6:	e020      	b.n	800360a <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4a17      	ldr	r2, [pc, #92]	; (800362c <HAL_ADC_Start_DMA+0x1dc>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d11b      	bne.n	800360a <HAL_ADC_Start_DMA+0x1ba>
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	689b      	ldr	r3, [r3, #8]
 80035d8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d114      	bne.n	800360a <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	689a      	ldr	r2, [r3, #8]
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80035ee:	609a      	str	r2, [r3, #8]
 80035f0:	e00b      	b.n	800360a <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035f6:	f043 0210 	orr.w	r2, r3, #16
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003602:	f043 0201 	orr.w	r2, r3, #1
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800360a:	2300      	movs	r3, #0
}
 800360c:	4618      	mov	r0, r3
 800360e:	3718      	adds	r7, #24
 8003610:	46bd      	mov	sp, r7
 8003612:	bd80      	pop	{r7, pc}
 8003614:	200000b4 	.word	0x200000b4
 8003618:	431bde83 	.word	0x431bde83
 800361c:	40012300 	.word	0x40012300
 8003620:	08003aa9 	.word	0x08003aa9
 8003624:	08003b63 	.word	0x08003b63
 8003628:	08003b7f 	.word	0x08003b7f
 800362c:	40012000 	.word	0x40012000

08003630 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003630:	b480      	push	{r7}
 8003632:	b083      	sub	sp, #12
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8003638:	bf00      	nop
 800363a:	370c      	adds	r7, #12
 800363c:	46bd      	mov	sp, r7
 800363e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003642:	4770      	bx	lr

08003644 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003644:	b480      	push	{r7}
 8003646:	b083      	sub	sp, #12
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800364c:	bf00      	nop
 800364e:	370c      	adds	r7, #12
 8003650:	46bd      	mov	sp, r7
 8003652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003656:	4770      	bx	lr

08003658 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003658:	b480      	push	{r7}
 800365a:	b083      	sub	sp, #12
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003660:	bf00      	nop
 8003662:	370c      	adds	r7, #12
 8003664:	46bd      	mov	sp, r7
 8003666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366a:	4770      	bx	lr

0800366c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800366c:	b480      	push	{r7}
 800366e:	b085      	sub	sp, #20
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
 8003674:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003676:	2300      	movs	r3, #0
 8003678:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003680:	2b01      	cmp	r3, #1
 8003682:	d101      	bne.n	8003688 <HAL_ADC_ConfigChannel+0x1c>
 8003684:	2302      	movs	r3, #2
 8003686:	e105      	b.n	8003894 <HAL_ADC_ConfigChannel+0x228>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2201      	movs	r2, #1
 800368c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	2b09      	cmp	r3, #9
 8003696:	d925      	bls.n	80036e4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	68d9      	ldr	r1, [r3, #12]
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	b29b      	uxth	r3, r3
 80036a4:	461a      	mov	r2, r3
 80036a6:	4613      	mov	r3, r2
 80036a8:	005b      	lsls	r3, r3, #1
 80036aa:	4413      	add	r3, r2
 80036ac:	3b1e      	subs	r3, #30
 80036ae:	2207      	movs	r2, #7
 80036b0:	fa02 f303 	lsl.w	r3, r2, r3
 80036b4:	43da      	mvns	r2, r3
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	400a      	ands	r2, r1
 80036bc:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	68d9      	ldr	r1, [r3, #12]
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	689a      	ldr	r2, [r3, #8]
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	b29b      	uxth	r3, r3
 80036ce:	4618      	mov	r0, r3
 80036d0:	4603      	mov	r3, r0
 80036d2:	005b      	lsls	r3, r3, #1
 80036d4:	4403      	add	r3, r0
 80036d6:	3b1e      	subs	r3, #30
 80036d8:	409a      	lsls	r2, r3
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	430a      	orrs	r2, r1
 80036e0:	60da      	str	r2, [r3, #12]
 80036e2:	e022      	b.n	800372a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	6919      	ldr	r1, [r3, #16]
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	b29b      	uxth	r3, r3
 80036f0:	461a      	mov	r2, r3
 80036f2:	4613      	mov	r3, r2
 80036f4:	005b      	lsls	r3, r3, #1
 80036f6:	4413      	add	r3, r2
 80036f8:	2207      	movs	r2, #7
 80036fa:	fa02 f303 	lsl.w	r3, r2, r3
 80036fe:	43da      	mvns	r2, r3
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	400a      	ands	r2, r1
 8003706:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	6919      	ldr	r1, [r3, #16]
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	689a      	ldr	r2, [r3, #8]
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	b29b      	uxth	r3, r3
 8003718:	4618      	mov	r0, r3
 800371a:	4603      	mov	r3, r0
 800371c:	005b      	lsls	r3, r3, #1
 800371e:	4403      	add	r3, r0
 8003720:	409a      	lsls	r2, r3
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	430a      	orrs	r2, r1
 8003728:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	685b      	ldr	r3, [r3, #4]
 800372e:	2b06      	cmp	r3, #6
 8003730:	d824      	bhi.n	800377c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	685a      	ldr	r2, [r3, #4]
 800373c:	4613      	mov	r3, r2
 800373e:	009b      	lsls	r3, r3, #2
 8003740:	4413      	add	r3, r2
 8003742:	3b05      	subs	r3, #5
 8003744:	221f      	movs	r2, #31
 8003746:	fa02 f303 	lsl.w	r3, r2, r3
 800374a:	43da      	mvns	r2, r3
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	400a      	ands	r2, r1
 8003752:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	b29b      	uxth	r3, r3
 8003760:	4618      	mov	r0, r3
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	685a      	ldr	r2, [r3, #4]
 8003766:	4613      	mov	r3, r2
 8003768:	009b      	lsls	r3, r3, #2
 800376a:	4413      	add	r3, r2
 800376c:	3b05      	subs	r3, #5
 800376e:	fa00 f203 	lsl.w	r2, r0, r3
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	430a      	orrs	r2, r1
 8003778:	635a      	str	r2, [r3, #52]	; 0x34
 800377a:	e04c      	b.n	8003816 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	2b0c      	cmp	r3, #12
 8003782:	d824      	bhi.n	80037ce <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	685a      	ldr	r2, [r3, #4]
 800378e:	4613      	mov	r3, r2
 8003790:	009b      	lsls	r3, r3, #2
 8003792:	4413      	add	r3, r2
 8003794:	3b23      	subs	r3, #35	; 0x23
 8003796:	221f      	movs	r2, #31
 8003798:	fa02 f303 	lsl.w	r3, r2, r3
 800379c:	43da      	mvns	r2, r3
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	400a      	ands	r2, r1
 80037a4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	b29b      	uxth	r3, r3
 80037b2:	4618      	mov	r0, r3
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	685a      	ldr	r2, [r3, #4]
 80037b8:	4613      	mov	r3, r2
 80037ba:	009b      	lsls	r3, r3, #2
 80037bc:	4413      	add	r3, r2
 80037be:	3b23      	subs	r3, #35	; 0x23
 80037c0:	fa00 f203 	lsl.w	r2, r0, r3
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	430a      	orrs	r2, r1
 80037ca:	631a      	str	r2, [r3, #48]	; 0x30
 80037cc:	e023      	b.n	8003816 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	685a      	ldr	r2, [r3, #4]
 80037d8:	4613      	mov	r3, r2
 80037da:	009b      	lsls	r3, r3, #2
 80037dc:	4413      	add	r3, r2
 80037de:	3b41      	subs	r3, #65	; 0x41
 80037e0:	221f      	movs	r2, #31
 80037e2:	fa02 f303 	lsl.w	r3, r2, r3
 80037e6:	43da      	mvns	r2, r3
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	400a      	ands	r2, r1
 80037ee:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	b29b      	uxth	r3, r3
 80037fc:	4618      	mov	r0, r3
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	685a      	ldr	r2, [r3, #4]
 8003802:	4613      	mov	r3, r2
 8003804:	009b      	lsls	r3, r3, #2
 8003806:	4413      	add	r3, r2
 8003808:	3b41      	subs	r3, #65	; 0x41
 800380a:	fa00 f203 	lsl.w	r2, r0, r3
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	430a      	orrs	r2, r1
 8003814:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003816:	4b22      	ldr	r3, [pc, #136]	; (80038a0 <HAL_ADC_ConfigChannel+0x234>)
 8003818:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4a21      	ldr	r2, [pc, #132]	; (80038a4 <HAL_ADC_ConfigChannel+0x238>)
 8003820:	4293      	cmp	r3, r2
 8003822:	d109      	bne.n	8003838 <HAL_ADC_ConfigChannel+0x1cc>
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	2b12      	cmp	r3, #18
 800382a:	d105      	bne.n	8003838 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	685b      	ldr	r3, [r3, #4]
 8003830:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a19      	ldr	r2, [pc, #100]	; (80038a4 <HAL_ADC_ConfigChannel+0x238>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d123      	bne.n	800388a <HAL_ADC_ConfigChannel+0x21e>
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	2b10      	cmp	r3, #16
 8003848:	d003      	beq.n	8003852 <HAL_ADC_ConfigChannel+0x1e6>
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	2b11      	cmp	r3, #17
 8003850:	d11b      	bne.n	800388a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	2b10      	cmp	r3, #16
 8003864:	d111      	bne.n	800388a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003866:	4b10      	ldr	r3, [pc, #64]	; (80038a8 <HAL_ADC_ConfigChannel+0x23c>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4a10      	ldr	r2, [pc, #64]	; (80038ac <HAL_ADC_ConfigChannel+0x240>)
 800386c:	fba2 2303 	umull	r2, r3, r2, r3
 8003870:	0c9a      	lsrs	r2, r3, #18
 8003872:	4613      	mov	r3, r2
 8003874:	009b      	lsls	r3, r3, #2
 8003876:	4413      	add	r3, r2
 8003878:	005b      	lsls	r3, r3, #1
 800387a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800387c:	e002      	b.n	8003884 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800387e:	68bb      	ldr	r3, [r7, #8]
 8003880:	3b01      	subs	r3, #1
 8003882:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003884:	68bb      	ldr	r3, [r7, #8]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d1f9      	bne.n	800387e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2200      	movs	r2, #0
 800388e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003892:	2300      	movs	r3, #0
}
 8003894:	4618      	mov	r0, r3
 8003896:	3714      	adds	r7, #20
 8003898:	46bd      	mov	sp, r7
 800389a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389e:	4770      	bx	lr
 80038a0:	40012300 	.word	0x40012300
 80038a4:	40012000 	.word	0x40012000
 80038a8:	200000b4 	.word	0x200000b4
 80038ac:	431bde83 	.word	0x431bde83

080038b0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80038b0:	b480      	push	{r7}
 80038b2:	b085      	sub	sp, #20
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80038b8:	4b79      	ldr	r3, [pc, #484]	; (8003aa0 <ADC_Init+0x1f0>)
 80038ba:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	685a      	ldr	r2, [r3, #4]
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	431a      	orrs	r2, r3
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	685a      	ldr	r2, [r3, #4]
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80038e4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	6859      	ldr	r1, [r3, #4]
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	691b      	ldr	r3, [r3, #16]
 80038f0:	021a      	lsls	r2, r3, #8
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	430a      	orrs	r2, r1
 80038f8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	685a      	ldr	r2, [r3, #4]
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003908:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	6859      	ldr	r1, [r3, #4]
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	689a      	ldr	r2, [r3, #8]
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	430a      	orrs	r2, r1
 800391a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	689a      	ldr	r2, [r3, #8]
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800392a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	6899      	ldr	r1, [r3, #8]
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	68da      	ldr	r2, [r3, #12]
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	430a      	orrs	r2, r1
 800393c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003942:	4a58      	ldr	r2, [pc, #352]	; (8003aa4 <ADC_Init+0x1f4>)
 8003944:	4293      	cmp	r3, r2
 8003946:	d022      	beq.n	800398e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	689a      	ldr	r2, [r3, #8]
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003956:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	6899      	ldr	r1, [r3, #8]
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	430a      	orrs	r2, r1
 8003968:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	689a      	ldr	r2, [r3, #8]
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003978:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	6899      	ldr	r1, [r3, #8]
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	430a      	orrs	r2, r1
 800398a:	609a      	str	r2, [r3, #8]
 800398c:	e00f      	b.n	80039ae <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	689a      	ldr	r2, [r3, #8]
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800399c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	689a      	ldr	r2, [r3, #8]
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80039ac:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	689a      	ldr	r2, [r3, #8]
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f022 0202 	bic.w	r2, r2, #2
 80039bc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	6899      	ldr	r1, [r3, #8]
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	7e1b      	ldrb	r3, [r3, #24]
 80039c8:	005a      	lsls	r2, r3, #1
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	430a      	orrs	r2, r1
 80039d0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d01b      	beq.n	8003a14 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	685a      	ldr	r2, [r3, #4]
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80039ea:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	685a      	ldr	r2, [r3, #4]
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80039fa:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	6859      	ldr	r1, [r3, #4]
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a06:	3b01      	subs	r3, #1
 8003a08:	035a      	lsls	r2, r3, #13
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	430a      	orrs	r2, r1
 8003a10:	605a      	str	r2, [r3, #4]
 8003a12:	e007      	b.n	8003a24 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	685a      	ldr	r2, [r3, #4]
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a22:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003a32:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	69db      	ldr	r3, [r3, #28]
 8003a3e:	3b01      	subs	r3, #1
 8003a40:	051a      	lsls	r2, r3, #20
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	430a      	orrs	r2, r1
 8003a48:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	689a      	ldr	r2, [r3, #8]
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003a58:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	6899      	ldr	r1, [r3, #8]
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003a66:	025a      	lsls	r2, r3, #9
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	430a      	orrs	r2, r1
 8003a6e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	689a      	ldr	r2, [r3, #8]
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a7e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	6899      	ldr	r1, [r3, #8]
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	695b      	ldr	r3, [r3, #20]
 8003a8a:	029a      	lsls	r2, r3, #10
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	430a      	orrs	r2, r1
 8003a92:	609a      	str	r2, [r3, #8]
}
 8003a94:	bf00      	nop
 8003a96:	3714      	adds	r7, #20
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9e:	4770      	bx	lr
 8003aa0:	40012300 	.word	0x40012300
 8003aa4:	0f000001 	.word	0x0f000001

08003aa8 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b084      	sub	sp, #16
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ab4:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aba:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d13c      	bne.n	8003b3c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ac6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	689b      	ldr	r3, [r3, #8]
 8003ad4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d12b      	bne.n	8003b34 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d127      	bne.n	8003b34 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aea:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d006      	beq.n	8003b00 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	689b      	ldr	r3, [r3, #8]
 8003af8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d119      	bne.n	8003b34 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	685a      	ldr	r2, [r3, #4]
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f022 0220 	bic.w	r2, r2, #32
 8003b0e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b14:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b20:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d105      	bne.n	8003b34 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b2c:	f043 0201 	orr.w	r2, r3, #1
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003b34:	68f8      	ldr	r0, [r7, #12]
 8003b36:	f7ff fd7b 	bl	8003630 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003b3a:	e00e      	b.n	8003b5a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b40:	f003 0310 	and.w	r3, r3, #16
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d003      	beq.n	8003b50 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8003b48:	68f8      	ldr	r0, [r7, #12]
 8003b4a:	f7ff fd85 	bl	8003658 <HAL_ADC_ErrorCallback>
}
 8003b4e:	e004      	b.n	8003b5a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b56:	6878      	ldr	r0, [r7, #4]
 8003b58:	4798      	blx	r3
}
 8003b5a:	bf00      	nop
 8003b5c:	3710      	adds	r7, #16
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	bd80      	pop	{r7, pc}

08003b62 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003b62:	b580      	push	{r7, lr}
 8003b64:	b084      	sub	sp, #16
 8003b66:	af00      	add	r7, sp, #0
 8003b68:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b6e:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003b70:	68f8      	ldr	r0, [r7, #12]
 8003b72:	f7ff fd67 	bl	8003644 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003b76:	bf00      	nop
 8003b78:	3710      	adds	r7, #16
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	bd80      	pop	{r7, pc}

08003b7e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003b7e:	b580      	push	{r7, lr}
 8003b80:	b084      	sub	sp, #16
 8003b82:	af00      	add	r7, sp, #0
 8003b84:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b8a:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	2240      	movs	r2, #64	; 0x40
 8003b90:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b96:	f043 0204 	orr.w	r2, r3, #4
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003b9e:	68f8      	ldr	r0, [r7, #12]
 8003ba0:	f7ff fd5a 	bl	8003658 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003ba4:	bf00      	nop
 8003ba6:	3710      	adds	r7, #16
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	bd80      	pop	{r7, pc}

08003bac <__NVIC_SetPriorityGrouping>:
{
 8003bac:	b480      	push	{r7}
 8003bae:	b085      	sub	sp, #20
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	f003 0307 	and.w	r3, r3, #7
 8003bba:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003bbc:	4b0c      	ldr	r3, [pc, #48]	; (8003bf0 <__NVIC_SetPriorityGrouping+0x44>)
 8003bbe:	68db      	ldr	r3, [r3, #12]
 8003bc0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003bc2:	68ba      	ldr	r2, [r7, #8]
 8003bc4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003bc8:	4013      	ands	r3, r2
 8003bca:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003bd0:	68bb      	ldr	r3, [r7, #8]
 8003bd2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003bd4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003bd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003bdc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003bde:	4a04      	ldr	r2, [pc, #16]	; (8003bf0 <__NVIC_SetPriorityGrouping+0x44>)
 8003be0:	68bb      	ldr	r3, [r7, #8]
 8003be2:	60d3      	str	r3, [r2, #12]
}
 8003be4:	bf00      	nop
 8003be6:	3714      	adds	r7, #20
 8003be8:	46bd      	mov	sp, r7
 8003bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bee:	4770      	bx	lr
 8003bf0:	e000ed00 	.word	0xe000ed00

08003bf4 <__NVIC_GetPriorityGrouping>:
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003bf8:	4b04      	ldr	r3, [pc, #16]	; (8003c0c <__NVIC_GetPriorityGrouping+0x18>)
 8003bfa:	68db      	ldr	r3, [r3, #12]
 8003bfc:	0a1b      	lsrs	r3, r3, #8
 8003bfe:	f003 0307 	and.w	r3, r3, #7
}
 8003c02:	4618      	mov	r0, r3
 8003c04:	46bd      	mov	sp, r7
 8003c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0a:	4770      	bx	lr
 8003c0c:	e000ed00 	.word	0xe000ed00

08003c10 <__NVIC_EnableIRQ>:
{
 8003c10:	b480      	push	{r7}
 8003c12:	b083      	sub	sp, #12
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	4603      	mov	r3, r0
 8003c18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	db0b      	blt.n	8003c3a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003c22:	79fb      	ldrb	r3, [r7, #7]
 8003c24:	f003 021f 	and.w	r2, r3, #31
 8003c28:	4907      	ldr	r1, [pc, #28]	; (8003c48 <__NVIC_EnableIRQ+0x38>)
 8003c2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c2e:	095b      	lsrs	r3, r3, #5
 8003c30:	2001      	movs	r0, #1
 8003c32:	fa00 f202 	lsl.w	r2, r0, r2
 8003c36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003c3a:	bf00      	nop
 8003c3c:	370c      	adds	r7, #12
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c44:	4770      	bx	lr
 8003c46:	bf00      	nop
 8003c48:	e000e100 	.word	0xe000e100

08003c4c <__NVIC_SetPriority>:
{
 8003c4c:	b480      	push	{r7}
 8003c4e:	b083      	sub	sp, #12
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	4603      	mov	r3, r0
 8003c54:	6039      	str	r1, [r7, #0]
 8003c56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	db0a      	blt.n	8003c76 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	b2da      	uxtb	r2, r3
 8003c64:	490c      	ldr	r1, [pc, #48]	; (8003c98 <__NVIC_SetPriority+0x4c>)
 8003c66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c6a:	0112      	lsls	r2, r2, #4
 8003c6c:	b2d2      	uxtb	r2, r2
 8003c6e:	440b      	add	r3, r1
 8003c70:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003c74:	e00a      	b.n	8003c8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	b2da      	uxtb	r2, r3
 8003c7a:	4908      	ldr	r1, [pc, #32]	; (8003c9c <__NVIC_SetPriority+0x50>)
 8003c7c:	79fb      	ldrb	r3, [r7, #7]
 8003c7e:	f003 030f 	and.w	r3, r3, #15
 8003c82:	3b04      	subs	r3, #4
 8003c84:	0112      	lsls	r2, r2, #4
 8003c86:	b2d2      	uxtb	r2, r2
 8003c88:	440b      	add	r3, r1
 8003c8a:	761a      	strb	r2, [r3, #24]
}
 8003c8c:	bf00      	nop
 8003c8e:	370c      	adds	r7, #12
 8003c90:	46bd      	mov	sp, r7
 8003c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c96:	4770      	bx	lr
 8003c98:	e000e100 	.word	0xe000e100
 8003c9c:	e000ed00 	.word	0xe000ed00

08003ca0 <NVIC_EncodePriority>:
{
 8003ca0:	b480      	push	{r7}
 8003ca2:	b089      	sub	sp, #36	; 0x24
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	60f8      	str	r0, [r7, #12]
 8003ca8:	60b9      	str	r1, [r7, #8]
 8003caa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	f003 0307 	and.w	r3, r3, #7
 8003cb2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003cb4:	69fb      	ldr	r3, [r7, #28]
 8003cb6:	f1c3 0307 	rsb	r3, r3, #7
 8003cba:	2b04      	cmp	r3, #4
 8003cbc:	bf28      	it	cs
 8003cbe:	2304      	movcs	r3, #4
 8003cc0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003cc2:	69fb      	ldr	r3, [r7, #28]
 8003cc4:	3304      	adds	r3, #4
 8003cc6:	2b06      	cmp	r3, #6
 8003cc8:	d902      	bls.n	8003cd0 <NVIC_EncodePriority+0x30>
 8003cca:	69fb      	ldr	r3, [r7, #28]
 8003ccc:	3b03      	subs	r3, #3
 8003cce:	e000      	b.n	8003cd2 <NVIC_EncodePriority+0x32>
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003cd4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003cd8:	69bb      	ldr	r3, [r7, #24]
 8003cda:	fa02 f303 	lsl.w	r3, r2, r3
 8003cde:	43da      	mvns	r2, r3
 8003ce0:	68bb      	ldr	r3, [r7, #8]
 8003ce2:	401a      	ands	r2, r3
 8003ce4:	697b      	ldr	r3, [r7, #20]
 8003ce6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003ce8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003cec:	697b      	ldr	r3, [r7, #20]
 8003cee:	fa01 f303 	lsl.w	r3, r1, r3
 8003cf2:	43d9      	mvns	r1, r3
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003cf8:	4313      	orrs	r3, r2
}
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	3724      	adds	r7, #36	; 0x24
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d04:	4770      	bx	lr
	...

08003d08 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b082      	sub	sp, #8
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	3b01      	subs	r3, #1
 8003d14:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003d18:	d301      	bcc.n	8003d1e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	e00f      	b.n	8003d3e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003d1e:	4a0a      	ldr	r2, [pc, #40]	; (8003d48 <SysTick_Config+0x40>)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	3b01      	subs	r3, #1
 8003d24:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003d26:	210f      	movs	r1, #15
 8003d28:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003d2c:	f7ff ff8e 	bl	8003c4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003d30:	4b05      	ldr	r3, [pc, #20]	; (8003d48 <SysTick_Config+0x40>)
 8003d32:	2200      	movs	r2, #0
 8003d34:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003d36:	4b04      	ldr	r3, [pc, #16]	; (8003d48 <SysTick_Config+0x40>)
 8003d38:	2207      	movs	r2, #7
 8003d3a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003d3c:	2300      	movs	r3, #0
}
 8003d3e:	4618      	mov	r0, r3
 8003d40:	3708      	adds	r7, #8
 8003d42:	46bd      	mov	sp, r7
 8003d44:	bd80      	pop	{r7, pc}
 8003d46:	bf00      	nop
 8003d48:	e000e010 	.word	0xe000e010

08003d4c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b082      	sub	sp, #8
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003d54:	6878      	ldr	r0, [r7, #4]
 8003d56:	f7ff ff29 	bl	8003bac <__NVIC_SetPriorityGrouping>
}
 8003d5a:	bf00      	nop
 8003d5c:	3708      	adds	r7, #8
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	bd80      	pop	{r7, pc}

08003d62 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003d62:	b580      	push	{r7, lr}
 8003d64:	b086      	sub	sp, #24
 8003d66:	af00      	add	r7, sp, #0
 8003d68:	4603      	mov	r3, r0
 8003d6a:	60b9      	str	r1, [r7, #8]
 8003d6c:	607a      	str	r2, [r7, #4]
 8003d6e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003d70:	2300      	movs	r3, #0
 8003d72:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003d74:	f7ff ff3e 	bl	8003bf4 <__NVIC_GetPriorityGrouping>
 8003d78:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003d7a:	687a      	ldr	r2, [r7, #4]
 8003d7c:	68b9      	ldr	r1, [r7, #8]
 8003d7e:	6978      	ldr	r0, [r7, #20]
 8003d80:	f7ff ff8e 	bl	8003ca0 <NVIC_EncodePriority>
 8003d84:	4602      	mov	r2, r0
 8003d86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d8a:	4611      	mov	r1, r2
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	f7ff ff5d 	bl	8003c4c <__NVIC_SetPriority>
}
 8003d92:	bf00      	nop
 8003d94:	3718      	adds	r7, #24
 8003d96:	46bd      	mov	sp, r7
 8003d98:	bd80      	pop	{r7, pc}

08003d9a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d9a:	b580      	push	{r7, lr}
 8003d9c:	b082      	sub	sp, #8
 8003d9e:	af00      	add	r7, sp, #0
 8003da0:	4603      	mov	r3, r0
 8003da2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003da4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003da8:	4618      	mov	r0, r3
 8003daa:	f7ff ff31 	bl	8003c10 <__NVIC_EnableIRQ>
}
 8003dae:	bf00      	nop
 8003db0:	3708      	adds	r7, #8
 8003db2:	46bd      	mov	sp, r7
 8003db4:	bd80      	pop	{r7, pc}

08003db6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003db6:	b580      	push	{r7, lr}
 8003db8:	b082      	sub	sp, #8
 8003dba:	af00      	add	r7, sp, #0
 8003dbc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003dbe:	6878      	ldr	r0, [r7, #4]
 8003dc0:	f7ff ffa2 	bl	8003d08 <SysTick_Config>
 8003dc4:	4603      	mov	r3, r0
}
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	3708      	adds	r7, #8
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	bd80      	pop	{r7, pc}
	...

08003dd0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b086      	sub	sp, #24
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003dd8:	2300      	movs	r3, #0
 8003dda:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003ddc:	f7ff fac4 	bl	8003368 <HAL_GetTick>
 8003de0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d101      	bne.n	8003dec <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003de8:	2301      	movs	r3, #1
 8003dea:	e099      	b.n	8003f20 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2202      	movs	r2, #2
 8003df0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2200      	movs	r2, #0
 8003df8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	681a      	ldr	r2, [r3, #0]
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f022 0201 	bic.w	r2, r2, #1
 8003e0a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003e0c:	e00f      	b.n	8003e2e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003e0e:	f7ff faab 	bl	8003368 <HAL_GetTick>
 8003e12:	4602      	mov	r2, r0
 8003e14:	693b      	ldr	r3, [r7, #16]
 8003e16:	1ad3      	subs	r3, r2, r3
 8003e18:	2b05      	cmp	r3, #5
 8003e1a:	d908      	bls.n	8003e2e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2220      	movs	r2, #32
 8003e20:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2203      	movs	r2, #3
 8003e26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003e2a:	2303      	movs	r3, #3
 8003e2c:	e078      	b.n	8003f20 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f003 0301 	and.w	r3, r3, #1
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d1e8      	bne.n	8003e0e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003e44:	697a      	ldr	r2, [r7, #20]
 8003e46:	4b38      	ldr	r3, [pc, #224]	; (8003f28 <HAL_DMA_Init+0x158>)
 8003e48:	4013      	ands	r3, r2
 8003e4a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	685a      	ldr	r2, [r3, #4]
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	689b      	ldr	r3, [r3, #8]
 8003e54:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003e5a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	691b      	ldr	r3, [r3, #16]
 8003e60:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e66:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	699b      	ldr	r3, [r3, #24]
 8003e6c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e72:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6a1b      	ldr	r3, [r3, #32]
 8003e78:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003e7a:	697a      	ldr	r2, [r7, #20]
 8003e7c:	4313      	orrs	r3, r2
 8003e7e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e84:	2b04      	cmp	r3, #4
 8003e86:	d107      	bne.n	8003e98 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e90:	4313      	orrs	r3, r2
 8003e92:	697a      	ldr	r2, [r7, #20]
 8003e94:	4313      	orrs	r3, r2
 8003e96:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	697a      	ldr	r2, [r7, #20]
 8003e9e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	695b      	ldr	r3, [r3, #20]
 8003ea6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003ea8:	697b      	ldr	r3, [r7, #20]
 8003eaa:	f023 0307 	bic.w	r3, r3, #7
 8003eae:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eb4:	697a      	ldr	r2, [r7, #20]
 8003eb6:	4313      	orrs	r3, r2
 8003eb8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ebe:	2b04      	cmp	r3, #4
 8003ec0:	d117      	bne.n	8003ef2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ec6:	697a      	ldr	r2, [r7, #20]
 8003ec8:	4313      	orrs	r3, r2
 8003eca:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d00e      	beq.n	8003ef2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003ed4:	6878      	ldr	r0, [r7, #4]
 8003ed6:	f000 fa6f 	bl	80043b8 <DMA_CheckFifoParam>
 8003eda:	4603      	mov	r3, r0
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d008      	beq.n	8003ef2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2240      	movs	r2, #64	; 0x40
 8003ee4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2201      	movs	r2, #1
 8003eea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003eee:	2301      	movs	r3, #1
 8003ef0:	e016      	b.n	8003f20 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	697a      	ldr	r2, [r7, #20]
 8003ef8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003efa:	6878      	ldr	r0, [r7, #4]
 8003efc:	f000 fa26 	bl	800434c <DMA_CalcBaseAndBitshift>
 8003f00:	4603      	mov	r3, r0
 8003f02:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f08:	223f      	movs	r2, #63	; 0x3f
 8003f0a:	409a      	lsls	r2, r3
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2200      	movs	r2, #0
 8003f14:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2201      	movs	r2, #1
 8003f1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003f1e:	2300      	movs	r3, #0
}
 8003f20:	4618      	mov	r0, r3
 8003f22:	3718      	adds	r7, #24
 8003f24:	46bd      	mov	sp, r7
 8003f26:	bd80      	pop	{r7, pc}
 8003f28:	f010803f 	.word	0xf010803f

08003f2c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b086      	sub	sp, #24
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	60f8      	str	r0, [r7, #12]
 8003f34:	60b9      	str	r1, [r7, #8]
 8003f36:	607a      	str	r2, [r7, #4]
 8003f38:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f42:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003f4a:	2b01      	cmp	r3, #1
 8003f4c:	d101      	bne.n	8003f52 <HAL_DMA_Start_IT+0x26>
 8003f4e:	2302      	movs	r3, #2
 8003f50:	e040      	b.n	8003fd4 <HAL_DMA_Start_IT+0xa8>
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	2201      	movs	r2, #1
 8003f56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003f60:	b2db      	uxtb	r3, r3
 8003f62:	2b01      	cmp	r3, #1
 8003f64:	d12f      	bne.n	8003fc6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	2202      	movs	r2, #2
 8003f6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	2200      	movs	r2, #0
 8003f72:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	687a      	ldr	r2, [r7, #4]
 8003f78:	68b9      	ldr	r1, [r7, #8]
 8003f7a:	68f8      	ldr	r0, [r7, #12]
 8003f7c:	f000 f9b8 	bl	80042f0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f84:	223f      	movs	r2, #63	; 0x3f
 8003f86:	409a      	lsls	r2, r3
 8003f88:	693b      	ldr	r3, [r7, #16]
 8003f8a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	681a      	ldr	r2, [r3, #0]
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f042 0216 	orr.w	r2, r2, #22
 8003f9a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d007      	beq.n	8003fb4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	681a      	ldr	r2, [r3, #0]
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f042 0208 	orr.w	r2, r2, #8
 8003fb2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	681a      	ldr	r2, [r3, #0]
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f042 0201 	orr.w	r2, r2, #1
 8003fc2:	601a      	str	r2, [r3, #0]
 8003fc4:	e005      	b.n	8003fd2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	2200      	movs	r2, #0
 8003fca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003fce:	2302      	movs	r3, #2
 8003fd0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003fd2:	7dfb      	ldrb	r3, [r7, #23]
}
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	3718      	adds	r7, #24
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	bd80      	pop	{r7, pc}

08003fdc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b086      	sub	sp, #24
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003fe8:	4b8e      	ldr	r3, [pc, #568]	; (8004224 <HAL_DMA_IRQHandler+0x248>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4a8e      	ldr	r2, [pc, #568]	; (8004228 <HAL_DMA_IRQHandler+0x24c>)
 8003fee:	fba2 2303 	umull	r2, r3, r2, r3
 8003ff2:	0a9b      	lsrs	r3, r3, #10
 8003ff4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ffa:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003ffc:	693b      	ldr	r3, [r7, #16]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004006:	2208      	movs	r2, #8
 8004008:	409a      	lsls	r2, r3
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	4013      	ands	r3, r2
 800400e:	2b00      	cmp	r3, #0
 8004010:	d01a      	beq.n	8004048 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f003 0304 	and.w	r3, r3, #4
 800401c:	2b00      	cmp	r3, #0
 800401e:	d013      	beq.n	8004048 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	681a      	ldr	r2, [r3, #0]
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f022 0204 	bic.w	r2, r2, #4
 800402e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004034:	2208      	movs	r2, #8
 8004036:	409a      	lsls	r2, r3
 8004038:	693b      	ldr	r3, [r7, #16]
 800403a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004040:	f043 0201 	orr.w	r2, r3, #1
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800404c:	2201      	movs	r2, #1
 800404e:	409a      	lsls	r2, r3
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	4013      	ands	r3, r2
 8004054:	2b00      	cmp	r3, #0
 8004056:	d012      	beq.n	800407e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	695b      	ldr	r3, [r3, #20]
 800405e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004062:	2b00      	cmp	r3, #0
 8004064:	d00b      	beq.n	800407e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800406a:	2201      	movs	r2, #1
 800406c:	409a      	lsls	r2, r3
 800406e:	693b      	ldr	r3, [r7, #16]
 8004070:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004076:	f043 0202 	orr.w	r2, r3, #2
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004082:	2204      	movs	r2, #4
 8004084:	409a      	lsls	r2, r3
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	4013      	ands	r3, r2
 800408a:	2b00      	cmp	r3, #0
 800408c:	d012      	beq.n	80040b4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f003 0302 	and.w	r3, r3, #2
 8004098:	2b00      	cmp	r3, #0
 800409a:	d00b      	beq.n	80040b4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040a0:	2204      	movs	r2, #4
 80040a2:	409a      	lsls	r2, r3
 80040a4:	693b      	ldr	r3, [r7, #16]
 80040a6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040ac:	f043 0204 	orr.w	r2, r3, #4
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040b8:	2210      	movs	r2, #16
 80040ba:	409a      	lsls	r2, r3
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	4013      	ands	r3, r2
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d043      	beq.n	800414c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f003 0308 	and.w	r3, r3, #8
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d03c      	beq.n	800414c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040d6:	2210      	movs	r2, #16
 80040d8:	409a      	lsls	r2, r3
 80040da:	693b      	ldr	r3, [r7, #16]
 80040dc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d018      	beq.n	800411e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d108      	bne.n	800410c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d024      	beq.n	800414c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004106:	6878      	ldr	r0, [r7, #4]
 8004108:	4798      	blx	r3
 800410a:	e01f      	b.n	800414c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004110:	2b00      	cmp	r3, #0
 8004112:	d01b      	beq.n	800414c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004118:	6878      	ldr	r0, [r7, #4]
 800411a:	4798      	blx	r3
 800411c:	e016      	b.n	800414c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004128:	2b00      	cmp	r3, #0
 800412a:	d107      	bne.n	800413c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	681a      	ldr	r2, [r3, #0]
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f022 0208 	bic.w	r2, r2, #8
 800413a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004140:	2b00      	cmp	r3, #0
 8004142:	d003      	beq.n	800414c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004148:	6878      	ldr	r0, [r7, #4]
 800414a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004150:	2220      	movs	r2, #32
 8004152:	409a      	lsls	r2, r3
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	4013      	ands	r3, r2
 8004158:	2b00      	cmp	r3, #0
 800415a:	f000 808f 	beq.w	800427c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f003 0310 	and.w	r3, r3, #16
 8004168:	2b00      	cmp	r3, #0
 800416a:	f000 8087 	beq.w	800427c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004172:	2220      	movs	r2, #32
 8004174:	409a      	lsls	r2, r3
 8004176:	693b      	ldr	r3, [r7, #16]
 8004178:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004180:	b2db      	uxtb	r3, r3
 8004182:	2b05      	cmp	r3, #5
 8004184:	d136      	bne.n	80041f4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	681a      	ldr	r2, [r3, #0]
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f022 0216 	bic.w	r2, r2, #22
 8004194:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	695a      	ldr	r2, [r3, #20]
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80041a4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d103      	bne.n	80041b6 <HAL_DMA_IRQHandler+0x1da>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d007      	beq.n	80041c6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	681a      	ldr	r2, [r3, #0]
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f022 0208 	bic.w	r2, r2, #8
 80041c4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041ca:	223f      	movs	r2, #63	; 0x3f
 80041cc:	409a      	lsls	r2, r3
 80041ce:	693b      	ldr	r3, [r7, #16]
 80041d0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	2201      	movs	r2, #1
 80041d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2200      	movs	r2, #0
 80041de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d07e      	beq.n	80042e8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041ee:	6878      	ldr	r0, [r7, #4]
 80041f0:	4798      	blx	r3
        }
        return;
 80041f2:	e079      	b.n	80042e8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d01d      	beq.n	800423e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800420c:	2b00      	cmp	r3, #0
 800420e:	d10d      	bne.n	800422c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004214:	2b00      	cmp	r3, #0
 8004216:	d031      	beq.n	800427c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800421c:	6878      	ldr	r0, [r7, #4]
 800421e:	4798      	blx	r3
 8004220:	e02c      	b.n	800427c <HAL_DMA_IRQHandler+0x2a0>
 8004222:	bf00      	nop
 8004224:	200000b4 	.word	0x200000b4
 8004228:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004230:	2b00      	cmp	r3, #0
 8004232:	d023      	beq.n	800427c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004238:	6878      	ldr	r0, [r7, #4]
 800423a:	4798      	blx	r3
 800423c:	e01e      	b.n	800427c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004248:	2b00      	cmp	r3, #0
 800424a:	d10f      	bne.n	800426c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	681a      	ldr	r2, [r3, #0]
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f022 0210 	bic.w	r2, r2, #16
 800425a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2201      	movs	r2, #1
 8004260:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2200      	movs	r2, #0
 8004268:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004270:	2b00      	cmp	r3, #0
 8004272:	d003      	beq.n	800427c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004278:	6878      	ldr	r0, [r7, #4]
 800427a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004280:	2b00      	cmp	r3, #0
 8004282:	d032      	beq.n	80042ea <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004288:	f003 0301 	and.w	r3, r3, #1
 800428c:	2b00      	cmp	r3, #0
 800428e:	d022      	beq.n	80042d6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2205      	movs	r2, #5
 8004294:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	681a      	ldr	r2, [r3, #0]
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f022 0201 	bic.w	r2, r2, #1
 80042a6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80042a8:	68bb      	ldr	r3, [r7, #8]
 80042aa:	3301      	adds	r3, #1
 80042ac:	60bb      	str	r3, [r7, #8]
 80042ae:	697a      	ldr	r2, [r7, #20]
 80042b0:	429a      	cmp	r2, r3
 80042b2:	d307      	bcc.n	80042c4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f003 0301 	and.w	r3, r3, #1
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d1f2      	bne.n	80042a8 <HAL_DMA_IRQHandler+0x2cc>
 80042c2:	e000      	b.n	80042c6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80042c4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	2201      	movs	r2, #1
 80042ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	2200      	movs	r2, #0
 80042d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d005      	beq.n	80042ea <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042e2:	6878      	ldr	r0, [r7, #4]
 80042e4:	4798      	blx	r3
 80042e6:	e000      	b.n	80042ea <HAL_DMA_IRQHandler+0x30e>
        return;
 80042e8:	bf00      	nop
    }
  }
}
 80042ea:	3718      	adds	r7, #24
 80042ec:	46bd      	mov	sp, r7
 80042ee:	bd80      	pop	{r7, pc}

080042f0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80042f0:	b480      	push	{r7}
 80042f2:	b085      	sub	sp, #20
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	60f8      	str	r0, [r7, #12]
 80042f8:	60b9      	str	r1, [r7, #8]
 80042fa:	607a      	str	r2, [r7, #4]
 80042fc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	681a      	ldr	r2, [r3, #0]
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800430c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	683a      	ldr	r2, [r7, #0]
 8004314:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	689b      	ldr	r3, [r3, #8]
 800431a:	2b40      	cmp	r3, #64	; 0x40
 800431c:	d108      	bne.n	8004330 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	687a      	ldr	r2, [r7, #4]
 8004324:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	68ba      	ldr	r2, [r7, #8]
 800432c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800432e:	e007      	b.n	8004340 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	68ba      	ldr	r2, [r7, #8]
 8004336:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	687a      	ldr	r2, [r7, #4]
 800433e:	60da      	str	r2, [r3, #12]
}
 8004340:	bf00      	nop
 8004342:	3714      	adds	r7, #20
 8004344:	46bd      	mov	sp, r7
 8004346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434a:	4770      	bx	lr

0800434c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800434c:	b480      	push	{r7}
 800434e:	b085      	sub	sp, #20
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	b2db      	uxtb	r3, r3
 800435a:	3b10      	subs	r3, #16
 800435c:	4a14      	ldr	r2, [pc, #80]	; (80043b0 <DMA_CalcBaseAndBitshift+0x64>)
 800435e:	fba2 2303 	umull	r2, r3, r2, r3
 8004362:	091b      	lsrs	r3, r3, #4
 8004364:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004366:	4a13      	ldr	r2, [pc, #76]	; (80043b4 <DMA_CalcBaseAndBitshift+0x68>)
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	4413      	add	r3, r2
 800436c:	781b      	ldrb	r3, [r3, #0]
 800436e:	461a      	mov	r2, r3
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	2b03      	cmp	r3, #3
 8004378:	d909      	bls.n	800438e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004382:	f023 0303 	bic.w	r3, r3, #3
 8004386:	1d1a      	adds	r2, r3, #4
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	659a      	str	r2, [r3, #88]	; 0x58
 800438c:	e007      	b.n	800439e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004396:	f023 0303 	bic.w	r3, r3, #3
 800439a:	687a      	ldr	r2, [r7, #4]
 800439c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80043a2:	4618      	mov	r0, r3
 80043a4:	3714      	adds	r7, #20
 80043a6:	46bd      	mov	sp, r7
 80043a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ac:	4770      	bx	lr
 80043ae:	bf00      	nop
 80043b0:	aaaaaaab 	.word	0xaaaaaaab
 80043b4:	0800dc98 	.word	0x0800dc98

080043b8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80043b8:	b480      	push	{r7}
 80043ba:	b085      	sub	sp, #20
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80043c0:	2300      	movs	r3, #0
 80043c2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043c8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	699b      	ldr	r3, [r3, #24]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d11f      	bne.n	8004412 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80043d2:	68bb      	ldr	r3, [r7, #8]
 80043d4:	2b03      	cmp	r3, #3
 80043d6:	d856      	bhi.n	8004486 <DMA_CheckFifoParam+0xce>
 80043d8:	a201      	add	r2, pc, #4	; (adr r2, 80043e0 <DMA_CheckFifoParam+0x28>)
 80043da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043de:	bf00      	nop
 80043e0:	080043f1 	.word	0x080043f1
 80043e4:	08004403 	.word	0x08004403
 80043e8:	080043f1 	.word	0x080043f1
 80043ec:	08004487 	.word	0x08004487
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043f4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d046      	beq.n	800448a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80043fc:	2301      	movs	r3, #1
 80043fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004400:	e043      	b.n	800448a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004406:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800440a:	d140      	bne.n	800448e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800440c:	2301      	movs	r3, #1
 800440e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004410:	e03d      	b.n	800448e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	699b      	ldr	r3, [r3, #24]
 8004416:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800441a:	d121      	bne.n	8004460 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800441c:	68bb      	ldr	r3, [r7, #8]
 800441e:	2b03      	cmp	r3, #3
 8004420:	d837      	bhi.n	8004492 <DMA_CheckFifoParam+0xda>
 8004422:	a201      	add	r2, pc, #4	; (adr r2, 8004428 <DMA_CheckFifoParam+0x70>)
 8004424:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004428:	08004439 	.word	0x08004439
 800442c:	0800443f 	.word	0x0800443f
 8004430:	08004439 	.word	0x08004439
 8004434:	08004451 	.word	0x08004451
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004438:	2301      	movs	r3, #1
 800443a:	73fb      	strb	r3, [r7, #15]
      break;
 800443c:	e030      	b.n	80044a0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004442:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004446:	2b00      	cmp	r3, #0
 8004448:	d025      	beq.n	8004496 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800444a:	2301      	movs	r3, #1
 800444c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800444e:	e022      	b.n	8004496 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004454:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004458:	d11f      	bne.n	800449a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800445a:	2301      	movs	r3, #1
 800445c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800445e:	e01c      	b.n	800449a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004460:	68bb      	ldr	r3, [r7, #8]
 8004462:	2b02      	cmp	r3, #2
 8004464:	d903      	bls.n	800446e <DMA_CheckFifoParam+0xb6>
 8004466:	68bb      	ldr	r3, [r7, #8]
 8004468:	2b03      	cmp	r3, #3
 800446a:	d003      	beq.n	8004474 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800446c:	e018      	b.n	80044a0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800446e:	2301      	movs	r3, #1
 8004470:	73fb      	strb	r3, [r7, #15]
      break;
 8004472:	e015      	b.n	80044a0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004478:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800447c:	2b00      	cmp	r3, #0
 800447e:	d00e      	beq.n	800449e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004480:	2301      	movs	r3, #1
 8004482:	73fb      	strb	r3, [r7, #15]
      break;
 8004484:	e00b      	b.n	800449e <DMA_CheckFifoParam+0xe6>
      break;
 8004486:	bf00      	nop
 8004488:	e00a      	b.n	80044a0 <DMA_CheckFifoParam+0xe8>
      break;
 800448a:	bf00      	nop
 800448c:	e008      	b.n	80044a0 <DMA_CheckFifoParam+0xe8>
      break;
 800448e:	bf00      	nop
 8004490:	e006      	b.n	80044a0 <DMA_CheckFifoParam+0xe8>
      break;
 8004492:	bf00      	nop
 8004494:	e004      	b.n	80044a0 <DMA_CheckFifoParam+0xe8>
      break;
 8004496:	bf00      	nop
 8004498:	e002      	b.n	80044a0 <DMA_CheckFifoParam+0xe8>
      break;   
 800449a:	bf00      	nop
 800449c:	e000      	b.n	80044a0 <DMA_CheckFifoParam+0xe8>
      break;
 800449e:	bf00      	nop
    }
  } 
  
  return status; 
 80044a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80044a2:	4618      	mov	r0, r3
 80044a4:	3714      	adds	r7, #20
 80044a6:	46bd      	mov	sp, r7
 80044a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ac:	4770      	bx	lr
 80044ae:	bf00      	nop

080044b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80044b0:	b480      	push	{r7}
 80044b2:	b089      	sub	sp, #36	; 0x24
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
 80044b8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80044ba:	2300      	movs	r3, #0
 80044bc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80044be:	2300      	movs	r3, #0
 80044c0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80044c2:	2300      	movs	r3, #0
 80044c4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80044c6:	2300      	movs	r3, #0
 80044c8:	61fb      	str	r3, [r7, #28]
 80044ca:	e159      	b.n	8004780 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80044cc:	2201      	movs	r2, #1
 80044ce:	69fb      	ldr	r3, [r7, #28]
 80044d0:	fa02 f303 	lsl.w	r3, r2, r3
 80044d4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	697a      	ldr	r2, [r7, #20]
 80044dc:	4013      	ands	r3, r2
 80044de:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80044e0:	693a      	ldr	r2, [r7, #16]
 80044e2:	697b      	ldr	r3, [r7, #20]
 80044e4:	429a      	cmp	r2, r3
 80044e6:	f040 8148 	bne.w	800477a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	685b      	ldr	r3, [r3, #4]
 80044ee:	f003 0303 	and.w	r3, r3, #3
 80044f2:	2b01      	cmp	r3, #1
 80044f4:	d005      	beq.n	8004502 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	685b      	ldr	r3, [r3, #4]
 80044fa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80044fe:	2b02      	cmp	r3, #2
 8004500:	d130      	bne.n	8004564 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	689b      	ldr	r3, [r3, #8]
 8004506:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004508:	69fb      	ldr	r3, [r7, #28]
 800450a:	005b      	lsls	r3, r3, #1
 800450c:	2203      	movs	r2, #3
 800450e:	fa02 f303 	lsl.w	r3, r2, r3
 8004512:	43db      	mvns	r3, r3
 8004514:	69ba      	ldr	r2, [r7, #24]
 8004516:	4013      	ands	r3, r2
 8004518:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	68da      	ldr	r2, [r3, #12]
 800451e:	69fb      	ldr	r3, [r7, #28]
 8004520:	005b      	lsls	r3, r3, #1
 8004522:	fa02 f303 	lsl.w	r3, r2, r3
 8004526:	69ba      	ldr	r2, [r7, #24]
 8004528:	4313      	orrs	r3, r2
 800452a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	69ba      	ldr	r2, [r7, #24]
 8004530:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	685b      	ldr	r3, [r3, #4]
 8004536:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004538:	2201      	movs	r2, #1
 800453a:	69fb      	ldr	r3, [r7, #28]
 800453c:	fa02 f303 	lsl.w	r3, r2, r3
 8004540:	43db      	mvns	r3, r3
 8004542:	69ba      	ldr	r2, [r7, #24]
 8004544:	4013      	ands	r3, r2
 8004546:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	685b      	ldr	r3, [r3, #4]
 800454c:	091b      	lsrs	r3, r3, #4
 800454e:	f003 0201 	and.w	r2, r3, #1
 8004552:	69fb      	ldr	r3, [r7, #28]
 8004554:	fa02 f303 	lsl.w	r3, r2, r3
 8004558:	69ba      	ldr	r2, [r7, #24]
 800455a:	4313      	orrs	r3, r2
 800455c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	69ba      	ldr	r2, [r7, #24]
 8004562:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	685b      	ldr	r3, [r3, #4]
 8004568:	f003 0303 	and.w	r3, r3, #3
 800456c:	2b03      	cmp	r3, #3
 800456e:	d017      	beq.n	80045a0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	68db      	ldr	r3, [r3, #12]
 8004574:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004576:	69fb      	ldr	r3, [r7, #28]
 8004578:	005b      	lsls	r3, r3, #1
 800457a:	2203      	movs	r2, #3
 800457c:	fa02 f303 	lsl.w	r3, r2, r3
 8004580:	43db      	mvns	r3, r3
 8004582:	69ba      	ldr	r2, [r7, #24]
 8004584:	4013      	ands	r3, r2
 8004586:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	689a      	ldr	r2, [r3, #8]
 800458c:	69fb      	ldr	r3, [r7, #28]
 800458e:	005b      	lsls	r3, r3, #1
 8004590:	fa02 f303 	lsl.w	r3, r2, r3
 8004594:	69ba      	ldr	r2, [r7, #24]
 8004596:	4313      	orrs	r3, r2
 8004598:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	69ba      	ldr	r2, [r7, #24]
 800459e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	685b      	ldr	r3, [r3, #4]
 80045a4:	f003 0303 	and.w	r3, r3, #3
 80045a8:	2b02      	cmp	r3, #2
 80045aa:	d123      	bne.n	80045f4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80045ac:	69fb      	ldr	r3, [r7, #28]
 80045ae:	08da      	lsrs	r2, r3, #3
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	3208      	adds	r2, #8
 80045b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80045b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80045ba:	69fb      	ldr	r3, [r7, #28]
 80045bc:	f003 0307 	and.w	r3, r3, #7
 80045c0:	009b      	lsls	r3, r3, #2
 80045c2:	220f      	movs	r2, #15
 80045c4:	fa02 f303 	lsl.w	r3, r2, r3
 80045c8:	43db      	mvns	r3, r3
 80045ca:	69ba      	ldr	r2, [r7, #24]
 80045cc:	4013      	ands	r3, r2
 80045ce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	691a      	ldr	r2, [r3, #16]
 80045d4:	69fb      	ldr	r3, [r7, #28]
 80045d6:	f003 0307 	and.w	r3, r3, #7
 80045da:	009b      	lsls	r3, r3, #2
 80045dc:	fa02 f303 	lsl.w	r3, r2, r3
 80045e0:	69ba      	ldr	r2, [r7, #24]
 80045e2:	4313      	orrs	r3, r2
 80045e4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80045e6:	69fb      	ldr	r3, [r7, #28]
 80045e8:	08da      	lsrs	r2, r3, #3
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	3208      	adds	r2, #8
 80045ee:	69b9      	ldr	r1, [r7, #24]
 80045f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80045fa:	69fb      	ldr	r3, [r7, #28]
 80045fc:	005b      	lsls	r3, r3, #1
 80045fe:	2203      	movs	r2, #3
 8004600:	fa02 f303 	lsl.w	r3, r2, r3
 8004604:	43db      	mvns	r3, r3
 8004606:	69ba      	ldr	r2, [r7, #24]
 8004608:	4013      	ands	r3, r2
 800460a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	685b      	ldr	r3, [r3, #4]
 8004610:	f003 0203 	and.w	r2, r3, #3
 8004614:	69fb      	ldr	r3, [r7, #28]
 8004616:	005b      	lsls	r3, r3, #1
 8004618:	fa02 f303 	lsl.w	r3, r2, r3
 800461c:	69ba      	ldr	r2, [r7, #24]
 800461e:	4313      	orrs	r3, r2
 8004620:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	69ba      	ldr	r2, [r7, #24]
 8004626:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	685b      	ldr	r3, [r3, #4]
 800462c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004630:	2b00      	cmp	r3, #0
 8004632:	f000 80a2 	beq.w	800477a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004636:	2300      	movs	r3, #0
 8004638:	60fb      	str	r3, [r7, #12]
 800463a:	4b57      	ldr	r3, [pc, #348]	; (8004798 <HAL_GPIO_Init+0x2e8>)
 800463c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800463e:	4a56      	ldr	r2, [pc, #344]	; (8004798 <HAL_GPIO_Init+0x2e8>)
 8004640:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004644:	6453      	str	r3, [r2, #68]	; 0x44
 8004646:	4b54      	ldr	r3, [pc, #336]	; (8004798 <HAL_GPIO_Init+0x2e8>)
 8004648:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800464a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800464e:	60fb      	str	r3, [r7, #12]
 8004650:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004652:	4a52      	ldr	r2, [pc, #328]	; (800479c <HAL_GPIO_Init+0x2ec>)
 8004654:	69fb      	ldr	r3, [r7, #28]
 8004656:	089b      	lsrs	r3, r3, #2
 8004658:	3302      	adds	r3, #2
 800465a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800465e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004660:	69fb      	ldr	r3, [r7, #28]
 8004662:	f003 0303 	and.w	r3, r3, #3
 8004666:	009b      	lsls	r3, r3, #2
 8004668:	220f      	movs	r2, #15
 800466a:	fa02 f303 	lsl.w	r3, r2, r3
 800466e:	43db      	mvns	r3, r3
 8004670:	69ba      	ldr	r2, [r7, #24]
 8004672:	4013      	ands	r3, r2
 8004674:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	4a49      	ldr	r2, [pc, #292]	; (80047a0 <HAL_GPIO_Init+0x2f0>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d019      	beq.n	80046b2 <HAL_GPIO_Init+0x202>
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	4a48      	ldr	r2, [pc, #288]	; (80047a4 <HAL_GPIO_Init+0x2f4>)
 8004682:	4293      	cmp	r3, r2
 8004684:	d013      	beq.n	80046ae <HAL_GPIO_Init+0x1fe>
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	4a47      	ldr	r2, [pc, #284]	; (80047a8 <HAL_GPIO_Init+0x2f8>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d00d      	beq.n	80046aa <HAL_GPIO_Init+0x1fa>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	4a46      	ldr	r2, [pc, #280]	; (80047ac <HAL_GPIO_Init+0x2fc>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d007      	beq.n	80046a6 <HAL_GPIO_Init+0x1f6>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	4a45      	ldr	r2, [pc, #276]	; (80047b0 <HAL_GPIO_Init+0x300>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d101      	bne.n	80046a2 <HAL_GPIO_Init+0x1f2>
 800469e:	2304      	movs	r3, #4
 80046a0:	e008      	b.n	80046b4 <HAL_GPIO_Init+0x204>
 80046a2:	2307      	movs	r3, #7
 80046a4:	e006      	b.n	80046b4 <HAL_GPIO_Init+0x204>
 80046a6:	2303      	movs	r3, #3
 80046a8:	e004      	b.n	80046b4 <HAL_GPIO_Init+0x204>
 80046aa:	2302      	movs	r3, #2
 80046ac:	e002      	b.n	80046b4 <HAL_GPIO_Init+0x204>
 80046ae:	2301      	movs	r3, #1
 80046b0:	e000      	b.n	80046b4 <HAL_GPIO_Init+0x204>
 80046b2:	2300      	movs	r3, #0
 80046b4:	69fa      	ldr	r2, [r7, #28]
 80046b6:	f002 0203 	and.w	r2, r2, #3
 80046ba:	0092      	lsls	r2, r2, #2
 80046bc:	4093      	lsls	r3, r2
 80046be:	69ba      	ldr	r2, [r7, #24]
 80046c0:	4313      	orrs	r3, r2
 80046c2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80046c4:	4935      	ldr	r1, [pc, #212]	; (800479c <HAL_GPIO_Init+0x2ec>)
 80046c6:	69fb      	ldr	r3, [r7, #28]
 80046c8:	089b      	lsrs	r3, r3, #2
 80046ca:	3302      	adds	r3, #2
 80046cc:	69ba      	ldr	r2, [r7, #24]
 80046ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80046d2:	4b38      	ldr	r3, [pc, #224]	; (80047b4 <HAL_GPIO_Init+0x304>)
 80046d4:	689b      	ldr	r3, [r3, #8]
 80046d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80046d8:	693b      	ldr	r3, [r7, #16]
 80046da:	43db      	mvns	r3, r3
 80046dc:	69ba      	ldr	r2, [r7, #24]
 80046de:	4013      	ands	r3, r2
 80046e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	685b      	ldr	r3, [r3, #4]
 80046e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d003      	beq.n	80046f6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80046ee:	69ba      	ldr	r2, [r7, #24]
 80046f0:	693b      	ldr	r3, [r7, #16]
 80046f2:	4313      	orrs	r3, r2
 80046f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80046f6:	4a2f      	ldr	r2, [pc, #188]	; (80047b4 <HAL_GPIO_Init+0x304>)
 80046f8:	69bb      	ldr	r3, [r7, #24]
 80046fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80046fc:	4b2d      	ldr	r3, [pc, #180]	; (80047b4 <HAL_GPIO_Init+0x304>)
 80046fe:	68db      	ldr	r3, [r3, #12]
 8004700:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004702:	693b      	ldr	r3, [r7, #16]
 8004704:	43db      	mvns	r3, r3
 8004706:	69ba      	ldr	r2, [r7, #24]
 8004708:	4013      	ands	r3, r2
 800470a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	685b      	ldr	r3, [r3, #4]
 8004710:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004714:	2b00      	cmp	r3, #0
 8004716:	d003      	beq.n	8004720 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004718:	69ba      	ldr	r2, [r7, #24]
 800471a:	693b      	ldr	r3, [r7, #16]
 800471c:	4313      	orrs	r3, r2
 800471e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004720:	4a24      	ldr	r2, [pc, #144]	; (80047b4 <HAL_GPIO_Init+0x304>)
 8004722:	69bb      	ldr	r3, [r7, #24]
 8004724:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004726:	4b23      	ldr	r3, [pc, #140]	; (80047b4 <HAL_GPIO_Init+0x304>)
 8004728:	685b      	ldr	r3, [r3, #4]
 800472a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800472c:	693b      	ldr	r3, [r7, #16]
 800472e:	43db      	mvns	r3, r3
 8004730:	69ba      	ldr	r2, [r7, #24]
 8004732:	4013      	ands	r3, r2
 8004734:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	685b      	ldr	r3, [r3, #4]
 800473a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800473e:	2b00      	cmp	r3, #0
 8004740:	d003      	beq.n	800474a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8004742:	69ba      	ldr	r2, [r7, #24]
 8004744:	693b      	ldr	r3, [r7, #16]
 8004746:	4313      	orrs	r3, r2
 8004748:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800474a:	4a1a      	ldr	r2, [pc, #104]	; (80047b4 <HAL_GPIO_Init+0x304>)
 800474c:	69bb      	ldr	r3, [r7, #24]
 800474e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004750:	4b18      	ldr	r3, [pc, #96]	; (80047b4 <HAL_GPIO_Init+0x304>)
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004756:	693b      	ldr	r3, [r7, #16]
 8004758:	43db      	mvns	r3, r3
 800475a:	69ba      	ldr	r2, [r7, #24]
 800475c:	4013      	ands	r3, r2
 800475e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	685b      	ldr	r3, [r3, #4]
 8004764:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004768:	2b00      	cmp	r3, #0
 800476a:	d003      	beq.n	8004774 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800476c:	69ba      	ldr	r2, [r7, #24]
 800476e:	693b      	ldr	r3, [r7, #16]
 8004770:	4313      	orrs	r3, r2
 8004772:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004774:	4a0f      	ldr	r2, [pc, #60]	; (80047b4 <HAL_GPIO_Init+0x304>)
 8004776:	69bb      	ldr	r3, [r7, #24]
 8004778:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800477a:	69fb      	ldr	r3, [r7, #28]
 800477c:	3301      	adds	r3, #1
 800477e:	61fb      	str	r3, [r7, #28]
 8004780:	69fb      	ldr	r3, [r7, #28]
 8004782:	2b0f      	cmp	r3, #15
 8004784:	f67f aea2 	bls.w	80044cc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004788:	bf00      	nop
 800478a:	bf00      	nop
 800478c:	3724      	adds	r7, #36	; 0x24
 800478e:	46bd      	mov	sp, r7
 8004790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004794:	4770      	bx	lr
 8004796:	bf00      	nop
 8004798:	40023800 	.word	0x40023800
 800479c:	40013800 	.word	0x40013800
 80047a0:	40020000 	.word	0x40020000
 80047a4:	40020400 	.word	0x40020400
 80047a8:	40020800 	.word	0x40020800
 80047ac:	40020c00 	.word	0x40020c00
 80047b0:	40021000 	.word	0x40021000
 80047b4:	40013c00 	.word	0x40013c00

080047b8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80047b8:	b480      	push	{r7}
 80047ba:	b085      	sub	sp, #20
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
 80047c0:	460b      	mov	r3, r1
 80047c2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	691a      	ldr	r2, [r3, #16]
 80047c8:	887b      	ldrh	r3, [r7, #2]
 80047ca:	4013      	ands	r3, r2
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d002      	beq.n	80047d6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80047d0:	2301      	movs	r3, #1
 80047d2:	73fb      	strb	r3, [r7, #15]
 80047d4:	e001      	b.n	80047da <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80047d6:	2300      	movs	r3, #0
 80047d8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80047da:	7bfb      	ldrb	r3, [r7, #15]
}
 80047dc:	4618      	mov	r0, r3
 80047de:	3714      	adds	r7, #20
 80047e0:	46bd      	mov	sp, r7
 80047e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e6:	4770      	bx	lr

080047e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80047e8:	b480      	push	{r7}
 80047ea:	b083      	sub	sp, #12
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
 80047f0:	460b      	mov	r3, r1
 80047f2:	807b      	strh	r3, [r7, #2]
 80047f4:	4613      	mov	r3, r2
 80047f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80047f8:	787b      	ldrb	r3, [r7, #1]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d003      	beq.n	8004806 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80047fe:	887a      	ldrh	r2, [r7, #2]
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004804:	e003      	b.n	800480e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004806:	887b      	ldrh	r3, [r7, #2]
 8004808:	041a      	lsls	r2, r3, #16
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	619a      	str	r2, [r3, #24]
}
 800480e:	bf00      	nop
 8004810:	370c      	adds	r7, #12
 8004812:	46bd      	mov	sp, r7
 8004814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004818:	4770      	bx	lr
	...

0800481c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800481c:	b580      	push	{r7, lr}
 800481e:	b082      	sub	sp, #8
 8004820:	af00      	add	r7, sp, #0
 8004822:	4603      	mov	r3, r0
 8004824:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004826:	4b08      	ldr	r3, [pc, #32]	; (8004848 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004828:	695a      	ldr	r2, [r3, #20]
 800482a:	88fb      	ldrh	r3, [r7, #6]
 800482c:	4013      	ands	r3, r2
 800482e:	2b00      	cmp	r3, #0
 8004830:	d006      	beq.n	8004840 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004832:	4a05      	ldr	r2, [pc, #20]	; (8004848 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004834:	88fb      	ldrh	r3, [r7, #6]
 8004836:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004838:	88fb      	ldrh	r3, [r7, #6]
 800483a:	4618      	mov	r0, r3
 800483c:	f7fd ff00 	bl	8002640 <HAL_GPIO_EXTI_Callback>
  }
}
 8004840:	bf00      	nop
 8004842:	3708      	adds	r7, #8
 8004844:	46bd      	mov	sp, r7
 8004846:	bd80      	pop	{r7, pc}
 8004848:	40013c00 	.word	0x40013c00

0800484c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	b086      	sub	sp, #24
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d101      	bne.n	800485e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800485a:	2301      	movs	r3, #1
 800485c:	e267      	b.n	8004d2e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f003 0301 	and.w	r3, r3, #1
 8004866:	2b00      	cmp	r3, #0
 8004868:	d075      	beq.n	8004956 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800486a:	4b88      	ldr	r3, [pc, #544]	; (8004a8c <HAL_RCC_OscConfig+0x240>)
 800486c:	689b      	ldr	r3, [r3, #8]
 800486e:	f003 030c 	and.w	r3, r3, #12
 8004872:	2b04      	cmp	r3, #4
 8004874:	d00c      	beq.n	8004890 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004876:	4b85      	ldr	r3, [pc, #532]	; (8004a8c <HAL_RCC_OscConfig+0x240>)
 8004878:	689b      	ldr	r3, [r3, #8]
 800487a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800487e:	2b08      	cmp	r3, #8
 8004880:	d112      	bne.n	80048a8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004882:	4b82      	ldr	r3, [pc, #520]	; (8004a8c <HAL_RCC_OscConfig+0x240>)
 8004884:	685b      	ldr	r3, [r3, #4]
 8004886:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800488a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800488e:	d10b      	bne.n	80048a8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004890:	4b7e      	ldr	r3, [pc, #504]	; (8004a8c <HAL_RCC_OscConfig+0x240>)
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004898:	2b00      	cmp	r3, #0
 800489a:	d05b      	beq.n	8004954 <HAL_RCC_OscConfig+0x108>
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	685b      	ldr	r3, [r3, #4]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d157      	bne.n	8004954 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80048a4:	2301      	movs	r3, #1
 80048a6:	e242      	b.n	8004d2e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	685b      	ldr	r3, [r3, #4]
 80048ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048b0:	d106      	bne.n	80048c0 <HAL_RCC_OscConfig+0x74>
 80048b2:	4b76      	ldr	r3, [pc, #472]	; (8004a8c <HAL_RCC_OscConfig+0x240>)
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	4a75      	ldr	r2, [pc, #468]	; (8004a8c <HAL_RCC_OscConfig+0x240>)
 80048b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048bc:	6013      	str	r3, [r2, #0]
 80048be:	e01d      	b.n	80048fc <HAL_RCC_OscConfig+0xb0>
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	685b      	ldr	r3, [r3, #4]
 80048c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80048c8:	d10c      	bne.n	80048e4 <HAL_RCC_OscConfig+0x98>
 80048ca:	4b70      	ldr	r3, [pc, #448]	; (8004a8c <HAL_RCC_OscConfig+0x240>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	4a6f      	ldr	r2, [pc, #444]	; (8004a8c <HAL_RCC_OscConfig+0x240>)
 80048d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80048d4:	6013      	str	r3, [r2, #0]
 80048d6:	4b6d      	ldr	r3, [pc, #436]	; (8004a8c <HAL_RCC_OscConfig+0x240>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	4a6c      	ldr	r2, [pc, #432]	; (8004a8c <HAL_RCC_OscConfig+0x240>)
 80048dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048e0:	6013      	str	r3, [r2, #0]
 80048e2:	e00b      	b.n	80048fc <HAL_RCC_OscConfig+0xb0>
 80048e4:	4b69      	ldr	r3, [pc, #420]	; (8004a8c <HAL_RCC_OscConfig+0x240>)
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	4a68      	ldr	r2, [pc, #416]	; (8004a8c <HAL_RCC_OscConfig+0x240>)
 80048ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80048ee:	6013      	str	r3, [r2, #0]
 80048f0:	4b66      	ldr	r3, [pc, #408]	; (8004a8c <HAL_RCC_OscConfig+0x240>)
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	4a65      	ldr	r2, [pc, #404]	; (8004a8c <HAL_RCC_OscConfig+0x240>)
 80048f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80048fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	685b      	ldr	r3, [r3, #4]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d013      	beq.n	800492c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004904:	f7fe fd30 	bl	8003368 <HAL_GetTick>
 8004908:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800490a:	e008      	b.n	800491e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800490c:	f7fe fd2c 	bl	8003368 <HAL_GetTick>
 8004910:	4602      	mov	r2, r0
 8004912:	693b      	ldr	r3, [r7, #16]
 8004914:	1ad3      	subs	r3, r2, r3
 8004916:	2b64      	cmp	r3, #100	; 0x64
 8004918:	d901      	bls.n	800491e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800491a:	2303      	movs	r3, #3
 800491c:	e207      	b.n	8004d2e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800491e:	4b5b      	ldr	r3, [pc, #364]	; (8004a8c <HAL_RCC_OscConfig+0x240>)
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004926:	2b00      	cmp	r3, #0
 8004928:	d0f0      	beq.n	800490c <HAL_RCC_OscConfig+0xc0>
 800492a:	e014      	b.n	8004956 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800492c:	f7fe fd1c 	bl	8003368 <HAL_GetTick>
 8004930:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004932:	e008      	b.n	8004946 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004934:	f7fe fd18 	bl	8003368 <HAL_GetTick>
 8004938:	4602      	mov	r2, r0
 800493a:	693b      	ldr	r3, [r7, #16]
 800493c:	1ad3      	subs	r3, r2, r3
 800493e:	2b64      	cmp	r3, #100	; 0x64
 8004940:	d901      	bls.n	8004946 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004942:	2303      	movs	r3, #3
 8004944:	e1f3      	b.n	8004d2e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004946:	4b51      	ldr	r3, [pc, #324]	; (8004a8c <HAL_RCC_OscConfig+0x240>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800494e:	2b00      	cmp	r3, #0
 8004950:	d1f0      	bne.n	8004934 <HAL_RCC_OscConfig+0xe8>
 8004952:	e000      	b.n	8004956 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004954:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f003 0302 	and.w	r3, r3, #2
 800495e:	2b00      	cmp	r3, #0
 8004960:	d063      	beq.n	8004a2a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004962:	4b4a      	ldr	r3, [pc, #296]	; (8004a8c <HAL_RCC_OscConfig+0x240>)
 8004964:	689b      	ldr	r3, [r3, #8]
 8004966:	f003 030c 	and.w	r3, r3, #12
 800496a:	2b00      	cmp	r3, #0
 800496c:	d00b      	beq.n	8004986 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800496e:	4b47      	ldr	r3, [pc, #284]	; (8004a8c <HAL_RCC_OscConfig+0x240>)
 8004970:	689b      	ldr	r3, [r3, #8]
 8004972:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004976:	2b08      	cmp	r3, #8
 8004978:	d11c      	bne.n	80049b4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800497a:	4b44      	ldr	r3, [pc, #272]	; (8004a8c <HAL_RCC_OscConfig+0x240>)
 800497c:	685b      	ldr	r3, [r3, #4]
 800497e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004982:	2b00      	cmp	r3, #0
 8004984:	d116      	bne.n	80049b4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004986:	4b41      	ldr	r3, [pc, #260]	; (8004a8c <HAL_RCC_OscConfig+0x240>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f003 0302 	and.w	r3, r3, #2
 800498e:	2b00      	cmp	r3, #0
 8004990:	d005      	beq.n	800499e <HAL_RCC_OscConfig+0x152>
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	68db      	ldr	r3, [r3, #12]
 8004996:	2b01      	cmp	r3, #1
 8004998:	d001      	beq.n	800499e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800499a:	2301      	movs	r3, #1
 800499c:	e1c7      	b.n	8004d2e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800499e:	4b3b      	ldr	r3, [pc, #236]	; (8004a8c <HAL_RCC_OscConfig+0x240>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	691b      	ldr	r3, [r3, #16]
 80049aa:	00db      	lsls	r3, r3, #3
 80049ac:	4937      	ldr	r1, [pc, #220]	; (8004a8c <HAL_RCC_OscConfig+0x240>)
 80049ae:	4313      	orrs	r3, r2
 80049b0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80049b2:	e03a      	b.n	8004a2a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	68db      	ldr	r3, [r3, #12]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d020      	beq.n	80049fe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80049bc:	4b34      	ldr	r3, [pc, #208]	; (8004a90 <HAL_RCC_OscConfig+0x244>)
 80049be:	2201      	movs	r2, #1
 80049c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049c2:	f7fe fcd1 	bl	8003368 <HAL_GetTick>
 80049c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049c8:	e008      	b.n	80049dc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80049ca:	f7fe fccd 	bl	8003368 <HAL_GetTick>
 80049ce:	4602      	mov	r2, r0
 80049d0:	693b      	ldr	r3, [r7, #16]
 80049d2:	1ad3      	subs	r3, r2, r3
 80049d4:	2b02      	cmp	r3, #2
 80049d6:	d901      	bls.n	80049dc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80049d8:	2303      	movs	r3, #3
 80049da:	e1a8      	b.n	8004d2e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049dc:	4b2b      	ldr	r3, [pc, #172]	; (8004a8c <HAL_RCC_OscConfig+0x240>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f003 0302 	and.w	r3, r3, #2
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d0f0      	beq.n	80049ca <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049e8:	4b28      	ldr	r3, [pc, #160]	; (8004a8c <HAL_RCC_OscConfig+0x240>)
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	691b      	ldr	r3, [r3, #16]
 80049f4:	00db      	lsls	r3, r3, #3
 80049f6:	4925      	ldr	r1, [pc, #148]	; (8004a8c <HAL_RCC_OscConfig+0x240>)
 80049f8:	4313      	orrs	r3, r2
 80049fa:	600b      	str	r3, [r1, #0]
 80049fc:	e015      	b.n	8004a2a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80049fe:	4b24      	ldr	r3, [pc, #144]	; (8004a90 <HAL_RCC_OscConfig+0x244>)
 8004a00:	2200      	movs	r2, #0
 8004a02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a04:	f7fe fcb0 	bl	8003368 <HAL_GetTick>
 8004a08:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a0a:	e008      	b.n	8004a1e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004a0c:	f7fe fcac 	bl	8003368 <HAL_GetTick>
 8004a10:	4602      	mov	r2, r0
 8004a12:	693b      	ldr	r3, [r7, #16]
 8004a14:	1ad3      	subs	r3, r2, r3
 8004a16:	2b02      	cmp	r3, #2
 8004a18:	d901      	bls.n	8004a1e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004a1a:	2303      	movs	r3, #3
 8004a1c:	e187      	b.n	8004d2e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a1e:	4b1b      	ldr	r3, [pc, #108]	; (8004a8c <HAL_RCC_OscConfig+0x240>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f003 0302 	and.w	r3, r3, #2
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d1f0      	bne.n	8004a0c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f003 0308 	and.w	r3, r3, #8
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d036      	beq.n	8004aa4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	695b      	ldr	r3, [r3, #20]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d016      	beq.n	8004a6c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004a3e:	4b15      	ldr	r3, [pc, #84]	; (8004a94 <HAL_RCC_OscConfig+0x248>)
 8004a40:	2201      	movs	r2, #1
 8004a42:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a44:	f7fe fc90 	bl	8003368 <HAL_GetTick>
 8004a48:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a4a:	e008      	b.n	8004a5e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004a4c:	f7fe fc8c 	bl	8003368 <HAL_GetTick>
 8004a50:	4602      	mov	r2, r0
 8004a52:	693b      	ldr	r3, [r7, #16]
 8004a54:	1ad3      	subs	r3, r2, r3
 8004a56:	2b02      	cmp	r3, #2
 8004a58:	d901      	bls.n	8004a5e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004a5a:	2303      	movs	r3, #3
 8004a5c:	e167      	b.n	8004d2e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a5e:	4b0b      	ldr	r3, [pc, #44]	; (8004a8c <HAL_RCC_OscConfig+0x240>)
 8004a60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a62:	f003 0302 	and.w	r3, r3, #2
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d0f0      	beq.n	8004a4c <HAL_RCC_OscConfig+0x200>
 8004a6a:	e01b      	b.n	8004aa4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004a6c:	4b09      	ldr	r3, [pc, #36]	; (8004a94 <HAL_RCC_OscConfig+0x248>)
 8004a6e:	2200      	movs	r2, #0
 8004a70:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a72:	f7fe fc79 	bl	8003368 <HAL_GetTick>
 8004a76:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a78:	e00e      	b.n	8004a98 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004a7a:	f7fe fc75 	bl	8003368 <HAL_GetTick>
 8004a7e:	4602      	mov	r2, r0
 8004a80:	693b      	ldr	r3, [r7, #16]
 8004a82:	1ad3      	subs	r3, r2, r3
 8004a84:	2b02      	cmp	r3, #2
 8004a86:	d907      	bls.n	8004a98 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004a88:	2303      	movs	r3, #3
 8004a8a:	e150      	b.n	8004d2e <HAL_RCC_OscConfig+0x4e2>
 8004a8c:	40023800 	.word	0x40023800
 8004a90:	42470000 	.word	0x42470000
 8004a94:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a98:	4b88      	ldr	r3, [pc, #544]	; (8004cbc <HAL_RCC_OscConfig+0x470>)
 8004a9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a9c:	f003 0302 	and.w	r3, r3, #2
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d1ea      	bne.n	8004a7a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f003 0304 	and.w	r3, r3, #4
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	f000 8097 	beq.w	8004be0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004ab6:	4b81      	ldr	r3, [pc, #516]	; (8004cbc <HAL_RCC_OscConfig+0x470>)
 8004ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d10f      	bne.n	8004ae2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	60bb      	str	r3, [r7, #8]
 8004ac6:	4b7d      	ldr	r3, [pc, #500]	; (8004cbc <HAL_RCC_OscConfig+0x470>)
 8004ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aca:	4a7c      	ldr	r2, [pc, #496]	; (8004cbc <HAL_RCC_OscConfig+0x470>)
 8004acc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ad0:	6413      	str	r3, [r2, #64]	; 0x40
 8004ad2:	4b7a      	ldr	r3, [pc, #488]	; (8004cbc <HAL_RCC_OscConfig+0x470>)
 8004ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ad6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ada:	60bb      	str	r3, [r7, #8]
 8004adc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004ade:	2301      	movs	r3, #1
 8004ae0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ae2:	4b77      	ldr	r3, [pc, #476]	; (8004cc0 <HAL_RCC_OscConfig+0x474>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d118      	bne.n	8004b20 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004aee:	4b74      	ldr	r3, [pc, #464]	; (8004cc0 <HAL_RCC_OscConfig+0x474>)
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	4a73      	ldr	r2, [pc, #460]	; (8004cc0 <HAL_RCC_OscConfig+0x474>)
 8004af4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004af8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004afa:	f7fe fc35 	bl	8003368 <HAL_GetTick>
 8004afe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b00:	e008      	b.n	8004b14 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b02:	f7fe fc31 	bl	8003368 <HAL_GetTick>
 8004b06:	4602      	mov	r2, r0
 8004b08:	693b      	ldr	r3, [r7, #16]
 8004b0a:	1ad3      	subs	r3, r2, r3
 8004b0c:	2b02      	cmp	r3, #2
 8004b0e:	d901      	bls.n	8004b14 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004b10:	2303      	movs	r3, #3
 8004b12:	e10c      	b.n	8004d2e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b14:	4b6a      	ldr	r3, [pc, #424]	; (8004cc0 <HAL_RCC_OscConfig+0x474>)
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d0f0      	beq.n	8004b02 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	689b      	ldr	r3, [r3, #8]
 8004b24:	2b01      	cmp	r3, #1
 8004b26:	d106      	bne.n	8004b36 <HAL_RCC_OscConfig+0x2ea>
 8004b28:	4b64      	ldr	r3, [pc, #400]	; (8004cbc <HAL_RCC_OscConfig+0x470>)
 8004b2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b2c:	4a63      	ldr	r2, [pc, #396]	; (8004cbc <HAL_RCC_OscConfig+0x470>)
 8004b2e:	f043 0301 	orr.w	r3, r3, #1
 8004b32:	6713      	str	r3, [r2, #112]	; 0x70
 8004b34:	e01c      	b.n	8004b70 <HAL_RCC_OscConfig+0x324>
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	689b      	ldr	r3, [r3, #8]
 8004b3a:	2b05      	cmp	r3, #5
 8004b3c:	d10c      	bne.n	8004b58 <HAL_RCC_OscConfig+0x30c>
 8004b3e:	4b5f      	ldr	r3, [pc, #380]	; (8004cbc <HAL_RCC_OscConfig+0x470>)
 8004b40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b42:	4a5e      	ldr	r2, [pc, #376]	; (8004cbc <HAL_RCC_OscConfig+0x470>)
 8004b44:	f043 0304 	orr.w	r3, r3, #4
 8004b48:	6713      	str	r3, [r2, #112]	; 0x70
 8004b4a:	4b5c      	ldr	r3, [pc, #368]	; (8004cbc <HAL_RCC_OscConfig+0x470>)
 8004b4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b4e:	4a5b      	ldr	r2, [pc, #364]	; (8004cbc <HAL_RCC_OscConfig+0x470>)
 8004b50:	f043 0301 	orr.w	r3, r3, #1
 8004b54:	6713      	str	r3, [r2, #112]	; 0x70
 8004b56:	e00b      	b.n	8004b70 <HAL_RCC_OscConfig+0x324>
 8004b58:	4b58      	ldr	r3, [pc, #352]	; (8004cbc <HAL_RCC_OscConfig+0x470>)
 8004b5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b5c:	4a57      	ldr	r2, [pc, #348]	; (8004cbc <HAL_RCC_OscConfig+0x470>)
 8004b5e:	f023 0301 	bic.w	r3, r3, #1
 8004b62:	6713      	str	r3, [r2, #112]	; 0x70
 8004b64:	4b55      	ldr	r3, [pc, #340]	; (8004cbc <HAL_RCC_OscConfig+0x470>)
 8004b66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b68:	4a54      	ldr	r2, [pc, #336]	; (8004cbc <HAL_RCC_OscConfig+0x470>)
 8004b6a:	f023 0304 	bic.w	r3, r3, #4
 8004b6e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	689b      	ldr	r3, [r3, #8]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d015      	beq.n	8004ba4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b78:	f7fe fbf6 	bl	8003368 <HAL_GetTick>
 8004b7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b7e:	e00a      	b.n	8004b96 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b80:	f7fe fbf2 	bl	8003368 <HAL_GetTick>
 8004b84:	4602      	mov	r2, r0
 8004b86:	693b      	ldr	r3, [r7, #16]
 8004b88:	1ad3      	subs	r3, r2, r3
 8004b8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	d901      	bls.n	8004b96 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004b92:	2303      	movs	r3, #3
 8004b94:	e0cb      	b.n	8004d2e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b96:	4b49      	ldr	r3, [pc, #292]	; (8004cbc <HAL_RCC_OscConfig+0x470>)
 8004b98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b9a:	f003 0302 	and.w	r3, r3, #2
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d0ee      	beq.n	8004b80 <HAL_RCC_OscConfig+0x334>
 8004ba2:	e014      	b.n	8004bce <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ba4:	f7fe fbe0 	bl	8003368 <HAL_GetTick>
 8004ba8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004baa:	e00a      	b.n	8004bc2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004bac:	f7fe fbdc 	bl	8003368 <HAL_GetTick>
 8004bb0:	4602      	mov	r2, r0
 8004bb2:	693b      	ldr	r3, [r7, #16]
 8004bb4:	1ad3      	subs	r3, r2, r3
 8004bb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bba:	4293      	cmp	r3, r2
 8004bbc:	d901      	bls.n	8004bc2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004bbe:	2303      	movs	r3, #3
 8004bc0:	e0b5      	b.n	8004d2e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004bc2:	4b3e      	ldr	r3, [pc, #248]	; (8004cbc <HAL_RCC_OscConfig+0x470>)
 8004bc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bc6:	f003 0302 	and.w	r3, r3, #2
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d1ee      	bne.n	8004bac <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004bce:	7dfb      	ldrb	r3, [r7, #23]
 8004bd0:	2b01      	cmp	r3, #1
 8004bd2:	d105      	bne.n	8004be0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004bd4:	4b39      	ldr	r3, [pc, #228]	; (8004cbc <HAL_RCC_OscConfig+0x470>)
 8004bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bd8:	4a38      	ldr	r2, [pc, #224]	; (8004cbc <HAL_RCC_OscConfig+0x470>)
 8004bda:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004bde:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	699b      	ldr	r3, [r3, #24]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	f000 80a1 	beq.w	8004d2c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004bea:	4b34      	ldr	r3, [pc, #208]	; (8004cbc <HAL_RCC_OscConfig+0x470>)
 8004bec:	689b      	ldr	r3, [r3, #8]
 8004bee:	f003 030c 	and.w	r3, r3, #12
 8004bf2:	2b08      	cmp	r3, #8
 8004bf4:	d05c      	beq.n	8004cb0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	699b      	ldr	r3, [r3, #24]
 8004bfa:	2b02      	cmp	r3, #2
 8004bfc:	d141      	bne.n	8004c82 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004bfe:	4b31      	ldr	r3, [pc, #196]	; (8004cc4 <HAL_RCC_OscConfig+0x478>)
 8004c00:	2200      	movs	r2, #0
 8004c02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c04:	f7fe fbb0 	bl	8003368 <HAL_GetTick>
 8004c08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c0a:	e008      	b.n	8004c1e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c0c:	f7fe fbac 	bl	8003368 <HAL_GetTick>
 8004c10:	4602      	mov	r2, r0
 8004c12:	693b      	ldr	r3, [r7, #16]
 8004c14:	1ad3      	subs	r3, r2, r3
 8004c16:	2b02      	cmp	r3, #2
 8004c18:	d901      	bls.n	8004c1e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004c1a:	2303      	movs	r3, #3
 8004c1c:	e087      	b.n	8004d2e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c1e:	4b27      	ldr	r3, [pc, #156]	; (8004cbc <HAL_RCC_OscConfig+0x470>)
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d1f0      	bne.n	8004c0c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	69da      	ldr	r2, [r3, #28]
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6a1b      	ldr	r3, [r3, #32]
 8004c32:	431a      	orrs	r2, r3
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c38:	019b      	lsls	r3, r3, #6
 8004c3a:	431a      	orrs	r2, r3
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c40:	085b      	lsrs	r3, r3, #1
 8004c42:	3b01      	subs	r3, #1
 8004c44:	041b      	lsls	r3, r3, #16
 8004c46:	431a      	orrs	r2, r3
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c4c:	061b      	lsls	r3, r3, #24
 8004c4e:	491b      	ldr	r1, [pc, #108]	; (8004cbc <HAL_RCC_OscConfig+0x470>)
 8004c50:	4313      	orrs	r3, r2
 8004c52:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004c54:	4b1b      	ldr	r3, [pc, #108]	; (8004cc4 <HAL_RCC_OscConfig+0x478>)
 8004c56:	2201      	movs	r2, #1
 8004c58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c5a:	f7fe fb85 	bl	8003368 <HAL_GetTick>
 8004c5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c60:	e008      	b.n	8004c74 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c62:	f7fe fb81 	bl	8003368 <HAL_GetTick>
 8004c66:	4602      	mov	r2, r0
 8004c68:	693b      	ldr	r3, [r7, #16]
 8004c6a:	1ad3      	subs	r3, r2, r3
 8004c6c:	2b02      	cmp	r3, #2
 8004c6e:	d901      	bls.n	8004c74 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004c70:	2303      	movs	r3, #3
 8004c72:	e05c      	b.n	8004d2e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c74:	4b11      	ldr	r3, [pc, #68]	; (8004cbc <HAL_RCC_OscConfig+0x470>)
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d0f0      	beq.n	8004c62 <HAL_RCC_OscConfig+0x416>
 8004c80:	e054      	b.n	8004d2c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c82:	4b10      	ldr	r3, [pc, #64]	; (8004cc4 <HAL_RCC_OscConfig+0x478>)
 8004c84:	2200      	movs	r2, #0
 8004c86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c88:	f7fe fb6e 	bl	8003368 <HAL_GetTick>
 8004c8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c8e:	e008      	b.n	8004ca2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c90:	f7fe fb6a 	bl	8003368 <HAL_GetTick>
 8004c94:	4602      	mov	r2, r0
 8004c96:	693b      	ldr	r3, [r7, #16]
 8004c98:	1ad3      	subs	r3, r2, r3
 8004c9a:	2b02      	cmp	r3, #2
 8004c9c:	d901      	bls.n	8004ca2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004c9e:	2303      	movs	r3, #3
 8004ca0:	e045      	b.n	8004d2e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ca2:	4b06      	ldr	r3, [pc, #24]	; (8004cbc <HAL_RCC_OscConfig+0x470>)
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d1f0      	bne.n	8004c90 <HAL_RCC_OscConfig+0x444>
 8004cae:	e03d      	b.n	8004d2c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	699b      	ldr	r3, [r3, #24]
 8004cb4:	2b01      	cmp	r3, #1
 8004cb6:	d107      	bne.n	8004cc8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004cb8:	2301      	movs	r3, #1
 8004cba:	e038      	b.n	8004d2e <HAL_RCC_OscConfig+0x4e2>
 8004cbc:	40023800 	.word	0x40023800
 8004cc0:	40007000 	.word	0x40007000
 8004cc4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004cc8:	4b1b      	ldr	r3, [pc, #108]	; (8004d38 <HAL_RCC_OscConfig+0x4ec>)
 8004cca:	685b      	ldr	r3, [r3, #4]
 8004ccc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	699b      	ldr	r3, [r3, #24]
 8004cd2:	2b01      	cmp	r3, #1
 8004cd4:	d028      	beq.n	8004d28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004ce0:	429a      	cmp	r2, r3
 8004ce2:	d121      	bne.n	8004d28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004cee:	429a      	cmp	r2, r3
 8004cf0:	d11a      	bne.n	8004d28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004cf2:	68fa      	ldr	r2, [r7, #12]
 8004cf4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004cf8:	4013      	ands	r3, r2
 8004cfa:	687a      	ldr	r2, [r7, #4]
 8004cfc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004cfe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004d00:	4293      	cmp	r3, r2
 8004d02:	d111      	bne.n	8004d28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d0e:	085b      	lsrs	r3, r3, #1
 8004d10:	3b01      	subs	r3, #1
 8004d12:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004d14:	429a      	cmp	r2, r3
 8004d16:	d107      	bne.n	8004d28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d22:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004d24:	429a      	cmp	r2, r3
 8004d26:	d001      	beq.n	8004d2c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004d28:	2301      	movs	r3, #1
 8004d2a:	e000      	b.n	8004d2e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004d2c:	2300      	movs	r3, #0
}
 8004d2e:	4618      	mov	r0, r3
 8004d30:	3718      	adds	r7, #24
 8004d32:	46bd      	mov	sp, r7
 8004d34:	bd80      	pop	{r7, pc}
 8004d36:	bf00      	nop
 8004d38:	40023800 	.word	0x40023800

08004d3c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b084      	sub	sp, #16
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
 8004d44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d101      	bne.n	8004d50 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004d4c:	2301      	movs	r3, #1
 8004d4e:	e0cc      	b.n	8004eea <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004d50:	4b68      	ldr	r3, [pc, #416]	; (8004ef4 <HAL_RCC_ClockConfig+0x1b8>)
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f003 0307 	and.w	r3, r3, #7
 8004d58:	683a      	ldr	r2, [r7, #0]
 8004d5a:	429a      	cmp	r2, r3
 8004d5c:	d90c      	bls.n	8004d78 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d5e:	4b65      	ldr	r3, [pc, #404]	; (8004ef4 <HAL_RCC_ClockConfig+0x1b8>)
 8004d60:	683a      	ldr	r2, [r7, #0]
 8004d62:	b2d2      	uxtb	r2, r2
 8004d64:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d66:	4b63      	ldr	r3, [pc, #396]	; (8004ef4 <HAL_RCC_ClockConfig+0x1b8>)
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f003 0307 	and.w	r3, r3, #7
 8004d6e:	683a      	ldr	r2, [r7, #0]
 8004d70:	429a      	cmp	r2, r3
 8004d72:	d001      	beq.n	8004d78 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004d74:	2301      	movs	r3, #1
 8004d76:	e0b8      	b.n	8004eea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f003 0302 	and.w	r3, r3, #2
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d020      	beq.n	8004dc6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f003 0304 	and.w	r3, r3, #4
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d005      	beq.n	8004d9c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004d90:	4b59      	ldr	r3, [pc, #356]	; (8004ef8 <HAL_RCC_ClockConfig+0x1bc>)
 8004d92:	689b      	ldr	r3, [r3, #8]
 8004d94:	4a58      	ldr	r2, [pc, #352]	; (8004ef8 <HAL_RCC_ClockConfig+0x1bc>)
 8004d96:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004d9a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f003 0308 	and.w	r3, r3, #8
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d005      	beq.n	8004db4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004da8:	4b53      	ldr	r3, [pc, #332]	; (8004ef8 <HAL_RCC_ClockConfig+0x1bc>)
 8004daa:	689b      	ldr	r3, [r3, #8]
 8004dac:	4a52      	ldr	r2, [pc, #328]	; (8004ef8 <HAL_RCC_ClockConfig+0x1bc>)
 8004dae:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004db2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004db4:	4b50      	ldr	r3, [pc, #320]	; (8004ef8 <HAL_RCC_ClockConfig+0x1bc>)
 8004db6:	689b      	ldr	r3, [r3, #8]
 8004db8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	689b      	ldr	r3, [r3, #8]
 8004dc0:	494d      	ldr	r1, [pc, #308]	; (8004ef8 <HAL_RCC_ClockConfig+0x1bc>)
 8004dc2:	4313      	orrs	r3, r2
 8004dc4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f003 0301 	and.w	r3, r3, #1
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d044      	beq.n	8004e5c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	685b      	ldr	r3, [r3, #4]
 8004dd6:	2b01      	cmp	r3, #1
 8004dd8:	d107      	bne.n	8004dea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004dda:	4b47      	ldr	r3, [pc, #284]	; (8004ef8 <HAL_RCC_ClockConfig+0x1bc>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d119      	bne.n	8004e1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004de6:	2301      	movs	r3, #1
 8004de8:	e07f      	b.n	8004eea <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	685b      	ldr	r3, [r3, #4]
 8004dee:	2b02      	cmp	r3, #2
 8004df0:	d003      	beq.n	8004dfa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004df6:	2b03      	cmp	r3, #3
 8004df8:	d107      	bne.n	8004e0a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004dfa:	4b3f      	ldr	r3, [pc, #252]	; (8004ef8 <HAL_RCC_ClockConfig+0x1bc>)
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d109      	bne.n	8004e1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e06:	2301      	movs	r3, #1
 8004e08:	e06f      	b.n	8004eea <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e0a:	4b3b      	ldr	r3, [pc, #236]	; (8004ef8 <HAL_RCC_ClockConfig+0x1bc>)
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f003 0302 	and.w	r3, r3, #2
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d101      	bne.n	8004e1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e16:	2301      	movs	r3, #1
 8004e18:	e067      	b.n	8004eea <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004e1a:	4b37      	ldr	r3, [pc, #220]	; (8004ef8 <HAL_RCC_ClockConfig+0x1bc>)
 8004e1c:	689b      	ldr	r3, [r3, #8]
 8004e1e:	f023 0203 	bic.w	r2, r3, #3
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	685b      	ldr	r3, [r3, #4]
 8004e26:	4934      	ldr	r1, [pc, #208]	; (8004ef8 <HAL_RCC_ClockConfig+0x1bc>)
 8004e28:	4313      	orrs	r3, r2
 8004e2a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004e2c:	f7fe fa9c 	bl	8003368 <HAL_GetTick>
 8004e30:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e32:	e00a      	b.n	8004e4a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e34:	f7fe fa98 	bl	8003368 <HAL_GetTick>
 8004e38:	4602      	mov	r2, r0
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	1ad3      	subs	r3, r2, r3
 8004e3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d901      	bls.n	8004e4a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004e46:	2303      	movs	r3, #3
 8004e48:	e04f      	b.n	8004eea <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e4a:	4b2b      	ldr	r3, [pc, #172]	; (8004ef8 <HAL_RCC_ClockConfig+0x1bc>)
 8004e4c:	689b      	ldr	r3, [r3, #8]
 8004e4e:	f003 020c 	and.w	r2, r3, #12
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	685b      	ldr	r3, [r3, #4]
 8004e56:	009b      	lsls	r3, r3, #2
 8004e58:	429a      	cmp	r2, r3
 8004e5a:	d1eb      	bne.n	8004e34 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004e5c:	4b25      	ldr	r3, [pc, #148]	; (8004ef4 <HAL_RCC_ClockConfig+0x1b8>)
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f003 0307 	and.w	r3, r3, #7
 8004e64:	683a      	ldr	r2, [r7, #0]
 8004e66:	429a      	cmp	r2, r3
 8004e68:	d20c      	bcs.n	8004e84 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e6a:	4b22      	ldr	r3, [pc, #136]	; (8004ef4 <HAL_RCC_ClockConfig+0x1b8>)
 8004e6c:	683a      	ldr	r2, [r7, #0]
 8004e6e:	b2d2      	uxtb	r2, r2
 8004e70:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e72:	4b20      	ldr	r3, [pc, #128]	; (8004ef4 <HAL_RCC_ClockConfig+0x1b8>)
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f003 0307 	and.w	r3, r3, #7
 8004e7a:	683a      	ldr	r2, [r7, #0]
 8004e7c:	429a      	cmp	r2, r3
 8004e7e:	d001      	beq.n	8004e84 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004e80:	2301      	movs	r3, #1
 8004e82:	e032      	b.n	8004eea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f003 0304 	and.w	r3, r3, #4
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d008      	beq.n	8004ea2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004e90:	4b19      	ldr	r3, [pc, #100]	; (8004ef8 <HAL_RCC_ClockConfig+0x1bc>)
 8004e92:	689b      	ldr	r3, [r3, #8]
 8004e94:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	68db      	ldr	r3, [r3, #12]
 8004e9c:	4916      	ldr	r1, [pc, #88]	; (8004ef8 <HAL_RCC_ClockConfig+0x1bc>)
 8004e9e:	4313      	orrs	r3, r2
 8004ea0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f003 0308 	and.w	r3, r3, #8
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d009      	beq.n	8004ec2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004eae:	4b12      	ldr	r3, [pc, #72]	; (8004ef8 <HAL_RCC_ClockConfig+0x1bc>)
 8004eb0:	689b      	ldr	r3, [r3, #8]
 8004eb2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	691b      	ldr	r3, [r3, #16]
 8004eba:	00db      	lsls	r3, r3, #3
 8004ebc:	490e      	ldr	r1, [pc, #56]	; (8004ef8 <HAL_RCC_ClockConfig+0x1bc>)
 8004ebe:	4313      	orrs	r3, r2
 8004ec0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004ec2:	f000 f821 	bl	8004f08 <HAL_RCC_GetSysClockFreq>
 8004ec6:	4602      	mov	r2, r0
 8004ec8:	4b0b      	ldr	r3, [pc, #44]	; (8004ef8 <HAL_RCC_ClockConfig+0x1bc>)
 8004eca:	689b      	ldr	r3, [r3, #8]
 8004ecc:	091b      	lsrs	r3, r3, #4
 8004ece:	f003 030f 	and.w	r3, r3, #15
 8004ed2:	490a      	ldr	r1, [pc, #40]	; (8004efc <HAL_RCC_ClockConfig+0x1c0>)
 8004ed4:	5ccb      	ldrb	r3, [r1, r3]
 8004ed6:	fa22 f303 	lsr.w	r3, r2, r3
 8004eda:	4a09      	ldr	r2, [pc, #36]	; (8004f00 <HAL_RCC_ClockConfig+0x1c4>)
 8004edc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004ede:	4b09      	ldr	r3, [pc, #36]	; (8004f04 <HAL_RCC_ClockConfig+0x1c8>)
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	f7fe f9fc 	bl	80032e0 <HAL_InitTick>

  return HAL_OK;
 8004ee8:	2300      	movs	r3, #0
}
 8004eea:	4618      	mov	r0, r3
 8004eec:	3710      	adds	r7, #16
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	bd80      	pop	{r7, pc}
 8004ef2:	bf00      	nop
 8004ef4:	40023c00 	.word	0x40023c00
 8004ef8:	40023800 	.word	0x40023800
 8004efc:	0800dc80 	.word	0x0800dc80
 8004f00:	200000b4 	.word	0x200000b4
 8004f04:	200000b8 	.word	0x200000b8

08004f08 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004f08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004f0c:	b090      	sub	sp, #64	; 0x40
 8004f0e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004f10:	2300      	movs	r3, #0
 8004f12:	637b      	str	r3, [r7, #52]	; 0x34
 8004f14:	2300      	movs	r3, #0
 8004f16:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004f18:	2300      	movs	r3, #0
 8004f1a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004f20:	4b59      	ldr	r3, [pc, #356]	; (8005088 <HAL_RCC_GetSysClockFreq+0x180>)
 8004f22:	689b      	ldr	r3, [r3, #8]
 8004f24:	f003 030c 	and.w	r3, r3, #12
 8004f28:	2b08      	cmp	r3, #8
 8004f2a:	d00d      	beq.n	8004f48 <HAL_RCC_GetSysClockFreq+0x40>
 8004f2c:	2b08      	cmp	r3, #8
 8004f2e:	f200 80a1 	bhi.w	8005074 <HAL_RCC_GetSysClockFreq+0x16c>
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d002      	beq.n	8004f3c <HAL_RCC_GetSysClockFreq+0x34>
 8004f36:	2b04      	cmp	r3, #4
 8004f38:	d003      	beq.n	8004f42 <HAL_RCC_GetSysClockFreq+0x3a>
 8004f3a:	e09b      	b.n	8005074 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004f3c:	4b53      	ldr	r3, [pc, #332]	; (800508c <HAL_RCC_GetSysClockFreq+0x184>)
 8004f3e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8004f40:	e09b      	b.n	800507a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004f42:	4b53      	ldr	r3, [pc, #332]	; (8005090 <HAL_RCC_GetSysClockFreq+0x188>)
 8004f44:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004f46:	e098      	b.n	800507a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004f48:	4b4f      	ldr	r3, [pc, #316]	; (8005088 <HAL_RCC_GetSysClockFreq+0x180>)
 8004f4a:	685b      	ldr	r3, [r3, #4]
 8004f4c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004f50:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004f52:	4b4d      	ldr	r3, [pc, #308]	; (8005088 <HAL_RCC_GetSysClockFreq+0x180>)
 8004f54:	685b      	ldr	r3, [r3, #4]
 8004f56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d028      	beq.n	8004fb0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004f5e:	4b4a      	ldr	r3, [pc, #296]	; (8005088 <HAL_RCC_GetSysClockFreq+0x180>)
 8004f60:	685b      	ldr	r3, [r3, #4]
 8004f62:	099b      	lsrs	r3, r3, #6
 8004f64:	2200      	movs	r2, #0
 8004f66:	623b      	str	r3, [r7, #32]
 8004f68:	627a      	str	r2, [r7, #36]	; 0x24
 8004f6a:	6a3b      	ldr	r3, [r7, #32]
 8004f6c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004f70:	2100      	movs	r1, #0
 8004f72:	4b47      	ldr	r3, [pc, #284]	; (8005090 <HAL_RCC_GetSysClockFreq+0x188>)
 8004f74:	fb03 f201 	mul.w	r2, r3, r1
 8004f78:	2300      	movs	r3, #0
 8004f7a:	fb00 f303 	mul.w	r3, r0, r3
 8004f7e:	4413      	add	r3, r2
 8004f80:	4a43      	ldr	r2, [pc, #268]	; (8005090 <HAL_RCC_GetSysClockFreq+0x188>)
 8004f82:	fba0 1202 	umull	r1, r2, r0, r2
 8004f86:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004f88:	460a      	mov	r2, r1
 8004f8a:	62ba      	str	r2, [r7, #40]	; 0x28
 8004f8c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004f8e:	4413      	add	r3, r2
 8004f90:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f94:	2200      	movs	r2, #0
 8004f96:	61bb      	str	r3, [r7, #24]
 8004f98:	61fa      	str	r2, [r7, #28]
 8004f9a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004f9e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004fa2:	f7fb f96d 	bl	8000280 <__aeabi_uldivmod>
 8004fa6:	4602      	mov	r2, r0
 8004fa8:	460b      	mov	r3, r1
 8004faa:	4613      	mov	r3, r2
 8004fac:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004fae:	e053      	b.n	8005058 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004fb0:	4b35      	ldr	r3, [pc, #212]	; (8005088 <HAL_RCC_GetSysClockFreq+0x180>)
 8004fb2:	685b      	ldr	r3, [r3, #4]
 8004fb4:	099b      	lsrs	r3, r3, #6
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	613b      	str	r3, [r7, #16]
 8004fba:	617a      	str	r2, [r7, #20]
 8004fbc:	693b      	ldr	r3, [r7, #16]
 8004fbe:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004fc2:	f04f 0b00 	mov.w	fp, #0
 8004fc6:	4652      	mov	r2, sl
 8004fc8:	465b      	mov	r3, fp
 8004fca:	f04f 0000 	mov.w	r0, #0
 8004fce:	f04f 0100 	mov.w	r1, #0
 8004fd2:	0159      	lsls	r1, r3, #5
 8004fd4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004fd8:	0150      	lsls	r0, r2, #5
 8004fda:	4602      	mov	r2, r0
 8004fdc:	460b      	mov	r3, r1
 8004fde:	ebb2 080a 	subs.w	r8, r2, sl
 8004fe2:	eb63 090b 	sbc.w	r9, r3, fp
 8004fe6:	f04f 0200 	mov.w	r2, #0
 8004fea:	f04f 0300 	mov.w	r3, #0
 8004fee:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004ff2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004ff6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004ffa:	ebb2 0408 	subs.w	r4, r2, r8
 8004ffe:	eb63 0509 	sbc.w	r5, r3, r9
 8005002:	f04f 0200 	mov.w	r2, #0
 8005006:	f04f 0300 	mov.w	r3, #0
 800500a:	00eb      	lsls	r3, r5, #3
 800500c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005010:	00e2      	lsls	r2, r4, #3
 8005012:	4614      	mov	r4, r2
 8005014:	461d      	mov	r5, r3
 8005016:	eb14 030a 	adds.w	r3, r4, sl
 800501a:	603b      	str	r3, [r7, #0]
 800501c:	eb45 030b 	adc.w	r3, r5, fp
 8005020:	607b      	str	r3, [r7, #4]
 8005022:	f04f 0200 	mov.w	r2, #0
 8005026:	f04f 0300 	mov.w	r3, #0
 800502a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800502e:	4629      	mov	r1, r5
 8005030:	028b      	lsls	r3, r1, #10
 8005032:	4621      	mov	r1, r4
 8005034:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005038:	4621      	mov	r1, r4
 800503a:	028a      	lsls	r2, r1, #10
 800503c:	4610      	mov	r0, r2
 800503e:	4619      	mov	r1, r3
 8005040:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005042:	2200      	movs	r2, #0
 8005044:	60bb      	str	r3, [r7, #8]
 8005046:	60fa      	str	r2, [r7, #12]
 8005048:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800504c:	f7fb f918 	bl	8000280 <__aeabi_uldivmod>
 8005050:	4602      	mov	r2, r0
 8005052:	460b      	mov	r3, r1
 8005054:	4613      	mov	r3, r2
 8005056:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005058:	4b0b      	ldr	r3, [pc, #44]	; (8005088 <HAL_RCC_GetSysClockFreq+0x180>)
 800505a:	685b      	ldr	r3, [r3, #4]
 800505c:	0c1b      	lsrs	r3, r3, #16
 800505e:	f003 0303 	and.w	r3, r3, #3
 8005062:	3301      	adds	r3, #1
 8005064:	005b      	lsls	r3, r3, #1
 8005066:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8005068:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800506a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800506c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005070:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005072:	e002      	b.n	800507a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005074:	4b05      	ldr	r3, [pc, #20]	; (800508c <HAL_RCC_GetSysClockFreq+0x184>)
 8005076:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005078:	bf00      	nop
    }
  }
  return sysclockfreq;
 800507a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800507c:	4618      	mov	r0, r3
 800507e:	3740      	adds	r7, #64	; 0x40
 8005080:	46bd      	mov	sp, r7
 8005082:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005086:	bf00      	nop
 8005088:	40023800 	.word	0x40023800
 800508c:	00f42400 	.word	0x00f42400
 8005090:	017d7840 	.word	0x017d7840

08005094 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005094:	b480      	push	{r7}
 8005096:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005098:	4b03      	ldr	r3, [pc, #12]	; (80050a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800509a:	681b      	ldr	r3, [r3, #0]
}
 800509c:	4618      	mov	r0, r3
 800509e:	46bd      	mov	sp, r7
 80050a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a4:	4770      	bx	lr
 80050a6:	bf00      	nop
 80050a8:	200000b4 	.word	0x200000b4

080050ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80050ac:	b580      	push	{r7, lr}
 80050ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80050b0:	f7ff fff0 	bl	8005094 <HAL_RCC_GetHCLKFreq>
 80050b4:	4602      	mov	r2, r0
 80050b6:	4b05      	ldr	r3, [pc, #20]	; (80050cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80050b8:	689b      	ldr	r3, [r3, #8]
 80050ba:	0a9b      	lsrs	r3, r3, #10
 80050bc:	f003 0307 	and.w	r3, r3, #7
 80050c0:	4903      	ldr	r1, [pc, #12]	; (80050d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80050c2:	5ccb      	ldrb	r3, [r1, r3]
 80050c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80050c8:	4618      	mov	r0, r3
 80050ca:	bd80      	pop	{r7, pc}
 80050cc:	40023800 	.word	0x40023800
 80050d0:	0800dc90 	.word	0x0800dc90

080050d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80050d4:	b580      	push	{r7, lr}
 80050d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80050d8:	f7ff ffdc 	bl	8005094 <HAL_RCC_GetHCLKFreq>
 80050dc:	4602      	mov	r2, r0
 80050de:	4b05      	ldr	r3, [pc, #20]	; (80050f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80050e0:	689b      	ldr	r3, [r3, #8]
 80050e2:	0b5b      	lsrs	r3, r3, #13
 80050e4:	f003 0307 	and.w	r3, r3, #7
 80050e8:	4903      	ldr	r1, [pc, #12]	; (80050f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80050ea:	5ccb      	ldrb	r3, [r1, r3]
 80050ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80050f0:	4618      	mov	r0, r3
 80050f2:	bd80      	pop	{r7, pc}
 80050f4:	40023800 	.word	0x40023800
 80050f8:	0800dc90 	.word	0x0800dc90

080050fc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80050fc:	b580      	push	{r7, lr}
 80050fe:	b082      	sub	sp, #8
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d101      	bne.n	800510e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800510a:	2301      	movs	r3, #1
 800510c:	e07b      	b.n	8005206 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005112:	2b00      	cmp	r3, #0
 8005114:	d108      	bne.n	8005128 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	685b      	ldr	r3, [r3, #4]
 800511a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800511e:	d009      	beq.n	8005134 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2200      	movs	r2, #0
 8005124:	61da      	str	r2, [r3, #28]
 8005126:	e005      	b.n	8005134 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2200      	movs	r2, #0
 800512c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2200      	movs	r2, #0
 8005132:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2200      	movs	r2, #0
 8005138:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005140:	b2db      	uxtb	r3, r3
 8005142:	2b00      	cmp	r3, #0
 8005144:	d106      	bne.n	8005154 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2200      	movs	r2, #0
 800514a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800514e:	6878      	ldr	r0, [r7, #4]
 8005150:	f7fd fcd0 	bl	8002af4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2202      	movs	r2, #2
 8005158:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	681a      	ldr	r2, [r3, #0]
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800516a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	685b      	ldr	r3, [r3, #4]
 8005170:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	689b      	ldr	r3, [r3, #8]
 8005178:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800517c:	431a      	orrs	r2, r3
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	68db      	ldr	r3, [r3, #12]
 8005182:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005186:	431a      	orrs	r2, r3
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	691b      	ldr	r3, [r3, #16]
 800518c:	f003 0302 	and.w	r3, r3, #2
 8005190:	431a      	orrs	r2, r3
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	695b      	ldr	r3, [r3, #20]
 8005196:	f003 0301 	and.w	r3, r3, #1
 800519a:	431a      	orrs	r2, r3
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	699b      	ldr	r3, [r3, #24]
 80051a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80051a4:	431a      	orrs	r2, r3
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	69db      	ldr	r3, [r3, #28]
 80051aa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80051ae:	431a      	orrs	r2, r3
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	6a1b      	ldr	r3, [r3, #32]
 80051b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051b8:	ea42 0103 	orr.w	r1, r2, r3
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051c0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	430a      	orrs	r2, r1
 80051ca:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	699b      	ldr	r3, [r3, #24]
 80051d0:	0c1b      	lsrs	r3, r3, #16
 80051d2:	f003 0104 	and.w	r1, r3, #4
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051da:	f003 0210 	and.w	r2, r3, #16
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	430a      	orrs	r2, r1
 80051e4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	69da      	ldr	r2, [r3, #28]
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80051f4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	2200      	movs	r2, #0
 80051fa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2201      	movs	r2, #1
 8005200:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005204:	2300      	movs	r3, #0
}
 8005206:	4618      	mov	r0, r3
 8005208:	3708      	adds	r7, #8
 800520a:	46bd      	mov	sp, r7
 800520c:	bd80      	pop	{r7, pc}

0800520e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800520e:	b580      	push	{r7, lr}
 8005210:	b088      	sub	sp, #32
 8005212:	af00      	add	r7, sp, #0
 8005214:	60f8      	str	r0, [r7, #12]
 8005216:	60b9      	str	r1, [r7, #8]
 8005218:	603b      	str	r3, [r7, #0]
 800521a:	4613      	mov	r3, r2
 800521c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800521e:	2300      	movs	r3, #0
 8005220:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005228:	2b01      	cmp	r3, #1
 800522a:	d101      	bne.n	8005230 <HAL_SPI_Transmit+0x22>
 800522c:	2302      	movs	r3, #2
 800522e:	e126      	b.n	800547e <HAL_SPI_Transmit+0x270>
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	2201      	movs	r2, #1
 8005234:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005238:	f7fe f896 	bl	8003368 <HAL_GetTick>
 800523c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800523e:	88fb      	ldrh	r3, [r7, #6]
 8005240:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005248:	b2db      	uxtb	r3, r3
 800524a:	2b01      	cmp	r3, #1
 800524c:	d002      	beq.n	8005254 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800524e:	2302      	movs	r3, #2
 8005250:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005252:	e10b      	b.n	800546c <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005254:	68bb      	ldr	r3, [r7, #8]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d002      	beq.n	8005260 <HAL_SPI_Transmit+0x52>
 800525a:	88fb      	ldrh	r3, [r7, #6]
 800525c:	2b00      	cmp	r3, #0
 800525e:	d102      	bne.n	8005266 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005260:	2301      	movs	r3, #1
 8005262:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005264:	e102      	b.n	800546c <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	2203      	movs	r2, #3
 800526a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	2200      	movs	r2, #0
 8005272:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	68ba      	ldr	r2, [r7, #8]
 8005278:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	88fa      	ldrh	r2, [r7, #6]
 800527e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	88fa      	ldrh	r2, [r7, #6]
 8005284:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	2200      	movs	r2, #0
 800528a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	2200      	movs	r2, #0
 8005290:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	2200      	movs	r2, #0
 8005296:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	2200      	movs	r2, #0
 800529c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	2200      	movs	r2, #0
 80052a2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	689b      	ldr	r3, [r3, #8]
 80052a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80052ac:	d10f      	bne.n	80052ce <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	681a      	ldr	r2, [r3, #0]
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80052bc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	681a      	ldr	r2, [r3, #0]
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80052cc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052d8:	2b40      	cmp	r3, #64	; 0x40
 80052da:	d007      	beq.n	80052ec <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	681a      	ldr	r2, [r3, #0]
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80052ea:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	68db      	ldr	r3, [r3, #12]
 80052f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80052f4:	d14b      	bne.n	800538e <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	685b      	ldr	r3, [r3, #4]
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d002      	beq.n	8005304 <HAL_SPI_Transmit+0xf6>
 80052fe:	8afb      	ldrh	r3, [r7, #22]
 8005300:	2b01      	cmp	r3, #1
 8005302:	d13e      	bne.n	8005382 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005308:	881a      	ldrh	r2, [r3, #0]
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005314:	1c9a      	adds	r2, r3, #2
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800531e:	b29b      	uxth	r3, r3
 8005320:	3b01      	subs	r3, #1
 8005322:	b29a      	uxth	r2, r3
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005328:	e02b      	b.n	8005382 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	689b      	ldr	r3, [r3, #8]
 8005330:	f003 0302 	and.w	r3, r3, #2
 8005334:	2b02      	cmp	r3, #2
 8005336:	d112      	bne.n	800535e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800533c:	881a      	ldrh	r2, [r3, #0]
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005348:	1c9a      	adds	r2, r3, #2
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005352:	b29b      	uxth	r3, r3
 8005354:	3b01      	subs	r3, #1
 8005356:	b29a      	uxth	r2, r3
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	86da      	strh	r2, [r3, #54]	; 0x36
 800535c:	e011      	b.n	8005382 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800535e:	f7fe f803 	bl	8003368 <HAL_GetTick>
 8005362:	4602      	mov	r2, r0
 8005364:	69bb      	ldr	r3, [r7, #24]
 8005366:	1ad3      	subs	r3, r2, r3
 8005368:	683a      	ldr	r2, [r7, #0]
 800536a:	429a      	cmp	r2, r3
 800536c:	d803      	bhi.n	8005376 <HAL_SPI_Transmit+0x168>
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005374:	d102      	bne.n	800537c <HAL_SPI_Transmit+0x16e>
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d102      	bne.n	8005382 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800537c:	2303      	movs	r3, #3
 800537e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005380:	e074      	b.n	800546c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005386:	b29b      	uxth	r3, r3
 8005388:	2b00      	cmp	r3, #0
 800538a:	d1ce      	bne.n	800532a <HAL_SPI_Transmit+0x11c>
 800538c:	e04c      	b.n	8005428 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	685b      	ldr	r3, [r3, #4]
 8005392:	2b00      	cmp	r3, #0
 8005394:	d002      	beq.n	800539c <HAL_SPI_Transmit+0x18e>
 8005396:	8afb      	ldrh	r3, [r7, #22]
 8005398:	2b01      	cmp	r3, #1
 800539a:	d140      	bne.n	800541e <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	330c      	adds	r3, #12
 80053a6:	7812      	ldrb	r2, [r2, #0]
 80053a8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053ae:	1c5a      	adds	r2, r3, #1
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80053b8:	b29b      	uxth	r3, r3
 80053ba:	3b01      	subs	r3, #1
 80053bc:	b29a      	uxth	r2, r3
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80053c2:	e02c      	b.n	800541e <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	689b      	ldr	r3, [r3, #8]
 80053ca:	f003 0302 	and.w	r3, r3, #2
 80053ce:	2b02      	cmp	r3, #2
 80053d0:	d113      	bne.n	80053fa <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	330c      	adds	r3, #12
 80053dc:	7812      	ldrb	r2, [r2, #0]
 80053de:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053e4:	1c5a      	adds	r2, r3, #1
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80053ee:	b29b      	uxth	r3, r3
 80053f0:	3b01      	subs	r3, #1
 80053f2:	b29a      	uxth	r2, r3
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	86da      	strh	r2, [r3, #54]	; 0x36
 80053f8:	e011      	b.n	800541e <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80053fa:	f7fd ffb5 	bl	8003368 <HAL_GetTick>
 80053fe:	4602      	mov	r2, r0
 8005400:	69bb      	ldr	r3, [r7, #24]
 8005402:	1ad3      	subs	r3, r2, r3
 8005404:	683a      	ldr	r2, [r7, #0]
 8005406:	429a      	cmp	r2, r3
 8005408:	d803      	bhi.n	8005412 <HAL_SPI_Transmit+0x204>
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005410:	d102      	bne.n	8005418 <HAL_SPI_Transmit+0x20a>
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	2b00      	cmp	r3, #0
 8005416:	d102      	bne.n	800541e <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8005418:	2303      	movs	r3, #3
 800541a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800541c:	e026      	b.n	800546c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005422:	b29b      	uxth	r3, r3
 8005424:	2b00      	cmp	r3, #0
 8005426:	d1cd      	bne.n	80053c4 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005428:	69ba      	ldr	r2, [r7, #24]
 800542a:	6839      	ldr	r1, [r7, #0]
 800542c:	68f8      	ldr	r0, [r7, #12]
 800542e:	f000 fa55 	bl	80058dc <SPI_EndRxTxTransaction>
 8005432:	4603      	mov	r3, r0
 8005434:	2b00      	cmp	r3, #0
 8005436:	d002      	beq.n	800543e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	2220      	movs	r2, #32
 800543c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	689b      	ldr	r3, [r3, #8]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d10a      	bne.n	800545c <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005446:	2300      	movs	r3, #0
 8005448:	613b      	str	r3, [r7, #16]
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	68db      	ldr	r3, [r3, #12]
 8005450:	613b      	str	r3, [r7, #16]
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	689b      	ldr	r3, [r3, #8]
 8005458:	613b      	str	r3, [r7, #16]
 800545a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005460:	2b00      	cmp	r3, #0
 8005462:	d002      	beq.n	800546a <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8005464:	2301      	movs	r3, #1
 8005466:	77fb      	strb	r3, [r7, #31]
 8005468:	e000      	b.n	800546c <HAL_SPI_Transmit+0x25e>
  }

error:
 800546a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	2201      	movs	r2, #1
 8005470:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	2200      	movs	r2, #0
 8005478:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800547c:	7ffb      	ldrb	r3, [r7, #31]
}
 800547e:	4618      	mov	r0, r3
 8005480:	3720      	adds	r7, #32
 8005482:	46bd      	mov	sp, r7
 8005484:	bd80      	pop	{r7, pc}

08005486 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005486:	b580      	push	{r7, lr}
 8005488:	b08c      	sub	sp, #48	; 0x30
 800548a:	af00      	add	r7, sp, #0
 800548c:	60f8      	str	r0, [r7, #12]
 800548e:	60b9      	str	r1, [r7, #8]
 8005490:	607a      	str	r2, [r7, #4]
 8005492:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005494:	2301      	movs	r3, #1
 8005496:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005498:	2300      	movs	r3, #0
 800549a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80054a4:	2b01      	cmp	r3, #1
 80054a6:	d101      	bne.n	80054ac <HAL_SPI_TransmitReceive+0x26>
 80054a8:	2302      	movs	r3, #2
 80054aa:	e18a      	b.n	80057c2 <HAL_SPI_TransmitReceive+0x33c>
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	2201      	movs	r2, #1
 80054b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80054b4:	f7fd ff58 	bl	8003368 <HAL_GetTick>
 80054b8:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80054c0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	685b      	ldr	r3, [r3, #4]
 80054c8:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80054ca:	887b      	ldrh	r3, [r7, #2]
 80054cc:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80054ce:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80054d2:	2b01      	cmp	r3, #1
 80054d4:	d00f      	beq.n	80054f6 <HAL_SPI_TransmitReceive+0x70>
 80054d6:	69fb      	ldr	r3, [r7, #28]
 80054d8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80054dc:	d107      	bne.n	80054ee <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	689b      	ldr	r3, [r3, #8]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d103      	bne.n	80054ee <HAL_SPI_TransmitReceive+0x68>
 80054e6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80054ea:	2b04      	cmp	r3, #4
 80054ec:	d003      	beq.n	80054f6 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80054ee:	2302      	movs	r3, #2
 80054f0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80054f4:	e15b      	b.n	80057ae <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80054f6:	68bb      	ldr	r3, [r7, #8]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d005      	beq.n	8005508 <HAL_SPI_TransmitReceive+0x82>
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d002      	beq.n	8005508 <HAL_SPI_TransmitReceive+0x82>
 8005502:	887b      	ldrh	r3, [r7, #2]
 8005504:	2b00      	cmp	r3, #0
 8005506:	d103      	bne.n	8005510 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005508:	2301      	movs	r3, #1
 800550a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800550e:	e14e      	b.n	80057ae <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005516:	b2db      	uxtb	r3, r3
 8005518:	2b04      	cmp	r3, #4
 800551a:	d003      	beq.n	8005524 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	2205      	movs	r2, #5
 8005520:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	2200      	movs	r2, #0
 8005528:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	687a      	ldr	r2, [r7, #4]
 800552e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	887a      	ldrh	r2, [r7, #2]
 8005534:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	887a      	ldrh	r2, [r7, #2]
 800553a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	68ba      	ldr	r2, [r7, #8]
 8005540:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	887a      	ldrh	r2, [r7, #2]
 8005546:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	887a      	ldrh	r2, [r7, #2]
 800554c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	2200      	movs	r2, #0
 8005552:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	2200      	movs	r2, #0
 8005558:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005564:	2b40      	cmp	r3, #64	; 0x40
 8005566:	d007      	beq.n	8005578 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	681a      	ldr	r2, [r3, #0]
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005576:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	68db      	ldr	r3, [r3, #12]
 800557c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005580:	d178      	bne.n	8005674 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	685b      	ldr	r3, [r3, #4]
 8005586:	2b00      	cmp	r3, #0
 8005588:	d002      	beq.n	8005590 <HAL_SPI_TransmitReceive+0x10a>
 800558a:	8b7b      	ldrh	r3, [r7, #26]
 800558c:	2b01      	cmp	r3, #1
 800558e:	d166      	bne.n	800565e <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005594:	881a      	ldrh	r2, [r3, #0]
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055a0:	1c9a      	adds	r2, r3, #2
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80055aa:	b29b      	uxth	r3, r3
 80055ac:	3b01      	subs	r3, #1
 80055ae:	b29a      	uxth	r2, r3
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80055b4:	e053      	b.n	800565e <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	689b      	ldr	r3, [r3, #8]
 80055bc:	f003 0302 	and.w	r3, r3, #2
 80055c0:	2b02      	cmp	r3, #2
 80055c2:	d11b      	bne.n	80055fc <HAL_SPI_TransmitReceive+0x176>
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80055c8:	b29b      	uxth	r3, r3
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d016      	beq.n	80055fc <HAL_SPI_TransmitReceive+0x176>
 80055ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055d0:	2b01      	cmp	r3, #1
 80055d2:	d113      	bne.n	80055fc <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055d8:	881a      	ldrh	r2, [r3, #0]
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055e4:	1c9a      	adds	r2, r3, #2
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80055ee:	b29b      	uxth	r3, r3
 80055f0:	3b01      	subs	r3, #1
 80055f2:	b29a      	uxth	r2, r3
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80055f8:	2300      	movs	r3, #0
 80055fa:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	689b      	ldr	r3, [r3, #8]
 8005602:	f003 0301 	and.w	r3, r3, #1
 8005606:	2b01      	cmp	r3, #1
 8005608:	d119      	bne.n	800563e <HAL_SPI_TransmitReceive+0x1b8>
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800560e:	b29b      	uxth	r3, r3
 8005610:	2b00      	cmp	r3, #0
 8005612:	d014      	beq.n	800563e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	68da      	ldr	r2, [r3, #12]
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800561e:	b292      	uxth	r2, r2
 8005620:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005626:	1c9a      	adds	r2, r3, #2
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005630:	b29b      	uxth	r3, r3
 8005632:	3b01      	subs	r3, #1
 8005634:	b29a      	uxth	r2, r3
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800563a:	2301      	movs	r3, #1
 800563c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800563e:	f7fd fe93 	bl	8003368 <HAL_GetTick>
 8005642:	4602      	mov	r2, r0
 8005644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005646:	1ad3      	subs	r3, r2, r3
 8005648:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800564a:	429a      	cmp	r2, r3
 800564c:	d807      	bhi.n	800565e <HAL_SPI_TransmitReceive+0x1d8>
 800564e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005650:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005654:	d003      	beq.n	800565e <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8005656:	2303      	movs	r3, #3
 8005658:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800565c:	e0a7      	b.n	80057ae <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005662:	b29b      	uxth	r3, r3
 8005664:	2b00      	cmp	r3, #0
 8005666:	d1a6      	bne.n	80055b6 <HAL_SPI_TransmitReceive+0x130>
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800566c:	b29b      	uxth	r3, r3
 800566e:	2b00      	cmp	r3, #0
 8005670:	d1a1      	bne.n	80055b6 <HAL_SPI_TransmitReceive+0x130>
 8005672:	e07c      	b.n	800576e <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	685b      	ldr	r3, [r3, #4]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d002      	beq.n	8005682 <HAL_SPI_TransmitReceive+0x1fc>
 800567c:	8b7b      	ldrh	r3, [r7, #26]
 800567e:	2b01      	cmp	r3, #1
 8005680:	d16b      	bne.n	800575a <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	330c      	adds	r3, #12
 800568c:	7812      	ldrb	r2, [r2, #0]
 800568e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005694:	1c5a      	adds	r2, r3, #1
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800569e:	b29b      	uxth	r3, r3
 80056a0:	3b01      	subs	r3, #1
 80056a2:	b29a      	uxth	r2, r3
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80056a8:	e057      	b.n	800575a <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	689b      	ldr	r3, [r3, #8]
 80056b0:	f003 0302 	and.w	r3, r3, #2
 80056b4:	2b02      	cmp	r3, #2
 80056b6:	d11c      	bne.n	80056f2 <HAL_SPI_TransmitReceive+0x26c>
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80056bc:	b29b      	uxth	r3, r3
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d017      	beq.n	80056f2 <HAL_SPI_TransmitReceive+0x26c>
 80056c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056c4:	2b01      	cmp	r3, #1
 80056c6:	d114      	bne.n	80056f2 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	330c      	adds	r3, #12
 80056d2:	7812      	ldrb	r2, [r2, #0]
 80056d4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056da:	1c5a      	adds	r2, r3, #1
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80056e4:	b29b      	uxth	r3, r3
 80056e6:	3b01      	subs	r3, #1
 80056e8:	b29a      	uxth	r2, r3
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80056ee:	2300      	movs	r3, #0
 80056f0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	689b      	ldr	r3, [r3, #8]
 80056f8:	f003 0301 	and.w	r3, r3, #1
 80056fc:	2b01      	cmp	r3, #1
 80056fe:	d119      	bne.n	8005734 <HAL_SPI_TransmitReceive+0x2ae>
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005704:	b29b      	uxth	r3, r3
 8005706:	2b00      	cmp	r3, #0
 8005708:	d014      	beq.n	8005734 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	68da      	ldr	r2, [r3, #12]
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005714:	b2d2      	uxtb	r2, r2
 8005716:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800571c:	1c5a      	adds	r2, r3, #1
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005726:	b29b      	uxth	r3, r3
 8005728:	3b01      	subs	r3, #1
 800572a:	b29a      	uxth	r2, r3
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005730:	2301      	movs	r3, #1
 8005732:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005734:	f7fd fe18 	bl	8003368 <HAL_GetTick>
 8005738:	4602      	mov	r2, r0
 800573a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800573c:	1ad3      	subs	r3, r2, r3
 800573e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005740:	429a      	cmp	r2, r3
 8005742:	d803      	bhi.n	800574c <HAL_SPI_TransmitReceive+0x2c6>
 8005744:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005746:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800574a:	d102      	bne.n	8005752 <HAL_SPI_TransmitReceive+0x2cc>
 800574c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800574e:	2b00      	cmp	r3, #0
 8005750:	d103      	bne.n	800575a <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8005752:	2303      	movs	r3, #3
 8005754:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005758:	e029      	b.n	80057ae <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800575e:	b29b      	uxth	r3, r3
 8005760:	2b00      	cmp	r3, #0
 8005762:	d1a2      	bne.n	80056aa <HAL_SPI_TransmitReceive+0x224>
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005768:	b29b      	uxth	r3, r3
 800576a:	2b00      	cmp	r3, #0
 800576c:	d19d      	bne.n	80056aa <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800576e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005770:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005772:	68f8      	ldr	r0, [r7, #12]
 8005774:	f000 f8b2 	bl	80058dc <SPI_EndRxTxTransaction>
 8005778:	4603      	mov	r3, r0
 800577a:	2b00      	cmp	r3, #0
 800577c:	d006      	beq.n	800578c <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800577e:	2301      	movs	r3, #1
 8005780:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	2220      	movs	r2, #32
 8005788:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800578a:	e010      	b.n	80057ae <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	689b      	ldr	r3, [r3, #8]
 8005790:	2b00      	cmp	r3, #0
 8005792:	d10b      	bne.n	80057ac <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005794:	2300      	movs	r3, #0
 8005796:	617b      	str	r3, [r7, #20]
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	68db      	ldr	r3, [r3, #12]
 800579e:	617b      	str	r3, [r7, #20]
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	689b      	ldr	r3, [r3, #8]
 80057a6:	617b      	str	r3, [r7, #20]
 80057a8:	697b      	ldr	r3, [r7, #20]
 80057aa:	e000      	b.n	80057ae <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80057ac:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	2201      	movs	r2, #1
 80057b2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	2200      	movs	r2, #0
 80057ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80057be:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80057c2:	4618      	mov	r0, r3
 80057c4:	3730      	adds	r7, #48	; 0x30
 80057c6:	46bd      	mov	sp, r7
 80057c8:	bd80      	pop	{r7, pc}
	...

080057cc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80057cc:	b580      	push	{r7, lr}
 80057ce:	b088      	sub	sp, #32
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	60f8      	str	r0, [r7, #12]
 80057d4:	60b9      	str	r1, [r7, #8]
 80057d6:	603b      	str	r3, [r7, #0]
 80057d8:	4613      	mov	r3, r2
 80057da:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80057dc:	f7fd fdc4 	bl	8003368 <HAL_GetTick>
 80057e0:	4602      	mov	r2, r0
 80057e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057e4:	1a9b      	subs	r3, r3, r2
 80057e6:	683a      	ldr	r2, [r7, #0]
 80057e8:	4413      	add	r3, r2
 80057ea:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80057ec:	f7fd fdbc 	bl	8003368 <HAL_GetTick>
 80057f0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80057f2:	4b39      	ldr	r3, [pc, #228]	; (80058d8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	015b      	lsls	r3, r3, #5
 80057f8:	0d1b      	lsrs	r3, r3, #20
 80057fa:	69fa      	ldr	r2, [r7, #28]
 80057fc:	fb02 f303 	mul.w	r3, r2, r3
 8005800:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005802:	e054      	b.n	80058ae <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005804:	683b      	ldr	r3, [r7, #0]
 8005806:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800580a:	d050      	beq.n	80058ae <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800580c:	f7fd fdac 	bl	8003368 <HAL_GetTick>
 8005810:	4602      	mov	r2, r0
 8005812:	69bb      	ldr	r3, [r7, #24]
 8005814:	1ad3      	subs	r3, r2, r3
 8005816:	69fa      	ldr	r2, [r7, #28]
 8005818:	429a      	cmp	r2, r3
 800581a:	d902      	bls.n	8005822 <SPI_WaitFlagStateUntilTimeout+0x56>
 800581c:	69fb      	ldr	r3, [r7, #28]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d13d      	bne.n	800589e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	685a      	ldr	r2, [r3, #4]
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005830:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	685b      	ldr	r3, [r3, #4]
 8005836:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800583a:	d111      	bne.n	8005860 <SPI_WaitFlagStateUntilTimeout+0x94>
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	689b      	ldr	r3, [r3, #8]
 8005840:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005844:	d004      	beq.n	8005850 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	689b      	ldr	r3, [r3, #8]
 800584a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800584e:	d107      	bne.n	8005860 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	681a      	ldr	r2, [r3, #0]
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800585e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005864:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005868:	d10f      	bne.n	800588a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	681a      	ldr	r2, [r3, #0]
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005878:	601a      	str	r2, [r3, #0]
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	681a      	ldr	r2, [r3, #0]
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005888:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	2201      	movs	r2, #1
 800588e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	2200      	movs	r2, #0
 8005896:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800589a:	2303      	movs	r3, #3
 800589c:	e017      	b.n	80058ce <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800589e:	697b      	ldr	r3, [r7, #20]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d101      	bne.n	80058a8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80058a4:	2300      	movs	r3, #0
 80058a6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80058a8:	697b      	ldr	r3, [r7, #20]
 80058aa:	3b01      	subs	r3, #1
 80058ac:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	689a      	ldr	r2, [r3, #8]
 80058b4:	68bb      	ldr	r3, [r7, #8]
 80058b6:	4013      	ands	r3, r2
 80058b8:	68ba      	ldr	r2, [r7, #8]
 80058ba:	429a      	cmp	r2, r3
 80058bc:	bf0c      	ite	eq
 80058be:	2301      	moveq	r3, #1
 80058c0:	2300      	movne	r3, #0
 80058c2:	b2db      	uxtb	r3, r3
 80058c4:	461a      	mov	r2, r3
 80058c6:	79fb      	ldrb	r3, [r7, #7]
 80058c8:	429a      	cmp	r2, r3
 80058ca:	d19b      	bne.n	8005804 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80058cc:	2300      	movs	r3, #0
}
 80058ce:	4618      	mov	r0, r3
 80058d0:	3720      	adds	r7, #32
 80058d2:	46bd      	mov	sp, r7
 80058d4:	bd80      	pop	{r7, pc}
 80058d6:	bf00      	nop
 80058d8:	200000b4 	.word	0x200000b4

080058dc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80058dc:	b580      	push	{r7, lr}
 80058de:	b088      	sub	sp, #32
 80058e0:	af02      	add	r7, sp, #8
 80058e2:	60f8      	str	r0, [r7, #12]
 80058e4:	60b9      	str	r1, [r7, #8]
 80058e6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80058e8:	4b1b      	ldr	r3, [pc, #108]	; (8005958 <SPI_EndRxTxTransaction+0x7c>)
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	4a1b      	ldr	r2, [pc, #108]	; (800595c <SPI_EndRxTxTransaction+0x80>)
 80058ee:	fba2 2303 	umull	r2, r3, r2, r3
 80058f2:	0d5b      	lsrs	r3, r3, #21
 80058f4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80058f8:	fb02 f303 	mul.w	r3, r2, r3
 80058fc:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	685b      	ldr	r3, [r3, #4]
 8005902:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005906:	d112      	bne.n	800592e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	9300      	str	r3, [sp, #0]
 800590c:	68bb      	ldr	r3, [r7, #8]
 800590e:	2200      	movs	r2, #0
 8005910:	2180      	movs	r1, #128	; 0x80
 8005912:	68f8      	ldr	r0, [r7, #12]
 8005914:	f7ff ff5a 	bl	80057cc <SPI_WaitFlagStateUntilTimeout>
 8005918:	4603      	mov	r3, r0
 800591a:	2b00      	cmp	r3, #0
 800591c:	d016      	beq.n	800594c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005922:	f043 0220 	orr.w	r2, r3, #32
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800592a:	2303      	movs	r3, #3
 800592c:	e00f      	b.n	800594e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800592e:	697b      	ldr	r3, [r7, #20]
 8005930:	2b00      	cmp	r3, #0
 8005932:	d00a      	beq.n	800594a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005934:	697b      	ldr	r3, [r7, #20]
 8005936:	3b01      	subs	r3, #1
 8005938:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	689b      	ldr	r3, [r3, #8]
 8005940:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005944:	2b80      	cmp	r3, #128	; 0x80
 8005946:	d0f2      	beq.n	800592e <SPI_EndRxTxTransaction+0x52>
 8005948:	e000      	b.n	800594c <SPI_EndRxTxTransaction+0x70>
        break;
 800594a:	bf00      	nop
  }

  return HAL_OK;
 800594c:	2300      	movs	r3, #0
}
 800594e:	4618      	mov	r0, r3
 8005950:	3718      	adds	r7, #24
 8005952:	46bd      	mov	sp, r7
 8005954:	bd80      	pop	{r7, pc}
 8005956:	bf00      	nop
 8005958:	200000b4 	.word	0x200000b4
 800595c:	165e9f81 	.word	0x165e9f81

08005960 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005960:	b580      	push	{r7, lr}
 8005962:	b082      	sub	sp, #8
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2b00      	cmp	r3, #0
 800596c:	d101      	bne.n	8005972 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800596e:	2301      	movs	r3, #1
 8005970:	e041      	b.n	80059f6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005978:	b2db      	uxtb	r3, r3
 800597a:	2b00      	cmp	r3, #0
 800597c:	d106      	bne.n	800598c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	2200      	movs	r2, #0
 8005982:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005986:	6878      	ldr	r0, [r7, #4]
 8005988:	f7fd fb44 	bl	8003014 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2202      	movs	r2, #2
 8005990:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681a      	ldr	r2, [r3, #0]
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	3304      	adds	r3, #4
 800599c:	4619      	mov	r1, r3
 800599e:	4610      	mov	r0, r2
 80059a0:	f000 fd96 	bl	80064d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2201      	movs	r2, #1
 80059a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2201      	movs	r2, #1
 80059b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2201      	movs	r2, #1
 80059b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2201      	movs	r2, #1
 80059c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2201      	movs	r2, #1
 80059c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2201      	movs	r2, #1
 80059d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2201      	movs	r2, #1
 80059d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2201      	movs	r2, #1
 80059e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2201      	movs	r2, #1
 80059e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2201      	movs	r2, #1
 80059f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80059f4:	2300      	movs	r3, #0
}
 80059f6:	4618      	mov	r0, r3
 80059f8:	3708      	adds	r7, #8
 80059fa:	46bd      	mov	sp, r7
 80059fc:	bd80      	pop	{r7, pc}
	...

08005a00 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005a00:	b480      	push	{r7}
 8005a02:	b085      	sub	sp, #20
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a0e:	b2db      	uxtb	r3, r3
 8005a10:	2b01      	cmp	r3, #1
 8005a12:	d001      	beq.n	8005a18 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005a14:	2301      	movs	r3, #1
 8005a16:	e03c      	b.n	8005a92 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2202      	movs	r2, #2
 8005a1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	4a1e      	ldr	r2, [pc, #120]	; (8005aa0 <HAL_TIM_Base_Start+0xa0>)
 8005a26:	4293      	cmp	r3, r2
 8005a28:	d018      	beq.n	8005a5c <HAL_TIM_Base_Start+0x5c>
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a32:	d013      	beq.n	8005a5c <HAL_TIM_Base_Start+0x5c>
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	4a1a      	ldr	r2, [pc, #104]	; (8005aa4 <HAL_TIM_Base_Start+0xa4>)
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	d00e      	beq.n	8005a5c <HAL_TIM_Base_Start+0x5c>
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	4a19      	ldr	r2, [pc, #100]	; (8005aa8 <HAL_TIM_Base_Start+0xa8>)
 8005a44:	4293      	cmp	r3, r2
 8005a46:	d009      	beq.n	8005a5c <HAL_TIM_Base_Start+0x5c>
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	4a17      	ldr	r2, [pc, #92]	; (8005aac <HAL_TIM_Base_Start+0xac>)
 8005a4e:	4293      	cmp	r3, r2
 8005a50:	d004      	beq.n	8005a5c <HAL_TIM_Base_Start+0x5c>
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	4a16      	ldr	r2, [pc, #88]	; (8005ab0 <HAL_TIM_Base_Start+0xb0>)
 8005a58:	4293      	cmp	r3, r2
 8005a5a:	d111      	bne.n	8005a80 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	689b      	ldr	r3, [r3, #8]
 8005a62:	f003 0307 	and.w	r3, r3, #7
 8005a66:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	2b06      	cmp	r3, #6
 8005a6c:	d010      	beq.n	8005a90 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	681a      	ldr	r2, [r3, #0]
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f042 0201 	orr.w	r2, r2, #1
 8005a7c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a7e:	e007      	b.n	8005a90 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	681a      	ldr	r2, [r3, #0]
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f042 0201 	orr.w	r2, r2, #1
 8005a8e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005a90:	2300      	movs	r3, #0
}
 8005a92:	4618      	mov	r0, r3
 8005a94:	3714      	adds	r7, #20
 8005a96:	46bd      	mov	sp, r7
 8005a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9c:	4770      	bx	lr
 8005a9e:	bf00      	nop
 8005aa0:	40010000 	.word	0x40010000
 8005aa4:	40000400 	.word	0x40000400
 8005aa8:	40000800 	.word	0x40000800
 8005aac:	40000c00 	.word	0x40000c00
 8005ab0:	40014000 	.word	0x40014000

08005ab4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	b082      	sub	sp, #8
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d101      	bne.n	8005ac6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005ac2:	2301      	movs	r3, #1
 8005ac4:	e041      	b.n	8005b4a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005acc:	b2db      	uxtb	r3, r3
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d106      	bne.n	8005ae0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005ada:	6878      	ldr	r0, [r7, #4]
 8005adc:	f7fd fb20 	bl	8003120 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2202      	movs	r2, #2
 8005ae4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681a      	ldr	r2, [r3, #0]
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	3304      	adds	r3, #4
 8005af0:	4619      	mov	r1, r3
 8005af2:	4610      	mov	r0, r2
 8005af4:	f000 fcec 	bl	80064d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2201      	movs	r2, #1
 8005afc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2201      	movs	r2, #1
 8005b04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2201      	movs	r2, #1
 8005b0c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2201      	movs	r2, #1
 8005b14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2201      	movs	r2, #1
 8005b1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2201      	movs	r2, #1
 8005b24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2201      	movs	r2, #1
 8005b2c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2201      	movs	r2, #1
 8005b34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2201      	movs	r2, #1
 8005b3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2201      	movs	r2, #1
 8005b44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005b48:	2300      	movs	r3, #0
}
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	3708      	adds	r7, #8
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	bd80      	pop	{r7, pc}
	...

08005b54 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005b54:	b580      	push	{r7, lr}
 8005b56:	b084      	sub	sp, #16
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
 8005b5c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d109      	bne.n	8005b78 <HAL_TIM_PWM_Start+0x24>
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005b6a:	b2db      	uxtb	r3, r3
 8005b6c:	2b01      	cmp	r3, #1
 8005b6e:	bf14      	ite	ne
 8005b70:	2301      	movne	r3, #1
 8005b72:	2300      	moveq	r3, #0
 8005b74:	b2db      	uxtb	r3, r3
 8005b76:	e022      	b.n	8005bbe <HAL_TIM_PWM_Start+0x6a>
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	2b04      	cmp	r3, #4
 8005b7c:	d109      	bne.n	8005b92 <HAL_TIM_PWM_Start+0x3e>
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005b84:	b2db      	uxtb	r3, r3
 8005b86:	2b01      	cmp	r3, #1
 8005b88:	bf14      	ite	ne
 8005b8a:	2301      	movne	r3, #1
 8005b8c:	2300      	moveq	r3, #0
 8005b8e:	b2db      	uxtb	r3, r3
 8005b90:	e015      	b.n	8005bbe <HAL_TIM_PWM_Start+0x6a>
 8005b92:	683b      	ldr	r3, [r7, #0]
 8005b94:	2b08      	cmp	r3, #8
 8005b96:	d109      	bne.n	8005bac <HAL_TIM_PWM_Start+0x58>
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005b9e:	b2db      	uxtb	r3, r3
 8005ba0:	2b01      	cmp	r3, #1
 8005ba2:	bf14      	ite	ne
 8005ba4:	2301      	movne	r3, #1
 8005ba6:	2300      	moveq	r3, #0
 8005ba8:	b2db      	uxtb	r3, r3
 8005baa:	e008      	b.n	8005bbe <HAL_TIM_PWM_Start+0x6a>
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005bb2:	b2db      	uxtb	r3, r3
 8005bb4:	2b01      	cmp	r3, #1
 8005bb6:	bf14      	ite	ne
 8005bb8:	2301      	movne	r3, #1
 8005bba:	2300      	moveq	r3, #0
 8005bbc:	b2db      	uxtb	r3, r3
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d001      	beq.n	8005bc6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005bc2:	2301      	movs	r3, #1
 8005bc4:	e068      	b.n	8005c98 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005bc6:	683b      	ldr	r3, [r7, #0]
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d104      	bne.n	8005bd6 <HAL_TIM_PWM_Start+0x82>
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2202      	movs	r2, #2
 8005bd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005bd4:	e013      	b.n	8005bfe <HAL_TIM_PWM_Start+0xaa>
 8005bd6:	683b      	ldr	r3, [r7, #0]
 8005bd8:	2b04      	cmp	r3, #4
 8005bda:	d104      	bne.n	8005be6 <HAL_TIM_PWM_Start+0x92>
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2202      	movs	r2, #2
 8005be0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005be4:	e00b      	b.n	8005bfe <HAL_TIM_PWM_Start+0xaa>
 8005be6:	683b      	ldr	r3, [r7, #0]
 8005be8:	2b08      	cmp	r3, #8
 8005bea:	d104      	bne.n	8005bf6 <HAL_TIM_PWM_Start+0xa2>
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2202      	movs	r2, #2
 8005bf0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005bf4:	e003      	b.n	8005bfe <HAL_TIM_PWM_Start+0xaa>
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	2202      	movs	r2, #2
 8005bfa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	2201      	movs	r2, #1
 8005c04:	6839      	ldr	r1, [r7, #0]
 8005c06:	4618      	mov	r0, r3
 8005c08:	f000 ff08 	bl	8006a1c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	4a23      	ldr	r2, [pc, #140]	; (8005ca0 <HAL_TIM_PWM_Start+0x14c>)
 8005c12:	4293      	cmp	r3, r2
 8005c14:	d107      	bne.n	8005c26 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005c24:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	4a1d      	ldr	r2, [pc, #116]	; (8005ca0 <HAL_TIM_PWM_Start+0x14c>)
 8005c2c:	4293      	cmp	r3, r2
 8005c2e:	d018      	beq.n	8005c62 <HAL_TIM_PWM_Start+0x10e>
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c38:	d013      	beq.n	8005c62 <HAL_TIM_PWM_Start+0x10e>
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	4a19      	ldr	r2, [pc, #100]	; (8005ca4 <HAL_TIM_PWM_Start+0x150>)
 8005c40:	4293      	cmp	r3, r2
 8005c42:	d00e      	beq.n	8005c62 <HAL_TIM_PWM_Start+0x10e>
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	4a17      	ldr	r2, [pc, #92]	; (8005ca8 <HAL_TIM_PWM_Start+0x154>)
 8005c4a:	4293      	cmp	r3, r2
 8005c4c:	d009      	beq.n	8005c62 <HAL_TIM_PWM_Start+0x10e>
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	4a16      	ldr	r2, [pc, #88]	; (8005cac <HAL_TIM_PWM_Start+0x158>)
 8005c54:	4293      	cmp	r3, r2
 8005c56:	d004      	beq.n	8005c62 <HAL_TIM_PWM_Start+0x10e>
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	4a14      	ldr	r2, [pc, #80]	; (8005cb0 <HAL_TIM_PWM_Start+0x15c>)
 8005c5e:	4293      	cmp	r3, r2
 8005c60:	d111      	bne.n	8005c86 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	689b      	ldr	r3, [r3, #8]
 8005c68:	f003 0307 	and.w	r3, r3, #7
 8005c6c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	2b06      	cmp	r3, #6
 8005c72:	d010      	beq.n	8005c96 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	681a      	ldr	r2, [r3, #0]
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f042 0201 	orr.w	r2, r2, #1
 8005c82:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c84:	e007      	b.n	8005c96 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	681a      	ldr	r2, [r3, #0]
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f042 0201 	orr.w	r2, r2, #1
 8005c94:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005c96:	2300      	movs	r3, #0
}
 8005c98:	4618      	mov	r0, r3
 8005c9a:	3710      	adds	r7, #16
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	bd80      	pop	{r7, pc}
 8005ca0:	40010000 	.word	0x40010000
 8005ca4:	40000400 	.word	0x40000400
 8005ca8:	40000800 	.word	0x40000800
 8005cac:	40000c00 	.word	0x40000c00
 8005cb0:	40014000 	.word	0x40014000

08005cb4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8005cb4:	b580      	push	{r7, lr}
 8005cb6:	b086      	sub	sp, #24
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
 8005cbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d101      	bne.n	8005cc8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005cc4:	2301      	movs	r3, #1
 8005cc6:	e097      	b.n	8005df8 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005cce:	b2db      	uxtb	r3, r3
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d106      	bne.n	8005ce2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005cdc:	6878      	ldr	r0, [r7, #4]
 8005cde:	f7fd f9cf 	bl	8003080 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	2202      	movs	r2, #2
 8005ce6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	689b      	ldr	r3, [r3, #8]
 8005cf0:	687a      	ldr	r2, [r7, #4]
 8005cf2:	6812      	ldr	r2, [r2, #0]
 8005cf4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005cf8:	f023 0307 	bic.w	r3, r3, #7
 8005cfc:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681a      	ldr	r2, [r3, #0]
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	3304      	adds	r3, #4
 8005d06:	4619      	mov	r1, r3
 8005d08:	4610      	mov	r0, r2
 8005d0a:	f000 fbe1 	bl	80064d0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	689b      	ldr	r3, [r3, #8]
 8005d14:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	699b      	ldr	r3, [r3, #24]
 8005d1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	6a1b      	ldr	r3, [r3, #32]
 8005d24:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005d26:	683b      	ldr	r3, [r7, #0]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	697a      	ldr	r2, [r7, #20]
 8005d2c:	4313      	orrs	r3, r2
 8005d2e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005d30:	693b      	ldr	r3, [r7, #16]
 8005d32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d36:	f023 0303 	bic.w	r3, r3, #3
 8005d3a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005d3c:	683b      	ldr	r3, [r7, #0]
 8005d3e:	689a      	ldr	r2, [r3, #8]
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	699b      	ldr	r3, [r3, #24]
 8005d44:	021b      	lsls	r3, r3, #8
 8005d46:	4313      	orrs	r3, r2
 8005d48:	693a      	ldr	r2, [r7, #16]
 8005d4a:	4313      	orrs	r3, r2
 8005d4c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005d4e:	693b      	ldr	r3, [r7, #16]
 8005d50:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005d54:	f023 030c 	bic.w	r3, r3, #12
 8005d58:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005d5a:	693b      	ldr	r3, [r7, #16]
 8005d5c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005d60:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005d64:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005d66:	683b      	ldr	r3, [r7, #0]
 8005d68:	68da      	ldr	r2, [r3, #12]
 8005d6a:	683b      	ldr	r3, [r7, #0]
 8005d6c:	69db      	ldr	r3, [r3, #28]
 8005d6e:	021b      	lsls	r3, r3, #8
 8005d70:	4313      	orrs	r3, r2
 8005d72:	693a      	ldr	r2, [r7, #16]
 8005d74:	4313      	orrs	r3, r2
 8005d76:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	691b      	ldr	r3, [r3, #16]
 8005d7c:	011a      	lsls	r2, r3, #4
 8005d7e:	683b      	ldr	r3, [r7, #0]
 8005d80:	6a1b      	ldr	r3, [r3, #32]
 8005d82:	031b      	lsls	r3, r3, #12
 8005d84:	4313      	orrs	r3, r2
 8005d86:	693a      	ldr	r2, [r7, #16]
 8005d88:	4313      	orrs	r3, r2
 8005d8a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8005d92:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8005d9a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005d9c:	683b      	ldr	r3, [r7, #0]
 8005d9e:	685a      	ldr	r2, [r3, #4]
 8005da0:	683b      	ldr	r3, [r7, #0]
 8005da2:	695b      	ldr	r3, [r3, #20]
 8005da4:	011b      	lsls	r3, r3, #4
 8005da6:	4313      	orrs	r3, r2
 8005da8:	68fa      	ldr	r2, [r7, #12]
 8005daa:	4313      	orrs	r3, r2
 8005dac:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	697a      	ldr	r2, [r7, #20]
 8005db4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	693a      	ldr	r2, [r7, #16]
 8005dbc:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	68fa      	ldr	r2, [r7, #12]
 8005dc4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	2201      	movs	r2, #1
 8005dca:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	2201      	movs	r2, #1
 8005dd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	2201      	movs	r2, #1
 8005dda:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	2201      	movs	r2, #1
 8005de2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	2201      	movs	r2, #1
 8005dea:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	2201      	movs	r2, #1
 8005df2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005df6:	2300      	movs	r3, #0
}
 8005df8:	4618      	mov	r0, r3
 8005dfa:	3718      	adds	r7, #24
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	bd80      	pop	{r7, pc}

08005e00 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005e00:	b580      	push	{r7, lr}
 8005e02:	b084      	sub	sp, #16
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
 8005e08:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005e10:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005e18:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005e20:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005e28:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005e2a:	683b      	ldr	r3, [r7, #0]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d110      	bne.n	8005e52 <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005e30:	7bfb      	ldrb	r3, [r7, #15]
 8005e32:	2b01      	cmp	r3, #1
 8005e34:	d102      	bne.n	8005e3c <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005e36:	7b7b      	ldrb	r3, [r7, #13]
 8005e38:	2b01      	cmp	r3, #1
 8005e3a:	d001      	beq.n	8005e40 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8005e3c:	2301      	movs	r3, #1
 8005e3e:	e089      	b.n	8005f54 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2202      	movs	r2, #2
 8005e44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2202      	movs	r2, #2
 8005e4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005e50:	e031      	b.n	8005eb6 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005e52:	683b      	ldr	r3, [r7, #0]
 8005e54:	2b04      	cmp	r3, #4
 8005e56:	d110      	bne.n	8005e7a <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005e58:	7bbb      	ldrb	r3, [r7, #14]
 8005e5a:	2b01      	cmp	r3, #1
 8005e5c:	d102      	bne.n	8005e64 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005e5e:	7b3b      	ldrb	r3, [r7, #12]
 8005e60:	2b01      	cmp	r3, #1
 8005e62:	d001      	beq.n	8005e68 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8005e64:	2301      	movs	r3, #1
 8005e66:	e075      	b.n	8005f54 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2202      	movs	r2, #2
 8005e6c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2202      	movs	r2, #2
 8005e74:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005e78:	e01d      	b.n	8005eb6 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005e7a:	7bfb      	ldrb	r3, [r7, #15]
 8005e7c:	2b01      	cmp	r3, #1
 8005e7e:	d108      	bne.n	8005e92 <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005e80:	7bbb      	ldrb	r3, [r7, #14]
 8005e82:	2b01      	cmp	r3, #1
 8005e84:	d105      	bne.n	8005e92 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005e86:	7b7b      	ldrb	r3, [r7, #13]
 8005e88:	2b01      	cmp	r3, #1
 8005e8a:	d102      	bne.n	8005e92 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005e8c:	7b3b      	ldrb	r3, [r7, #12]
 8005e8e:	2b01      	cmp	r3, #1
 8005e90:	d001      	beq.n	8005e96 <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 8005e92:	2301      	movs	r3, #1
 8005e94:	e05e      	b.n	8005f54 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	2202      	movs	r2, #2
 8005e9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	2202      	movs	r2, #2
 8005ea2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	2202      	movs	r2, #2
 8005eaa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	2202      	movs	r2, #2
 8005eb2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8005eb6:	683b      	ldr	r3, [r7, #0]
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d003      	beq.n	8005ec4 <HAL_TIM_Encoder_Start_IT+0xc4>
 8005ebc:	683b      	ldr	r3, [r7, #0]
 8005ebe:	2b04      	cmp	r3, #4
 8005ec0:	d010      	beq.n	8005ee4 <HAL_TIM_Encoder_Start_IT+0xe4>
 8005ec2:	e01f      	b.n	8005f04 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	2201      	movs	r2, #1
 8005eca:	2100      	movs	r1, #0
 8005ecc:	4618      	mov	r0, r3
 8005ece:	f000 fda5 	bl	8006a1c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	68da      	ldr	r2, [r3, #12]
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	f042 0202 	orr.w	r2, r2, #2
 8005ee0:	60da      	str	r2, [r3, #12]
      break;
 8005ee2:	e02e      	b.n	8005f42 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	2201      	movs	r2, #1
 8005eea:	2104      	movs	r1, #4
 8005eec:	4618      	mov	r0, r3
 8005eee:	f000 fd95 	bl	8006a1c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	68da      	ldr	r2, [r3, #12]
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f042 0204 	orr.w	r2, r2, #4
 8005f00:	60da      	str	r2, [r3, #12]
      break;
 8005f02:	e01e      	b.n	8005f42 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	2201      	movs	r2, #1
 8005f0a:	2100      	movs	r1, #0
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	f000 fd85 	bl	8006a1c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	2201      	movs	r2, #1
 8005f18:	2104      	movs	r1, #4
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	f000 fd7e 	bl	8006a1c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	68da      	ldr	r2, [r3, #12]
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	f042 0202 	orr.w	r2, r2, #2
 8005f2e:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	68da      	ldr	r2, [r3, #12]
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f042 0204 	orr.w	r2, r2, #4
 8005f3e:	60da      	str	r2, [r3, #12]
      break;
 8005f40:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	681a      	ldr	r2, [r3, #0]
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	f042 0201 	orr.w	r2, r2, #1
 8005f50:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005f52:	2300      	movs	r3, #0
}
 8005f54:	4618      	mov	r0, r3
 8005f56:	3710      	adds	r7, #16
 8005f58:	46bd      	mov	sp, r7
 8005f5a:	bd80      	pop	{r7, pc}

08005f5c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005f5c:	b580      	push	{r7, lr}
 8005f5e:	b082      	sub	sp, #8
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	691b      	ldr	r3, [r3, #16]
 8005f6a:	f003 0302 	and.w	r3, r3, #2
 8005f6e:	2b02      	cmp	r3, #2
 8005f70:	d122      	bne.n	8005fb8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	68db      	ldr	r3, [r3, #12]
 8005f78:	f003 0302 	and.w	r3, r3, #2
 8005f7c:	2b02      	cmp	r3, #2
 8005f7e:	d11b      	bne.n	8005fb8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	f06f 0202 	mvn.w	r2, #2
 8005f88:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	2201      	movs	r2, #1
 8005f8e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	699b      	ldr	r3, [r3, #24]
 8005f96:	f003 0303 	and.w	r3, r3, #3
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d003      	beq.n	8005fa6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005f9e:	6878      	ldr	r0, [r7, #4]
 8005fa0:	f7fc fb0c 	bl	80025bc <HAL_TIM_IC_CaptureCallback>
 8005fa4:	e005      	b.n	8005fb2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005fa6:	6878      	ldr	r0, [r7, #4]
 8005fa8:	f000 fa73 	bl	8006492 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fac:	6878      	ldr	r0, [r7, #4]
 8005fae:	f000 fa7a 	bl	80064a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	691b      	ldr	r3, [r3, #16]
 8005fbe:	f003 0304 	and.w	r3, r3, #4
 8005fc2:	2b04      	cmp	r3, #4
 8005fc4:	d122      	bne.n	800600c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	68db      	ldr	r3, [r3, #12]
 8005fcc:	f003 0304 	and.w	r3, r3, #4
 8005fd0:	2b04      	cmp	r3, #4
 8005fd2:	d11b      	bne.n	800600c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f06f 0204 	mvn.w	r2, #4
 8005fdc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	2202      	movs	r2, #2
 8005fe2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	699b      	ldr	r3, [r3, #24]
 8005fea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d003      	beq.n	8005ffa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ff2:	6878      	ldr	r0, [r7, #4]
 8005ff4:	f7fc fae2 	bl	80025bc <HAL_TIM_IC_CaptureCallback>
 8005ff8:	e005      	b.n	8006006 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ffa:	6878      	ldr	r0, [r7, #4]
 8005ffc:	f000 fa49 	bl	8006492 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006000:	6878      	ldr	r0, [r7, #4]
 8006002:	f000 fa50 	bl	80064a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	2200      	movs	r2, #0
 800600a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	691b      	ldr	r3, [r3, #16]
 8006012:	f003 0308 	and.w	r3, r3, #8
 8006016:	2b08      	cmp	r3, #8
 8006018:	d122      	bne.n	8006060 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	68db      	ldr	r3, [r3, #12]
 8006020:	f003 0308 	and.w	r3, r3, #8
 8006024:	2b08      	cmp	r3, #8
 8006026:	d11b      	bne.n	8006060 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f06f 0208 	mvn.w	r2, #8
 8006030:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	2204      	movs	r2, #4
 8006036:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	69db      	ldr	r3, [r3, #28]
 800603e:	f003 0303 	and.w	r3, r3, #3
 8006042:	2b00      	cmp	r3, #0
 8006044:	d003      	beq.n	800604e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006046:	6878      	ldr	r0, [r7, #4]
 8006048:	f7fc fab8 	bl	80025bc <HAL_TIM_IC_CaptureCallback>
 800604c:	e005      	b.n	800605a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800604e:	6878      	ldr	r0, [r7, #4]
 8006050:	f000 fa1f 	bl	8006492 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006054:	6878      	ldr	r0, [r7, #4]
 8006056:	f000 fa26 	bl	80064a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	2200      	movs	r2, #0
 800605e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	691b      	ldr	r3, [r3, #16]
 8006066:	f003 0310 	and.w	r3, r3, #16
 800606a:	2b10      	cmp	r3, #16
 800606c:	d122      	bne.n	80060b4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	68db      	ldr	r3, [r3, #12]
 8006074:	f003 0310 	and.w	r3, r3, #16
 8006078:	2b10      	cmp	r3, #16
 800607a:	d11b      	bne.n	80060b4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f06f 0210 	mvn.w	r2, #16
 8006084:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	2208      	movs	r2, #8
 800608a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	69db      	ldr	r3, [r3, #28]
 8006092:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006096:	2b00      	cmp	r3, #0
 8006098:	d003      	beq.n	80060a2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800609a:	6878      	ldr	r0, [r7, #4]
 800609c:	f7fc fa8e 	bl	80025bc <HAL_TIM_IC_CaptureCallback>
 80060a0:	e005      	b.n	80060ae <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80060a2:	6878      	ldr	r0, [r7, #4]
 80060a4:	f000 f9f5 	bl	8006492 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80060a8:	6878      	ldr	r0, [r7, #4]
 80060aa:	f000 f9fc 	bl	80064a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	2200      	movs	r2, #0
 80060b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	691b      	ldr	r3, [r3, #16]
 80060ba:	f003 0301 	and.w	r3, r3, #1
 80060be:	2b01      	cmp	r3, #1
 80060c0:	d10e      	bne.n	80060e0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	68db      	ldr	r3, [r3, #12]
 80060c8:	f003 0301 	and.w	r3, r3, #1
 80060cc:	2b01      	cmp	r3, #1
 80060ce:	d107      	bne.n	80060e0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f06f 0201 	mvn.w	r2, #1
 80060d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80060da:	6878      	ldr	r0, [r7, #4]
 80060dc:	f000 f9cf 	bl	800647e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	691b      	ldr	r3, [r3, #16]
 80060e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060ea:	2b80      	cmp	r3, #128	; 0x80
 80060ec:	d10e      	bne.n	800610c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	68db      	ldr	r3, [r3, #12]
 80060f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060f8:	2b80      	cmp	r3, #128	; 0x80
 80060fa:	d107      	bne.n	800610c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006104:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006106:	6878      	ldr	r0, [r7, #4]
 8006108:	f000 fd26 	bl	8006b58 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	691b      	ldr	r3, [r3, #16]
 8006112:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006116:	2b40      	cmp	r3, #64	; 0x40
 8006118:	d10e      	bne.n	8006138 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	68db      	ldr	r3, [r3, #12]
 8006120:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006124:	2b40      	cmp	r3, #64	; 0x40
 8006126:	d107      	bne.n	8006138 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006130:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006132:	6878      	ldr	r0, [r7, #4]
 8006134:	f000 f9c1 	bl	80064ba <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	691b      	ldr	r3, [r3, #16]
 800613e:	f003 0320 	and.w	r3, r3, #32
 8006142:	2b20      	cmp	r3, #32
 8006144:	d10e      	bne.n	8006164 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	68db      	ldr	r3, [r3, #12]
 800614c:	f003 0320 	and.w	r3, r3, #32
 8006150:	2b20      	cmp	r3, #32
 8006152:	d107      	bne.n	8006164 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f06f 0220 	mvn.w	r2, #32
 800615c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800615e:	6878      	ldr	r0, [r7, #4]
 8006160:	f000 fcf0 	bl	8006b44 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006164:	bf00      	nop
 8006166:	3708      	adds	r7, #8
 8006168:	46bd      	mov	sp, r7
 800616a:	bd80      	pop	{r7, pc}

0800616c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800616c:	b580      	push	{r7, lr}
 800616e:	b086      	sub	sp, #24
 8006170:	af00      	add	r7, sp, #0
 8006172:	60f8      	str	r0, [r7, #12]
 8006174:	60b9      	str	r1, [r7, #8]
 8006176:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006178:	2300      	movs	r3, #0
 800617a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006182:	2b01      	cmp	r3, #1
 8006184:	d101      	bne.n	800618a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006186:	2302      	movs	r3, #2
 8006188:	e0ae      	b.n	80062e8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	2201      	movs	r2, #1
 800618e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	2b0c      	cmp	r3, #12
 8006196:	f200 809f 	bhi.w	80062d8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800619a:	a201      	add	r2, pc, #4	; (adr r2, 80061a0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800619c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061a0:	080061d5 	.word	0x080061d5
 80061a4:	080062d9 	.word	0x080062d9
 80061a8:	080062d9 	.word	0x080062d9
 80061ac:	080062d9 	.word	0x080062d9
 80061b0:	08006215 	.word	0x08006215
 80061b4:	080062d9 	.word	0x080062d9
 80061b8:	080062d9 	.word	0x080062d9
 80061bc:	080062d9 	.word	0x080062d9
 80061c0:	08006257 	.word	0x08006257
 80061c4:	080062d9 	.word	0x080062d9
 80061c8:	080062d9 	.word	0x080062d9
 80061cc:	080062d9 	.word	0x080062d9
 80061d0:	08006297 	.word	0x08006297
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	68b9      	ldr	r1, [r7, #8]
 80061da:	4618      	mov	r0, r3
 80061dc:	f000 f9f8 	bl	80065d0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	699a      	ldr	r2, [r3, #24]
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	f042 0208 	orr.w	r2, r2, #8
 80061ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	699a      	ldr	r2, [r3, #24]
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	f022 0204 	bic.w	r2, r2, #4
 80061fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	6999      	ldr	r1, [r3, #24]
 8006206:	68bb      	ldr	r3, [r7, #8]
 8006208:	691a      	ldr	r2, [r3, #16]
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	430a      	orrs	r2, r1
 8006210:	619a      	str	r2, [r3, #24]
      break;
 8006212:	e064      	b.n	80062de <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	68b9      	ldr	r1, [r7, #8]
 800621a:	4618      	mov	r0, r3
 800621c:	f000 fa3e 	bl	800669c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	699a      	ldr	r2, [r3, #24]
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800622e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	699a      	ldr	r2, [r3, #24]
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800623e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	6999      	ldr	r1, [r3, #24]
 8006246:	68bb      	ldr	r3, [r7, #8]
 8006248:	691b      	ldr	r3, [r3, #16]
 800624a:	021a      	lsls	r2, r3, #8
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	430a      	orrs	r2, r1
 8006252:	619a      	str	r2, [r3, #24]
      break;
 8006254:	e043      	b.n	80062de <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	68b9      	ldr	r1, [r7, #8]
 800625c:	4618      	mov	r0, r3
 800625e:	f000 fa89 	bl	8006774 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	69da      	ldr	r2, [r3, #28]
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	f042 0208 	orr.w	r2, r2, #8
 8006270:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	69da      	ldr	r2, [r3, #28]
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	f022 0204 	bic.w	r2, r2, #4
 8006280:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	69d9      	ldr	r1, [r3, #28]
 8006288:	68bb      	ldr	r3, [r7, #8]
 800628a:	691a      	ldr	r2, [r3, #16]
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	430a      	orrs	r2, r1
 8006292:	61da      	str	r2, [r3, #28]
      break;
 8006294:	e023      	b.n	80062de <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	68b9      	ldr	r1, [r7, #8]
 800629c:	4618      	mov	r0, r3
 800629e:	f000 fad3 	bl	8006848 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	69da      	ldr	r2, [r3, #28]
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80062b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	69da      	ldr	r2, [r3, #28]
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80062c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	69d9      	ldr	r1, [r3, #28]
 80062c8:	68bb      	ldr	r3, [r7, #8]
 80062ca:	691b      	ldr	r3, [r3, #16]
 80062cc:	021a      	lsls	r2, r3, #8
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	430a      	orrs	r2, r1
 80062d4:	61da      	str	r2, [r3, #28]
      break;
 80062d6:	e002      	b.n	80062de <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80062d8:	2301      	movs	r3, #1
 80062da:	75fb      	strb	r3, [r7, #23]
      break;
 80062dc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	2200      	movs	r2, #0
 80062e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80062e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80062e8:	4618      	mov	r0, r3
 80062ea:	3718      	adds	r7, #24
 80062ec:	46bd      	mov	sp, r7
 80062ee:	bd80      	pop	{r7, pc}

080062f0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80062f0:	b580      	push	{r7, lr}
 80062f2:	b084      	sub	sp, #16
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	6078      	str	r0, [r7, #4]
 80062f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80062fa:	2300      	movs	r3, #0
 80062fc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006304:	2b01      	cmp	r3, #1
 8006306:	d101      	bne.n	800630c <HAL_TIM_ConfigClockSource+0x1c>
 8006308:	2302      	movs	r3, #2
 800630a:	e0b4      	b.n	8006476 <HAL_TIM_ConfigClockSource+0x186>
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2201      	movs	r2, #1
 8006310:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	2202      	movs	r2, #2
 8006318:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	689b      	ldr	r3, [r3, #8]
 8006322:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006324:	68bb      	ldr	r3, [r7, #8]
 8006326:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800632a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800632c:	68bb      	ldr	r3, [r7, #8]
 800632e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006332:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	68ba      	ldr	r2, [r7, #8]
 800633a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800633c:	683b      	ldr	r3, [r7, #0]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006344:	d03e      	beq.n	80063c4 <HAL_TIM_ConfigClockSource+0xd4>
 8006346:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800634a:	f200 8087 	bhi.w	800645c <HAL_TIM_ConfigClockSource+0x16c>
 800634e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006352:	f000 8086 	beq.w	8006462 <HAL_TIM_ConfigClockSource+0x172>
 8006356:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800635a:	d87f      	bhi.n	800645c <HAL_TIM_ConfigClockSource+0x16c>
 800635c:	2b70      	cmp	r3, #112	; 0x70
 800635e:	d01a      	beq.n	8006396 <HAL_TIM_ConfigClockSource+0xa6>
 8006360:	2b70      	cmp	r3, #112	; 0x70
 8006362:	d87b      	bhi.n	800645c <HAL_TIM_ConfigClockSource+0x16c>
 8006364:	2b60      	cmp	r3, #96	; 0x60
 8006366:	d050      	beq.n	800640a <HAL_TIM_ConfigClockSource+0x11a>
 8006368:	2b60      	cmp	r3, #96	; 0x60
 800636a:	d877      	bhi.n	800645c <HAL_TIM_ConfigClockSource+0x16c>
 800636c:	2b50      	cmp	r3, #80	; 0x50
 800636e:	d03c      	beq.n	80063ea <HAL_TIM_ConfigClockSource+0xfa>
 8006370:	2b50      	cmp	r3, #80	; 0x50
 8006372:	d873      	bhi.n	800645c <HAL_TIM_ConfigClockSource+0x16c>
 8006374:	2b40      	cmp	r3, #64	; 0x40
 8006376:	d058      	beq.n	800642a <HAL_TIM_ConfigClockSource+0x13a>
 8006378:	2b40      	cmp	r3, #64	; 0x40
 800637a:	d86f      	bhi.n	800645c <HAL_TIM_ConfigClockSource+0x16c>
 800637c:	2b30      	cmp	r3, #48	; 0x30
 800637e:	d064      	beq.n	800644a <HAL_TIM_ConfigClockSource+0x15a>
 8006380:	2b30      	cmp	r3, #48	; 0x30
 8006382:	d86b      	bhi.n	800645c <HAL_TIM_ConfigClockSource+0x16c>
 8006384:	2b20      	cmp	r3, #32
 8006386:	d060      	beq.n	800644a <HAL_TIM_ConfigClockSource+0x15a>
 8006388:	2b20      	cmp	r3, #32
 800638a:	d867      	bhi.n	800645c <HAL_TIM_ConfigClockSource+0x16c>
 800638c:	2b00      	cmp	r3, #0
 800638e:	d05c      	beq.n	800644a <HAL_TIM_ConfigClockSource+0x15a>
 8006390:	2b10      	cmp	r3, #16
 8006392:	d05a      	beq.n	800644a <HAL_TIM_ConfigClockSource+0x15a>
 8006394:	e062      	b.n	800645c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	6818      	ldr	r0, [r3, #0]
 800639a:	683b      	ldr	r3, [r7, #0]
 800639c:	6899      	ldr	r1, [r3, #8]
 800639e:	683b      	ldr	r3, [r7, #0]
 80063a0:	685a      	ldr	r2, [r3, #4]
 80063a2:	683b      	ldr	r3, [r7, #0]
 80063a4:	68db      	ldr	r3, [r3, #12]
 80063a6:	f000 fb19 	bl	80069dc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	689b      	ldr	r3, [r3, #8]
 80063b0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80063b2:	68bb      	ldr	r3, [r7, #8]
 80063b4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80063b8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	68ba      	ldr	r2, [r7, #8]
 80063c0:	609a      	str	r2, [r3, #8]
      break;
 80063c2:	e04f      	b.n	8006464 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	6818      	ldr	r0, [r3, #0]
 80063c8:	683b      	ldr	r3, [r7, #0]
 80063ca:	6899      	ldr	r1, [r3, #8]
 80063cc:	683b      	ldr	r3, [r7, #0]
 80063ce:	685a      	ldr	r2, [r3, #4]
 80063d0:	683b      	ldr	r3, [r7, #0]
 80063d2:	68db      	ldr	r3, [r3, #12]
 80063d4:	f000 fb02 	bl	80069dc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	689a      	ldr	r2, [r3, #8]
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80063e6:	609a      	str	r2, [r3, #8]
      break;
 80063e8:	e03c      	b.n	8006464 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	6818      	ldr	r0, [r3, #0]
 80063ee:	683b      	ldr	r3, [r7, #0]
 80063f0:	6859      	ldr	r1, [r3, #4]
 80063f2:	683b      	ldr	r3, [r7, #0]
 80063f4:	68db      	ldr	r3, [r3, #12]
 80063f6:	461a      	mov	r2, r3
 80063f8:	f000 fa76 	bl	80068e8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	2150      	movs	r1, #80	; 0x50
 8006402:	4618      	mov	r0, r3
 8006404:	f000 facf 	bl	80069a6 <TIM_ITRx_SetConfig>
      break;
 8006408:	e02c      	b.n	8006464 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	6818      	ldr	r0, [r3, #0]
 800640e:	683b      	ldr	r3, [r7, #0]
 8006410:	6859      	ldr	r1, [r3, #4]
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	68db      	ldr	r3, [r3, #12]
 8006416:	461a      	mov	r2, r3
 8006418:	f000 fa95 	bl	8006946 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	2160      	movs	r1, #96	; 0x60
 8006422:	4618      	mov	r0, r3
 8006424:	f000 fabf 	bl	80069a6 <TIM_ITRx_SetConfig>
      break;
 8006428:	e01c      	b.n	8006464 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	6818      	ldr	r0, [r3, #0]
 800642e:	683b      	ldr	r3, [r7, #0]
 8006430:	6859      	ldr	r1, [r3, #4]
 8006432:	683b      	ldr	r3, [r7, #0]
 8006434:	68db      	ldr	r3, [r3, #12]
 8006436:	461a      	mov	r2, r3
 8006438:	f000 fa56 	bl	80068e8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	2140      	movs	r1, #64	; 0x40
 8006442:	4618      	mov	r0, r3
 8006444:	f000 faaf 	bl	80069a6 <TIM_ITRx_SetConfig>
      break;
 8006448:	e00c      	b.n	8006464 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681a      	ldr	r2, [r3, #0]
 800644e:	683b      	ldr	r3, [r7, #0]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	4619      	mov	r1, r3
 8006454:	4610      	mov	r0, r2
 8006456:	f000 faa6 	bl	80069a6 <TIM_ITRx_SetConfig>
      break;
 800645a:	e003      	b.n	8006464 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800645c:	2301      	movs	r3, #1
 800645e:	73fb      	strb	r3, [r7, #15]
      break;
 8006460:	e000      	b.n	8006464 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006462:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	2201      	movs	r2, #1
 8006468:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2200      	movs	r2, #0
 8006470:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006474:	7bfb      	ldrb	r3, [r7, #15]
}
 8006476:	4618      	mov	r0, r3
 8006478:	3710      	adds	r7, #16
 800647a:	46bd      	mov	sp, r7
 800647c:	bd80      	pop	{r7, pc}

0800647e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800647e:	b480      	push	{r7}
 8006480:	b083      	sub	sp, #12
 8006482:	af00      	add	r7, sp, #0
 8006484:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006486:	bf00      	nop
 8006488:	370c      	adds	r7, #12
 800648a:	46bd      	mov	sp, r7
 800648c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006490:	4770      	bx	lr

08006492 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006492:	b480      	push	{r7}
 8006494:	b083      	sub	sp, #12
 8006496:	af00      	add	r7, sp, #0
 8006498:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800649a:	bf00      	nop
 800649c:	370c      	adds	r7, #12
 800649e:	46bd      	mov	sp, r7
 80064a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a4:	4770      	bx	lr

080064a6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80064a6:	b480      	push	{r7}
 80064a8:	b083      	sub	sp, #12
 80064aa:	af00      	add	r7, sp, #0
 80064ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80064ae:	bf00      	nop
 80064b0:	370c      	adds	r7, #12
 80064b2:	46bd      	mov	sp, r7
 80064b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b8:	4770      	bx	lr

080064ba <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80064ba:	b480      	push	{r7}
 80064bc:	b083      	sub	sp, #12
 80064be:	af00      	add	r7, sp, #0
 80064c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80064c2:	bf00      	nop
 80064c4:	370c      	adds	r7, #12
 80064c6:	46bd      	mov	sp, r7
 80064c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064cc:	4770      	bx	lr
	...

080064d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80064d0:	b480      	push	{r7}
 80064d2:	b085      	sub	sp, #20
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	6078      	str	r0, [r7, #4]
 80064d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	4a34      	ldr	r2, [pc, #208]	; (80065b4 <TIM_Base_SetConfig+0xe4>)
 80064e4:	4293      	cmp	r3, r2
 80064e6:	d00f      	beq.n	8006508 <TIM_Base_SetConfig+0x38>
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064ee:	d00b      	beq.n	8006508 <TIM_Base_SetConfig+0x38>
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	4a31      	ldr	r2, [pc, #196]	; (80065b8 <TIM_Base_SetConfig+0xe8>)
 80064f4:	4293      	cmp	r3, r2
 80064f6:	d007      	beq.n	8006508 <TIM_Base_SetConfig+0x38>
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	4a30      	ldr	r2, [pc, #192]	; (80065bc <TIM_Base_SetConfig+0xec>)
 80064fc:	4293      	cmp	r3, r2
 80064fe:	d003      	beq.n	8006508 <TIM_Base_SetConfig+0x38>
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	4a2f      	ldr	r2, [pc, #188]	; (80065c0 <TIM_Base_SetConfig+0xf0>)
 8006504:	4293      	cmp	r3, r2
 8006506:	d108      	bne.n	800651a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800650e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006510:	683b      	ldr	r3, [r7, #0]
 8006512:	685b      	ldr	r3, [r3, #4]
 8006514:	68fa      	ldr	r2, [r7, #12]
 8006516:	4313      	orrs	r3, r2
 8006518:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	4a25      	ldr	r2, [pc, #148]	; (80065b4 <TIM_Base_SetConfig+0xe4>)
 800651e:	4293      	cmp	r3, r2
 8006520:	d01b      	beq.n	800655a <TIM_Base_SetConfig+0x8a>
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006528:	d017      	beq.n	800655a <TIM_Base_SetConfig+0x8a>
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	4a22      	ldr	r2, [pc, #136]	; (80065b8 <TIM_Base_SetConfig+0xe8>)
 800652e:	4293      	cmp	r3, r2
 8006530:	d013      	beq.n	800655a <TIM_Base_SetConfig+0x8a>
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	4a21      	ldr	r2, [pc, #132]	; (80065bc <TIM_Base_SetConfig+0xec>)
 8006536:	4293      	cmp	r3, r2
 8006538:	d00f      	beq.n	800655a <TIM_Base_SetConfig+0x8a>
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	4a20      	ldr	r2, [pc, #128]	; (80065c0 <TIM_Base_SetConfig+0xf0>)
 800653e:	4293      	cmp	r3, r2
 8006540:	d00b      	beq.n	800655a <TIM_Base_SetConfig+0x8a>
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	4a1f      	ldr	r2, [pc, #124]	; (80065c4 <TIM_Base_SetConfig+0xf4>)
 8006546:	4293      	cmp	r3, r2
 8006548:	d007      	beq.n	800655a <TIM_Base_SetConfig+0x8a>
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	4a1e      	ldr	r2, [pc, #120]	; (80065c8 <TIM_Base_SetConfig+0xf8>)
 800654e:	4293      	cmp	r3, r2
 8006550:	d003      	beq.n	800655a <TIM_Base_SetConfig+0x8a>
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	4a1d      	ldr	r2, [pc, #116]	; (80065cc <TIM_Base_SetConfig+0xfc>)
 8006556:	4293      	cmp	r3, r2
 8006558:	d108      	bne.n	800656c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006560:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006562:	683b      	ldr	r3, [r7, #0]
 8006564:	68db      	ldr	r3, [r3, #12]
 8006566:	68fa      	ldr	r2, [r7, #12]
 8006568:	4313      	orrs	r3, r2
 800656a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006572:	683b      	ldr	r3, [r7, #0]
 8006574:	695b      	ldr	r3, [r3, #20]
 8006576:	4313      	orrs	r3, r2
 8006578:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	68fa      	ldr	r2, [r7, #12]
 800657e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006580:	683b      	ldr	r3, [r7, #0]
 8006582:	689a      	ldr	r2, [r3, #8]
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006588:	683b      	ldr	r3, [r7, #0]
 800658a:	681a      	ldr	r2, [r3, #0]
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	4a08      	ldr	r2, [pc, #32]	; (80065b4 <TIM_Base_SetConfig+0xe4>)
 8006594:	4293      	cmp	r3, r2
 8006596:	d103      	bne.n	80065a0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006598:	683b      	ldr	r3, [r7, #0]
 800659a:	691a      	ldr	r2, [r3, #16]
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	2201      	movs	r2, #1
 80065a4:	615a      	str	r2, [r3, #20]
}
 80065a6:	bf00      	nop
 80065a8:	3714      	adds	r7, #20
 80065aa:	46bd      	mov	sp, r7
 80065ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b0:	4770      	bx	lr
 80065b2:	bf00      	nop
 80065b4:	40010000 	.word	0x40010000
 80065b8:	40000400 	.word	0x40000400
 80065bc:	40000800 	.word	0x40000800
 80065c0:	40000c00 	.word	0x40000c00
 80065c4:	40014000 	.word	0x40014000
 80065c8:	40014400 	.word	0x40014400
 80065cc:	40014800 	.word	0x40014800

080065d0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80065d0:	b480      	push	{r7}
 80065d2:	b087      	sub	sp, #28
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	6078      	str	r0, [r7, #4]
 80065d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	6a1b      	ldr	r3, [r3, #32]
 80065de:	f023 0201 	bic.w	r2, r3, #1
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	6a1b      	ldr	r3, [r3, #32]
 80065ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	685b      	ldr	r3, [r3, #4]
 80065f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	699b      	ldr	r3, [r3, #24]
 80065f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	f023 0303 	bic.w	r3, r3, #3
 8006606:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006608:	683b      	ldr	r3, [r7, #0]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	68fa      	ldr	r2, [r7, #12]
 800660e:	4313      	orrs	r3, r2
 8006610:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006612:	697b      	ldr	r3, [r7, #20]
 8006614:	f023 0302 	bic.w	r3, r3, #2
 8006618:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800661a:	683b      	ldr	r3, [r7, #0]
 800661c:	689b      	ldr	r3, [r3, #8]
 800661e:	697a      	ldr	r2, [r7, #20]
 8006620:	4313      	orrs	r3, r2
 8006622:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	4a1c      	ldr	r2, [pc, #112]	; (8006698 <TIM_OC1_SetConfig+0xc8>)
 8006628:	4293      	cmp	r3, r2
 800662a:	d10c      	bne.n	8006646 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800662c:	697b      	ldr	r3, [r7, #20]
 800662e:	f023 0308 	bic.w	r3, r3, #8
 8006632:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006634:	683b      	ldr	r3, [r7, #0]
 8006636:	68db      	ldr	r3, [r3, #12]
 8006638:	697a      	ldr	r2, [r7, #20]
 800663a:	4313      	orrs	r3, r2
 800663c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800663e:	697b      	ldr	r3, [r7, #20]
 8006640:	f023 0304 	bic.w	r3, r3, #4
 8006644:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	4a13      	ldr	r2, [pc, #76]	; (8006698 <TIM_OC1_SetConfig+0xc8>)
 800664a:	4293      	cmp	r3, r2
 800664c:	d111      	bne.n	8006672 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800664e:	693b      	ldr	r3, [r7, #16]
 8006650:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006654:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006656:	693b      	ldr	r3, [r7, #16]
 8006658:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800665c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800665e:	683b      	ldr	r3, [r7, #0]
 8006660:	695b      	ldr	r3, [r3, #20]
 8006662:	693a      	ldr	r2, [r7, #16]
 8006664:	4313      	orrs	r3, r2
 8006666:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006668:	683b      	ldr	r3, [r7, #0]
 800666a:	699b      	ldr	r3, [r3, #24]
 800666c:	693a      	ldr	r2, [r7, #16]
 800666e:	4313      	orrs	r3, r2
 8006670:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	693a      	ldr	r2, [r7, #16]
 8006676:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	68fa      	ldr	r2, [r7, #12]
 800667c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800667e:	683b      	ldr	r3, [r7, #0]
 8006680:	685a      	ldr	r2, [r3, #4]
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	697a      	ldr	r2, [r7, #20]
 800668a:	621a      	str	r2, [r3, #32]
}
 800668c:	bf00      	nop
 800668e:	371c      	adds	r7, #28
 8006690:	46bd      	mov	sp, r7
 8006692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006696:	4770      	bx	lr
 8006698:	40010000 	.word	0x40010000

0800669c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800669c:	b480      	push	{r7}
 800669e:	b087      	sub	sp, #28
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	6078      	str	r0, [r7, #4]
 80066a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	6a1b      	ldr	r3, [r3, #32]
 80066aa:	f023 0210 	bic.w	r2, r3, #16
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	6a1b      	ldr	r3, [r3, #32]
 80066b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	685b      	ldr	r3, [r3, #4]
 80066bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	699b      	ldr	r3, [r3, #24]
 80066c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80066ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80066d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80066d4:	683b      	ldr	r3, [r7, #0]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	021b      	lsls	r3, r3, #8
 80066da:	68fa      	ldr	r2, [r7, #12]
 80066dc:	4313      	orrs	r3, r2
 80066de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80066e0:	697b      	ldr	r3, [r7, #20]
 80066e2:	f023 0320 	bic.w	r3, r3, #32
 80066e6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80066e8:	683b      	ldr	r3, [r7, #0]
 80066ea:	689b      	ldr	r3, [r3, #8]
 80066ec:	011b      	lsls	r3, r3, #4
 80066ee:	697a      	ldr	r2, [r7, #20]
 80066f0:	4313      	orrs	r3, r2
 80066f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	4a1e      	ldr	r2, [pc, #120]	; (8006770 <TIM_OC2_SetConfig+0xd4>)
 80066f8:	4293      	cmp	r3, r2
 80066fa:	d10d      	bne.n	8006718 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80066fc:	697b      	ldr	r3, [r7, #20]
 80066fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006702:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006704:	683b      	ldr	r3, [r7, #0]
 8006706:	68db      	ldr	r3, [r3, #12]
 8006708:	011b      	lsls	r3, r3, #4
 800670a:	697a      	ldr	r2, [r7, #20]
 800670c:	4313      	orrs	r3, r2
 800670e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006710:	697b      	ldr	r3, [r7, #20]
 8006712:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006716:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	4a15      	ldr	r2, [pc, #84]	; (8006770 <TIM_OC2_SetConfig+0xd4>)
 800671c:	4293      	cmp	r3, r2
 800671e:	d113      	bne.n	8006748 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006720:	693b      	ldr	r3, [r7, #16]
 8006722:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006726:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006728:	693b      	ldr	r3, [r7, #16]
 800672a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800672e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006730:	683b      	ldr	r3, [r7, #0]
 8006732:	695b      	ldr	r3, [r3, #20]
 8006734:	009b      	lsls	r3, r3, #2
 8006736:	693a      	ldr	r2, [r7, #16]
 8006738:	4313      	orrs	r3, r2
 800673a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800673c:	683b      	ldr	r3, [r7, #0]
 800673e:	699b      	ldr	r3, [r3, #24]
 8006740:	009b      	lsls	r3, r3, #2
 8006742:	693a      	ldr	r2, [r7, #16]
 8006744:	4313      	orrs	r3, r2
 8006746:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	693a      	ldr	r2, [r7, #16]
 800674c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	68fa      	ldr	r2, [r7, #12]
 8006752:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006754:	683b      	ldr	r3, [r7, #0]
 8006756:	685a      	ldr	r2, [r3, #4]
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	697a      	ldr	r2, [r7, #20]
 8006760:	621a      	str	r2, [r3, #32]
}
 8006762:	bf00      	nop
 8006764:	371c      	adds	r7, #28
 8006766:	46bd      	mov	sp, r7
 8006768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676c:	4770      	bx	lr
 800676e:	bf00      	nop
 8006770:	40010000 	.word	0x40010000

08006774 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006774:	b480      	push	{r7}
 8006776:	b087      	sub	sp, #28
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]
 800677c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	6a1b      	ldr	r3, [r3, #32]
 8006782:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	6a1b      	ldr	r3, [r3, #32]
 800678e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	685b      	ldr	r3, [r3, #4]
 8006794:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	69db      	ldr	r3, [r3, #28]
 800679a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	f023 0303 	bic.w	r3, r3, #3
 80067aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80067ac:	683b      	ldr	r3, [r7, #0]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	68fa      	ldr	r2, [r7, #12]
 80067b2:	4313      	orrs	r3, r2
 80067b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80067b6:	697b      	ldr	r3, [r7, #20]
 80067b8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80067bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80067be:	683b      	ldr	r3, [r7, #0]
 80067c0:	689b      	ldr	r3, [r3, #8]
 80067c2:	021b      	lsls	r3, r3, #8
 80067c4:	697a      	ldr	r2, [r7, #20]
 80067c6:	4313      	orrs	r3, r2
 80067c8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	4a1d      	ldr	r2, [pc, #116]	; (8006844 <TIM_OC3_SetConfig+0xd0>)
 80067ce:	4293      	cmp	r3, r2
 80067d0:	d10d      	bne.n	80067ee <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80067d2:	697b      	ldr	r3, [r7, #20]
 80067d4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80067d8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80067da:	683b      	ldr	r3, [r7, #0]
 80067dc:	68db      	ldr	r3, [r3, #12]
 80067de:	021b      	lsls	r3, r3, #8
 80067e0:	697a      	ldr	r2, [r7, #20]
 80067e2:	4313      	orrs	r3, r2
 80067e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80067e6:	697b      	ldr	r3, [r7, #20]
 80067e8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80067ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	4a14      	ldr	r2, [pc, #80]	; (8006844 <TIM_OC3_SetConfig+0xd0>)
 80067f2:	4293      	cmp	r3, r2
 80067f4:	d113      	bne.n	800681e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80067f6:	693b      	ldr	r3, [r7, #16]
 80067f8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80067fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80067fe:	693b      	ldr	r3, [r7, #16]
 8006800:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006804:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006806:	683b      	ldr	r3, [r7, #0]
 8006808:	695b      	ldr	r3, [r3, #20]
 800680a:	011b      	lsls	r3, r3, #4
 800680c:	693a      	ldr	r2, [r7, #16]
 800680e:	4313      	orrs	r3, r2
 8006810:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006812:	683b      	ldr	r3, [r7, #0]
 8006814:	699b      	ldr	r3, [r3, #24]
 8006816:	011b      	lsls	r3, r3, #4
 8006818:	693a      	ldr	r2, [r7, #16]
 800681a:	4313      	orrs	r3, r2
 800681c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	693a      	ldr	r2, [r7, #16]
 8006822:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	68fa      	ldr	r2, [r7, #12]
 8006828:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800682a:	683b      	ldr	r3, [r7, #0]
 800682c:	685a      	ldr	r2, [r3, #4]
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	697a      	ldr	r2, [r7, #20]
 8006836:	621a      	str	r2, [r3, #32]
}
 8006838:	bf00      	nop
 800683a:	371c      	adds	r7, #28
 800683c:	46bd      	mov	sp, r7
 800683e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006842:	4770      	bx	lr
 8006844:	40010000 	.word	0x40010000

08006848 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006848:	b480      	push	{r7}
 800684a:	b087      	sub	sp, #28
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
 8006850:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	6a1b      	ldr	r3, [r3, #32]
 8006856:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	6a1b      	ldr	r3, [r3, #32]
 8006862:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	685b      	ldr	r3, [r3, #4]
 8006868:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	69db      	ldr	r3, [r3, #28]
 800686e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006876:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800687e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006880:	683b      	ldr	r3, [r7, #0]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	021b      	lsls	r3, r3, #8
 8006886:	68fa      	ldr	r2, [r7, #12]
 8006888:	4313      	orrs	r3, r2
 800688a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800688c:	693b      	ldr	r3, [r7, #16]
 800688e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006892:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006894:	683b      	ldr	r3, [r7, #0]
 8006896:	689b      	ldr	r3, [r3, #8]
 8006898:	031b      	lsls	r3, r3, #12
 800689a:	693a      	ldr	r2, [r7, #16]
 800689c:	4313      	orrs	r3, r2
 800689e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	4a10      	ldr	r2, [pc, #64]	; (80068e4 <TIM_OC4_SetConfig+0x9c>)
 80068a4:	4293      	cmp	r3, r2
 80068a6:	d109      	bne.n	80068bc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80068a8:	697b      	ldr	r3, [r7, #20]
 80068aa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80068ae:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80068b0:	683b      	ldr	r3, [r7, #0]
 80068b2:	695b      	ldr	r3, [r3, #20]
 80068b4:	019b      	lsls	r3, r3, #6
 80068b6:	697a      	ldr	r2, [r7, #20]
 80068b8:	4313      	orrs	r3, r2
 80068ba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	697a      	ldr	r2, [r7, #20]
 80068c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	68fa      	ldr	r2, [r7, #12]
 80068c6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80068c8:	683b      	ldr	r3, [r7, #0]
 80068ca:	685a      	ldr	r2, [r3, #4]
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	693a      	ldr	r2, [r7, #16]
 80068d4:	621a      	str	r2, [r3, #32]
}
 80068d6:	bf00      	nop
 80068d8:	371c      	adds	r7, #28
 80068da:	46bd      	mov	sp, r7
 80068dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e0:	4770      	bx	lr
 80068e2:	bf00      	nop
 80068e4:	40010000 	.word	0x40010000

080068e8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80068e8:	b480      	push	{r7}
 80068ea:	b087      	sub	sp, #28
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	60f8      	str	r0, [r7, #12]
 80068f0:	60b9      	str	r1, [r7, #8]
 80068f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	6a1b      	ldr	r3, [r3, #32]
 80068f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	6a1b      	ldr	r3, [r3, #32]
 80068fe:	f023 0201 	bic.w	r2, r3, #1
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	699b      	ldr	r3, [r3, #24]
 800690a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800690c:	693b      	ldr	r3, [r7, #16]
 800690e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006912:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	011b      	lsls	r3, r3, #4
 8006918:	693a      	ldr	r2, [r7, #16]
 800691a:	4313      	orrs	r3, r2
 800691c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800691e:	697b      	ldr	r3, [r7, #20]
 8006920:	f023 030a 	bic.w	r3, r3, #10
 8006924:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006926:	697a      	ldr	r2, [r7, #20]
 8006928:	68bb      	ldr	r3, [r7, #8]
 800692a:	4313      	orrs	r3, r2
 800692c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	693a      	ldr	r2, [r7, #16]
 8006932:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	697a      	ldr	r2, [r7, #20]
 8006938:	621a      	str	r2, [r3, #32]
}
 800693a:	bf00      	nop
 800693c:	371c      	adds	r7, #28
 800693e:	46bd      	mov	sp, r7
 8006940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006944:	4770      	bx	lr

08006946 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006946:	b480      	push	{r7}
 8006948:	b087      	sub	sp, #28
 800694a:	af00      	add	r7, sp, #0
 800694c:	60f8      	str	r0, [r7, #12]
 800694e:	60b9      	str	r1, [r7, #8]
 8006950:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	6a1b      	ldr	r3, [r3, #32]
 8006956:	f023 0210 	bic.w	r2, r3, #16
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	699b      	ldr	r3, [r3, #24]
 8006962:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	6a1b      	ldr	r3, [r3, #32]
 8006968:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800696a:	697b      	ldr	r3, [r7, #20]
 800696c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006970:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	031b      	lsls	r3, r3, #12
 8006976:	697a      	ldr	r2, [r7, #20]
 8006978:	4313      	orrs	r3, r2
 800697a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800697c:	693b      	ldr	r3, [r7, #16]
 800697e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006982:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006984:	68bb      	ldr	r3, [r7, #8]
 8006986:	011b      	lsls	r3, r3, #4
 8006988:	693a      	ldr	r2, [r7, #16]
 800698a:	4313      	orrs	r3, r2
 800698c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	697a      	ldr	r2, [r7, #20]
 8006992:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	693a      	ldr	r2, [r7, #16]
 8006998:	621a      	str	r2, [r3, #32]
}
 800699a:	bf00      	nop
 800699c:	371c      	adds	r7, #28
 800699e:	46bd      	mov	sp, r7
 80069a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a4:	4770      	bx	lr

080069a6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80069a6:	b480      	push	{r7}
 80069a8:	b085      	sub	sp, #20
 80069aa:	af00      	add	r7, sp, #0
 80069ac:	6078      	str	r0, [r7, #4]
 80069ae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	689b      	ldr	r3, [r3, #8]
 80069b4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069bc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80069be:	683a      	ldr	r2, [r7, #0]
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	4313      	orrs	r3, r2
 80069c4:	f043 0307 	orr.w	r3, r3, #7
 80069c8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	68fa      	ldr	r2, [r7, #12]
 80069ce:	609a      	str	r2, [r3, #8]
}
 80069d0:	bf00      	nop
 80069d2:	3714      	adds	r7, #20
 80069d4:	46bd      	mov	sp, r7
 80069d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069da:	4770      	bx	lr

080069dc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80069dc:	b480      	push	{r7}
 80069de:	b087      	sub	sp, #28
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	60f8      	str	r0, [r7, #12]
 80069e4:	60b9      	str	r1, [r7, #8]
 80069e6:	607a      	str	r2, [r7, #4]
 80069e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	689b      	ldr	r3, [r3, #8]
 80069ee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80069f0:	697b      	ldr	r3, [r7, #20]
 80069f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80069f6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80069f8:	683b      	ldr	r3, [r7, #0]
 80069fa:	021a      	lsls	r2, r3, #8
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	431a      	orrs	r2, r3
 8006a00:	68bb      	ldr	r3, [r7, #8]
 8006a02:	4313      	orrs	r3, r2
 8006a04:	697a      	ldr	r2, [r7, #20]
 8006a06:	4313      	orrs	r3, r2
 8006a08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	697a      	ldr	r2, [r7, #20]
 8006a0e:	609a      	str	r2, [r3, #8]
}
 8006a10:	bf00      	nop
 8006a12:	371c      	adds	r7, #28
 8006a14:	46bd      	mov	sp, r7
 8006a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1a:	4770      	bx	lr

08006a1c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006a1c:	b480      	push	{r7}
 8006a1e:	b087      	sub	sp, #28
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	60f8      	str	r0, [r7, #12]
 8006a24:	60b9      	str	r1, [r7, #8]
 8006a26:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006a28:	68bb      	ldr	r3, [r7, #8]
 8006a2a:	f003 031f 	and.w	r3, r3, #31
 8006a2e:	2201      	movs	r2, #1
 8006a30:	fa02 f303 	lsl.w	r3, r2, r3
 8006a34:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	6a1a      	ldr	r2, [r3, #32]
 8006a3a:	697b      	ldr	r3, [r7, #20]
 8006a3c:	43db      	mvns	r3, r3
 8006a3e:	401a      	ands	r2, r3
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	6a1a      	ldr	r2, [r3, #32]
 8006a48:	68bb      	ldr	r3, [r7, #8]
 8006a4a:	f003 031f 	and.w	r3, r3, #31
 8006a4e:	6879      	ldr	r1, [r7, #4]
 8006a50:	fa01 f303 	lsl.w	r3, r1, r3
 8006a54:	431a      	orrs	r2, r3
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	621a      	str	r2, [r3, #32]
}
 8006a5a:	bf00      	nop
 8006a5c:	371c      	adds	r7, #28
 8006a5e:	46bd      	mov	sp, r7
 8006a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a64:	4770      	bx	lr
	...

08006a68 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006a68:	b480      	push	{r7}
 8006a6a:	b085      	sub	sp, #20
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
 8006a70:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a78:	2b01      	cmp	r3, #1
 8006a7a:	d101      	bne.n	8006a80 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006a7c:	2302      	movs	r3, #2
 8006a7e:	e050      	b.n	8006b22 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2201      	movs	r2, #1
 8006a84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	2202      	movs	r2, #2
 8006a8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	685b      	ldr	r3, [r3, #4]
 8006a96:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	689b      	ldr	r3, [r3, #8]
 8006a9e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006aa6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006aa8:	683b      	ldr	r3, [r7, #0]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	68fa      	ldr	r2, [r7, #12]
 8006aae:	4313      	orrs	r3, r2
 8006ab0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	68fa      	ldr	r2, [r7, #12]
 8006ab8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	4a1c      	ldr	r2, [pc, #112]	; (8006b30 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006ac0:	4293      	cmp	r3, r2
 8006ac2:	d018      	beq.n	8006af6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006acc:	d013      	beq.n	8006af6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	4a18      	ldr	r2, [pc, #96]	; (8006b34 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006ad4:	4293      	cmp	r3, r2
 8006ad6:	d00e      	beq.n	8006af6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	4a16      	ldr	r2, [pc, #88]	; (8006b38 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006ade:	4293      	cmp	r3, r2
 8006ae0:	d009      	beq.n	8006af6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	4a15      	ldr	r2, [pc, #84]	; (8006b3c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006ae8:	4293      	cmp	r3, r2
 8006aea:	d004      	beq.n	8006af6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	4a13      	ldr	r2, [pc, #76]	; (8006b40 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006af2:	4293      	cmp	r3, r2
 8006af4:	d10c      	bne.n	8006b10 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006af6:	68bb      	ldr	r3, [r7, #8]
 8006af8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006afc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006afe:	683b      	ldr	r3, [r7, #0]
 8006b00:	685b      	ldr	r3, [r3, #4]
 8006b02:	68ba      	ldr	r2, [r7, #8]
 8006b04:	4313      	orrs	r3, r2
 8006b06:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	68ba      	ldr	r2, [r7, #8]
 8006b0e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	2201      	movs	r2, #1
 8006b14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	2200      	movs	r2, #0
 8006b1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006b20:	2300      	movs	r3, #0
}
 8006b22:	4618      	mov	r0, r3
 8006b24:	3714      	adds	r7, #20
 8006b26:	46bd      	mov	sp, r7
 8006b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2c:	4770      	bx	lr
 8006b2e:	bf00      	nop
 8006b30:	40010000 	.word	0x40010000
 8006b34:	40000400 	.word	0x40000400
 8006b38:	40000800 	.word	0x40000800
 8006b3c:	40000c00 	.word	0x40000c00
 8006b40:	40014000 	.word	0x40014000

08006b44 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006b44:	b480      	push	{r7}
 8006b46:	b083      	sub	sp, #12
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006b4c:	bf00      	nop
 8006b4e:	370c      	adds	r7, #12
 8006b50:	46bd      	mov	sp, r7
 8006b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b56:	4770      	bx	lr

08006b58 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006b58:	b480      	push	{r7}
 8006b5a:	b083      	sub	sp, #12
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006b60:	bf00      	nop
 8006b62:	370c      	adds	r7, #12
 8006b64:	46bd      	mov	sp, r7
 8006b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6a:	4770      	bx	lr

08006b6c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006b6c:	b580      	push	{r7, lr}
 8006b6e:	b082      	sub	sp, #8
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d101      	bne.n	8006b7e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006b7a:	2301      	movs	r3, #1
 8006b7c:	e03f      	b.n	8006bfe <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b84:	b2db      	uxtb	r3, r3
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d106      	bne.n	8006b98 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	2200      	movs	r2, #0
 8006b8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006b92:	6878      	ldr	r0, [r7, #4]
 8006b94:	f7fc fb10 	bl	80031b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	2224      	movs	r2, #36	; 0x24
 8006b9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	68da      	ldr	r2, [r3, #12]
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006bae:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006bb0:	6878      	ldr	r0, [r7, #4]
 8006bb2:	f000 f9cb 	bl	8006f4c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	691a      	ldr	r2, [r3, #16]
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006bc4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	695a      	ldr	r2, [r3, #20]
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006bd4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	68da      	ldr	r2, [r3, #12]
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006be4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	2200      	movs	r2, #0
 8006bea:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	2220      	movs	r2, #32
 8006bf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	2220      	movs	r2, #32
 8006bf8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006bfc:	2300      	movs	r3, #0
}
 8006bfe:	4618      	mov	r0, r3
 8006c00:	3708      	adds	r7, #8
 8006c02:	46bd      	mov	sp, r7
 8006c04:	bd80      	pop	{r7, pc}

08006c06 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006c06:	b580      	push	{r7, lr}
 8006c08:	b08a      	sub	sp, #40	; 0x28
 8006c0a:	af02      	add	r7, sp, #8
 8006c0c:	60f8      	str	r0, [r7, #12]
 8006c0e:	60b9      	str	r1, [r7, #8]
 8006c10:	603b      	str	r3, [r7, #0]
 8006c12:	4613      	mov	r3, r2
 8006c14:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006c16:	2300      	movs	r3, #0
 8006c18:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c20:	b2db      	uxtb	r3, r3
 8006c22:	2b20      	cmp	r3, #32
 8006c24:	d17c      	bne.n	8006d20 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006c26:	68bb      	ldr	r3, [r7, #8]
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d002      	beq.n	8006c32 <HAL_UART_Transmit+0x2c>
 8006c2c:	88fb      	ldrh	r3, [r7, #6]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d101      	bne.n	8006c36 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006c32:	2301      	movs	r3, #1
 8006c34:	e075      	b.n	8006d22 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c3c:	2b01      	cmp	r3, #1
 8006c3e:	d101      	bne.n	8006c44 <HAL_UART_Transmit+0x3e>
 8006c40:	2302      	movs	r3, #2
 8006c42:	e06e      	b.n	8006d22 <HAL_UART_Transmit+0x11c>
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	2201      	movs	r2, #1
 8006c48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	2200      	movs	r2, #0
 8006c50:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	2221      	movs	r2, #33	; 0x21
 8006c56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006c5a:	f7fc fb85 	bl	8003368 <HAL_GetTick>
 8006c5e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	88fa      	ldrh	r2, [r7, #6]
 8006c64:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	88fa      	ldrh	r2, [r7, #6]
 8006c6a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	689b      	ldr	r3, [r3, #8]
 8006c70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c74:	d108      	bne.n	8006c88 <HAL_UART_Transmit+0x82>
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	691b      	ldr	r3, [r3, #16]
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d104      	bne.n	8006c88 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006c7e:	2300      	movs	r3, #0
 8006c80:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006c82:	68bb      	ldr	r3, [r7, #8]
 8006c84:	61bb      	str	r3, [r7, #24]
 8006c86:	e003      	b.n	8006c90 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006c88:	68bb      	ldr	r3, [r7, #8]
 8006c8a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006c8c:	2300      	movs	r3, #0
 8006c8e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	2200      	movs	r2, #0
 8006c94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006c98:	e02a      	b.n	8006cf0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006c9a:	683b      	ldr	r3, [r7, #0]
 8006c9c:	9300      	str	r3, [sp, #0]
 8006c9e:	697b      	ldr	r3, [r7, #20]
 8006ca0:	2200      	movs	r2, #0
 8006ca2:	2180      	movs	r1, #128	; 0x80
 8006ca4:	68f8      	ldr	r0, [r7, #12]
 8006ca6:	f000 f8e2 	bl	8006e6e <UART_WaitOnFlagUntilTimeout>
 8006caa:	4603      	mov	r3, r0
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d001      	beq.n	8006cb4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006cb0:	2303      	movs	r3, #3
 8006cb2:	e036      	b.n	8006d22 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006cb4:	69fb      	ldr	r3, [r7, #28]
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d10b      	bne.n	8006cd2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006cba:	69bb      	ldr	r3, [r7, #24]
 8006cbc:	881b      	ldrh	r3, [r3, #0]
 8006cbe:	461a      	mov	r2, r3
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006cc8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006cca:	69bb      	ldr	r3, [r7, #24]
 8006ccc:	3302      	adds	r3, #2
 8006cce:	61bb      	str	r3, [r7, #24]
 8006cd0:	e007      	b.n	8006ce2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006cd2:	69fb      	ldr	r3, [r7, #28]
 8006cd4:	781a      	ldrb	r2, [r3, #0]
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006cdc:	69fb      	ldr	r3, [r7, #28]
 8006cde:	3301      	adds	r3, #1
 8006ce0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006ce6:	b29b      	uxth	r3, r3
 8006ce8:	3b01      	subs	r3, #1
 8006cea:	b29a      	uxth	r2, r3
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006cf4:	b29b      	uxth	r3, r3
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d1cf      	bne.n	8006c9a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006cfa:	683b      	ldr	r3, [r7, #0]
 8006cfc:	9300      	str	r3, [sp, #0]
 8006cfe:	697b      	ldr	r3, [r7, #20]
 8006d00:	2200      	movs	r2, #0
 8006d02:	2140      	movs	r1, #64	; 0x40
 8006d04:	68f8      	ldr	r0, [r7, #12]
 8006d06:	f000 f8b2 	bl	8006e6e <UART_WaitOnFlagUntilTimeout>
 8006d0a:	4603      	mov	r3, r0
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d001      	beq.n	8006d14 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006d10:	2303      	movs	r3, #3
 8006d12:	e006      	b.n	8006d22 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	2220      	movs	r2, #32
 8006d18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006d1c:	2300      	movs	r3, #0
 8006d1e:	e000      	b.n	8006d22 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006d20:	2302      	movs	r3, #2
  }
}
 8006d22:	4618      	mov	r0, r3
 8006d24:	3720      	adds	r7, #32
 8006d26:	46bd      	mov	sp, r7
 8006d28:	bd80      	pop	{r7, pc}

08006d2a <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006d2a:	b580      	push	{r7, lr}
 8006d2c:	b08a      	sub	sp, #40	; 0x28
 8006d2e:	af02      	add	r7, sp, #8
 8006d30:	60f8      	str	r0, [r7, #12]
 8006d32:	60b9      	str	r1, [r7, #8]
 8006d34:	603b      	str	r3, [r7, #0]
 8006d36:	4613      	mov	r3, r2
 8006d38:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006d44:	b2db      	uxtb	r3, r3
 8006d46:	2b20      	cmp	r3, #32
 8006d48:	f040 808c 	bne.w	8006e64 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006d4c:	68bb      	ldr	r3, [r7, #8]
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d002      	beq.n	8006d58 <HAL_UART_Receive+0x2e>
 8006d52:	88fb      	ldrh	r3, [r7, #6]
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d101      	bne.n	8006d5c <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8006d58:	2301      	movs	r3, #1
 8006d5a:	e084      	b.n	8006e66 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d62:	2b01      	cmp	r3, #1
 8006d64:	d101      	bne.n	8006d6a <HAL_UART_Receive+0x40>
 8006d66:	2302      	movs	r3, #2
 8006d68:	e07d      	b.n	8006e66 <HAL_UART_Receive+0x13c>
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	2201      	movs	r2, #1
 8006d6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	2200      	movs	r2, #0
 8006d76:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	2222      	movs	r2, #34	; 0x22
 8006d7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	2200      	movs	r2, #0
 8006d84:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006d86:	f7fc faef 	bl	8003368 <HAL_GetTick>
 8006d8a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	88fa      	ldrh	r2, [r7, #6]
 8006d90:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	88fa      	ldrh	r2, [r7, #6]
 8006d96:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	689b      	ldr	r3, [r3, #8]
 8006d9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006da0:	d108      	bne.n	8006db4 <HAL_UART_Receive+0x8a>
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	691b      	ldr	r3, [r3, #16]
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d104      	bne.n	8006db4 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8006daa:	2300      	movs	r3, #0
 8006dac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006dae:	68bb      	ldr	r3, [r7, #8]
 8006db0:	61bb      	str	r3, [r7, #24]
 8006db2:	e003      	b.n	8006dbc <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8006db4:	68bb      	ldr	r3, [r7, #8]
 8006db6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006db8:	2300      	movs	r3, #0
 8006dba:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	2200      	movs	r2, #0
 8006dc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8006dc4:	e043      	b.n	8006e4e <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006dc6:	683b      	ldr	r3, [r7, #0]
 8006dc8:	9300      	str	r3, [sp, #0]
 8006dca:	697b      	ldr	r3, [r7, #20]
 8006dcc:	2200      	movs	r2, #0
 8006dce:	2120      	movs	r1, #32
 8006dd0:	68f8      	ldr	r0, [r7, #12]
 8006dd2:	f000 f84c 	bl	8006e6e <UART_WaitOnFlagUntilTimeout>
 8006dd6:	4603      	mov	r3, r0
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d001      	beq.n	8006de0 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8006ddc:	2303      	movs	r3, #3
 8006dde:	e042      	b.n	8006e66 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8006de0:	69fb      	ldr	r3, [r7, #28]
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d10c      	bne.n	8006e00 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	685b      	ldr	r3, [r3, #4]
 8006dec:	b29b      	uxth	r3, r3
 8006dee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006df2:	b29a      	uxth	r2, r3
 8006df4:	69bb      	ldr	r3, [r7, #24]
 8006df6:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8006df8:	69bb      	ldr	r3, [r7, #24]
 8006dfa:	3302      	adds	r3, #2
 8006dfc:	61bb      	str	r3, [r7, #24]
 8006dfe:	e01f      	b.n	8006e40 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	689b      	ldr	r3, [r3, #8]
 8006e04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e08:	d007      	beq.n	8006e1a <HAL_UART_Receive+0xf0>
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	689b      	ldr	r3, [r3, #8]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d10a      	bne.n	8006e28 <HAL_UART_Receive+0xfe>
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	691b      	ldr	r3, [r3, #16]
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d106      	bne.n	8006e28 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	685b      	ldr	r3, [r3, #4]
 8006e20:	b2da      	uxtb	r2, r3
 8006e22:	69fb      	ldr	r3, [r7, #28]
 8006e24:	701a      	strb	r2, [r3, #0]
 8006e26:	e008      	b.n	8006e3a <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	685b      	ldr	r3, [r3, #4]
 8006e2e:	b2db      	uxtb	r3, r3
 8006e30:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006e34:	b2da      	uxtb	r2, r3
 8006e36:	69fb      	ldr	r3, [r7, #28]
 8006e38:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8006e3a:	69fb      	ldr	r3, [r7, #28]
 8006e3c:	3301      	adds	r3, #1
 8006e3e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006e44:	b29b      	uxth	r3, r3
 8006e46:	3b01      	subs	r3, #1
 8006e48:	b29a      	uxth	r2, r3
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006e52:	b29b      	uxth	r3, r3
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d1b6      	bne.n	8006dc6 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	2220      	movs	r2, #32
 8006e5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8006e60:	2300      	movs	r3, #0
 8006e62:	e000      	b.n	8006e66 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8006e64:	2302      	movs	r3, #2
  }
}
 8006e66:	4618      	mov	r0, r3
 8006e68:	3720      	adds	r7, #32
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	bd80      	pop	{r7, pc}

08006e6e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006e6e:	b580      	push	{r7, lr}
 8006e70:	b090      	sub	sp, #64	; 0x40
 8006e72:	af00      	add	r7, sp, #0
 8006e74:	60f8      	str	r0, [r7, #12]
 8006e76:	60b9      	str	r1, [r7, #8]
 8006e78:	603b      	str	r3, [r7, #0]
 8006e7a:	4613      	mov	r3, r2
 8006e7c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006e7e:	e050      	b.n	8006f22 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006e80:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006e82:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006e86:	d04c      	beq.n	8006f22 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006e88:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d007      	beq.n	8006e9e <UART_WaitOnFlagUntilTimeout+0x30>
 8006e8e:	f7fc fa6b 	bl	8003368 <HAL_GetTick>
 8006e92:	4602      	mov	r2, r0
 8006e94:	683b      	ldr	r3, [r7, #0]
 8006e96:	1ad3      	subs	r3, r2, r3
 8006e98:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006e9a:	429a      	cmp	r2, r3
 8006e9c:	d241      	bcs.n	8006f22 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	330c      	adds	r3, #12
 8006ea4:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ea6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ea8:	e853 3f00 	ldrex	r3, [r3]
 8006eac:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eb0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006eb4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	330c      	adds	r3, #12
 8006ebc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006ebe:	637a      	str	r2, [r7, #52]	; 0x34
 8006ec0:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ec2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006ec4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006ec6:	e841 2300 	strex	r3, r2, [r1]
 8006eca:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006ecc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d1e5      	bne.n	8006e9e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	3314      	adds	r3, #20
 8006ed8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eda:	697b      	ldr	r3, [r7, #20]
 8006edc:	e853 3f00 	ldrex	r3, [r3]
 8006ee0:	613b      	str	r3, [r7, #16]
   return(result);
 8006ee2:	693b      	ldr	r3, [r7, #16]
 8006ee4:	f023 0301 	bic.w	r3, r3, #1
 8006ee8:	63bb      	str	r3, [r7, #56]	; 0x38
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	3314      	adds	r3, #20
 8006ef0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006ef2:	623a      	str	r2, [r7, #32]
 8006ef4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ef6:	69f9      	ldr	r1, [r7, #28]
 8006ef8:	6a3a      	ldr	r2, [r7, #32]
 8006efa:	e841 2300 	strex	r3, r2, [r1]
 8006efe:	61bb      	str	r3, [r7, #24]
   return(result);
 8006f00:	69bb      	ldr	r3, [r7, #24]
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d1e5      	bne.n	8006ed2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	2220      	movs	r2, #32
 8006f0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	2220      	movs	r2, #32
 8006f12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	2200      	movs	r2, #0
 8006f1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006f1e:	2303      	movs	r3, #3
 8006f20:	e00f      	b.n	8006f42 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	681a      	ldr	r2, [r3, #0]
 8006f28:	68bb      	ldr	r3, [r7, #8]
 8006f2a:	4013      	ands	r3, r2
 8006f2c:	68ba      	ldr	r2, [r7, #8]
 8006f2e:	429a      	cmp	r2, r3
 8006f30:	bf0c      	ite	eq
 8006f32:	2301      	moveq	r3, #1
 8006f34:	2300      	movne	r3, #0
 8006f36:	b2db      	uxtb	r3, r3
 8006f38:	461a      	mov	r2, r3
 8006f3a:	79fb      	ldrb	r3, [r7, #7]
 8006f3c:	429a      	cmp	r2, r3
 8006f3e:	d09f      	beq.n	8006e80 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006f40:	2300      	movs	r3, #0
}
 8006f42:	4618      	mov	r0, r3
 8006f44:	3740      	adds	r7, #64	; 0x40
 8006f46:	46bd      	mov	sp, r7
 8006f48:	bd80      	pop	{r7, pc}
	...

08006f4c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006f4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006f50:	b0c0      	sub	sp, #256	; 0x100
 8006f52:	af00      	add	r7, sp, #0
 8006f54:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006f58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	691b      	ldr	r3, [r3, #16]
 8006f60:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006f64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f68:	68d9      	ldr	r1, [r3, #12]
 8006f6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f6e:	681a      	ldr	r2, [r3, #0]
 8006f70:	ea40 0301 	orr.w	r3, r0, r1
 8006f74:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006f76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f7a:	689a      	ldr	r2, [r3, #8]
 8006f7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f80:	691b      	ldr	r3, [r3, #16]
 8006f82:	431a      	orrs	r2, r3
 8006f84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f88:	695b      	ldr	r3, [r3, #20]
 8006f8a:	431a      	orrs	r2, r3
 8006f8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f90:	69db      	ldr	r3, [r3, #28]
 8006f92:	4313      	orrs	r3, r2
 8006f94:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006f98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	68db      	ldr	r3, [r3, #12]
 8006fa0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006fa4:	f021 010c 	bic.w	r1, r1, #12
 8006fa8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006fac:	681a      	ldr	r2, [r3, #0]
 8006fae:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006fb2:	430b      	orrs	r3, r1
 8006fb4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006fb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	695b      	ldr	r3, [r3, #20]
 8006fbe:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006fc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006fc6:	6999      	ldr	r1, [r3, #24]
 8006fc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006fcc:	681a      	ldr	r2, [r3, #0]
 8006fce:	ea40 0301 	orr.w	r3, r0, r1
 8006fd2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006fd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006fd8:	681a      	ldr	r2, [r3, #0]
 8006fda:	4b8f      	ldr	r3, [pc, #572]	; (8007218 <UART_SetConfig+0x2cc>)
 8006fdc:	429a      	cmp	r2, r3
 8006fde:	d005      	beq.n	8006fec <UART_SetConfig+0xa0>
 8006fe0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006fe4:	681a      	ldr	r2, [r3, #0]
 8006fe6:	4b8d      	ldr	r3, [pc, #564]	; (800721c <UART_SetConfig+0x2d0>)
 8006fe8:	429a      	cmp	r2, r3
 8006fea:	d104      	bne.n	8006ff6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006fec:	f7fe f872 	bl	80050d4 <HAL_RCC_GetPCLK2Freq>
 8006ff0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006ff4:	e003      	b.n	8006ffe <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006ff6:	f7fe f859 	bl	80050ac <HAL_RCC_GetPCLK1Freq>
 8006ffa:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006ffe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007002:	69db      	ldr	r3, [r3, #28]
 8007004:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007008:	f040 810c 	bne.w	8007224 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800700c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007010:	2200      	movs	r2, #0
 8007012:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007016:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800701a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800701e:	4622      	mov	r2, r4
 8007020:	462b      	mov	r3, r5
 8007022:	1891      	adds	r1, r2, r2
 8007024:	65b9      	str	r1, [r7, #88]	; 0x58
 8007026:	415b      	adcs	r3, r3
 8007028:	65fb      	str	r3, [r7, #92]	; 0x5c
 800702a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800702e:	4621      	mov	r1, r4
 8007030:	eb12 0801 	adds.w	r8, r2, r1
 8007034:	4629      	mov	r1, r5
 8007036:	eb43 0901 	adc.w	r9, r3, r1
 800703a:	f04f 0200 	mov.w	r2, #0
 800703e:	f04f 0300 	mov.w	r3, #0
 8007042:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007046:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800704a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800704e:	4690      	mov	r8, r2
 8007050:	4699      	mov	r9, r3
 8007052:	4623      	mov	r3, r4
 8007054:	eb18 0303 	adds.w	r3, r8, r3
 8007058:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800705c:	462b      	mov	r3, r5
 800705e:	eb49 0303 	adc.w	r3, r9, r3
 8007062:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007066:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800706a:	685b      	ldr	r3, [r3, #4]
 800706c:	2200      	movs	r2, #0
 800706e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007072:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8007076:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800707a:	460b      	mov	r3, r1
 800707c:	18db      	adds	r3, r3, r3
 800707e:	653b      	str	r3, [r7, #80]	; 0x50
 8007080:	4613      	mov	r3, r2
 8007082:	eb42 0303 	adc.w	r3, r2, r3
 8007086:	657b      	str	r3, [r7, #84]	; 0x54
 8007088:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800708c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007090:	f7f9 f8f6 	bl	8000280 <__aeabi_uldivmod>
 8007094:	4602      	mov	r2, r0
 8007096:	460b      	mov	r3, r1
 8007098:	4b61      	ldr	r3, [pc, #388]	; (8007220 <UART_SetConfig+0x2d4>)
 800709a:	fba3 2302 	umull	r2, r3, r3, r2
 800709e:	095b      	lsrs	r3, r3, #5
 80070a0:	011c      	lsls	r4, r3, #4
 80070a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80070a6:	2200      	movs	r2, #0
 80070a8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80070ac:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80070b0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80070b4:	4642      	mov	r2, r8
 80070b6:	464b      	mov	r3, r9
 80070b8:	1891      	adds	r1, r2, r2
 80070ba:	64b9      	str	r1, [r7, #72]	; 0x48
 80070bc:	415b      	adcs	r3, r3
 80070be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80070c0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80070c4:	4641      	mov	r1, r8
 80070c6:	eb12 0a01 	adds.w	sl, r2, r1
 80070ca:	4649      	mov	r1, r9
 80070cc:	eb43 0b01 	adc.w	fp, r3, r1
 80070d0:	f04f 0200 	mov.w	r2, #0
 80070d4:	f04f 0300 	mov.w	r3, #0
 80070d8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80070dc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80070e0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80070e4:	4692      	mov	sl, r2
 80070e6:	469b      	mov	fp, r3
 80070e8:	4643      	mov	r3, r8
 80070ea:	eb1a 0303 	adds.w	r3, sl, r3
 80070ee:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80070f2:	464b      	mov	r3, r9
 80070f4:	eb4b 0303 	adc.w	r3, fp, r3
 80070f8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80070fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007100:	685b      	ldr	r3, [r3, #4]
 8007102:	2200      	movs	r2, #0
 8007104:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007108:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800710c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007110:	460b      	mov	r3, r1
 8007112:	18db      	adds	r3, r3, r3
 8007114:	643b      	str	r3, [r7, #64]	; 0x40
 8007116:	4613      	mov	r3, r2
 8007118:	eb42 0303 	adc.w	r3, r2, r3
 800711c:	647b      	str	r3, [r7, #68]	; 0x44
 800711e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007122:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8007126:	f7f9 f8ab 	bl	8000280 <__aeabi_uldivmod>
 800712a:	4602      	mov	r2, r0
 800712c:	460b      	mov	r3, r1
 800712e:	4611      	mov	r1, r2
 8007130:	4b3b      	ldr	r3, [pc, #236]	; (8007220 <UART_SetConfig+0x2d4>)
 8007132:	fba3 2301 	umull	r2, r3, r3, r1
 8007136:	095b      	lsrs	r3, r3, #5
 8007138:	2264      	movs	r2, #100	; 0x64
 800713a:	fb02 f303 	mul.w	r3, r2, r3
 800713e:	1acb      	subs	r3, r1, r3
 8007140:	00db      	lsls	r3, r3, #3
 8007142:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8007146:	4b36      	ldr	r3, [pc, #216]	; (8007220 <UART_SetConfig+0x2d4>)
 8007148:	fba3 2302 	umull	r2, r3, r3, r2
 800714c:	095b      	lsrs	r3, r3, #5
 800714e:	005b      	lsls	r3, r3, #1
 8007150:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007154:	441c      	add	r4, r3
 8007156:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800715a:	2200      	movs	r2, #0
 800715c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007160:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007164:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007168:	4642      	mov	r2, r8
 800716a:	464b      	mov	r3, r9
 800716c:	1891      	adds	r1, r2, r2
 800716e:	63b9      	str	r1, [r7, #56]	; 0x38
 8007170:	415b      	adcs	r3, r3
 8007172:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007174:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007178:	4641      	mov	r1, r8
 800717a:	1851      	adds	r1, r2, r1
 800717c:	6339      	str	r1, [r7, #48]	; 0x30
 800717e:	4649      	mov	r1, r9
 8007180:	414b      	adcs	r3, r1
 8007182:	637b      	str	r3, [r7, #52]	; 0x34
 8007184:	f04f 0200 	mov.w	r2, #0
 8007188:	f04f 0300 	mov.w	r3, #0
 800718c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007190:	4659      	mov	r1, fp
 8007192:	00cb      	lsls	r3, r1, #3
 8007194:	4651      	mov	r1, sl
 8007196:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800719a:	4651      	mov	r1, sl
 800719c:	00ca      	lsls	r2, r1, #3
 800719e:	4610      	mov	r0, r2
 80071a0:	4619      	mov	r1, r3
 80071a2:	4603      	mov	r3, r0
 80071a4:	4642      	mov	r2, r8
 80071a6:	189b      	adds	r3, r3, r2
 80071a8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80071ac:	464b      	mov	r3, r9
 80071ae:	460a      	mov	r2, r1
 80071b0:	eb42 0303 	adc.w	r3, r2, r3
 80071b4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80071b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071bc:	685b      	ldr	r3, [r3, #4]
 80071be:	2200      	movs	r2, #0
 80071c0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80071c4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80071c8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80071cc:	460b      	mov	r3, r1
 80071ce:	18db      	adds	r3, r3, r3
 80071d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80071d2:	4613      	mov	r3, r2
 80071d4:	eb42 0303 	adc.w	r3, r2, r3
 80071d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80071da:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80071de:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80071e2:	f7f9 f84d 	bl	8000280 <__aeabi_uldivmod>
 80071e6:	4602      	mov	r2, r0
 80071e8:	460b      	mov	r3, r1
 80071ea:	4b0d      	ldr	r3, [pc, #52]	; (8007220 <UART_SetConfig+0x2d4>)
 80071ec:	fba3 1302 	umull	r1, r3, r3, r2
 80071f0:	095b      	lsrs	r3, r3, #5
 80071f2:	2164      	movs	r1, #100	; 0x64
 80071f4:	fb01 f303 	mul.w	r3, r1, r3
 80071f8:	1ad3      	subs	r3, r2, r3
 80071fa:	00db      	lsls	r3, r3, #3
 80071fc:	3332      	adds	r3, #50	; 0x32
 80071fe:	4a08      	ldr	r2, [pc, #32]	; (8007220 <UART_SetConfig+0x2d4>)
 8007200:	fba2 2303 	umull	r2, r3, r2, r3
 8007204:	095b      	lsrs	r3, r3, #5
 8007206:	f003 0207 	and.w	r2, r3, #7
 800720a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	4422      	add	r2, r4
 8007212:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007214:	e105      	b.n	8007422 <UART_SetConfig+0x4d6>
 8007216:	bf00      	nop
 8007218:	40011000 	.word	0x40011000
 800721c:	40011400 	.word	0x40011400
 8007220:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007224:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007228:	2200      	movs	r2, #0
 800722a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800722e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007232:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8007236:	4642      	mov	r2, r8
 8007238:	464b      	mov	r3, r9
 800723a:	1891      	adds	r1, r2, r2
 800723c:	6239      	str	r1, [r7, #32]
 800723e:	415b      	adcs	r3, r3
 8007240:	627b      	str	r3, [r7, #36]	; 0x24
 8007242:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007246:	4641      	mov	r1, r8
 8007248:	1854      	adds	r4, r2, r1
 800724a:	4649      	mov	r1, r9
 800724c:	eb43 0501 	adc.w	r5, r3, r1
 8007250:	f04f 0200 	mov.w	r2, #0
 8007254:	f04f 0300 	mov.w	r3, #0
 8007258:	00eb      	lsls	r3, r5, #3
 800725a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800725e:	00e2      	lsls	r2, r4, #3
 8007260:	4614      	mov	r4, r2
 8007262:	461d      	mov	r5, r3
 8007264:	4643      	mov	r3, r8
 8007266:	18e3      	adds	r3, r4, r3
 8007268:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800726c:	464b      	mov	r3, r9
 800726e:	eb45 0303 	adc.w	r3, r5, r3
 8007272:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007276:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800727a:	685b      	ldr	r3, [r3, #4]
 800727c:	2200      	movs	r2, #0
 800727e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007282:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007286:	f04f 0200 	mov.w	r2, #0
 800728a:	f04f 0300 	mov.w	r3, #0
 800728e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007292:	4629      	mov	r1, r5
 8007294:	008b      	lsls	r3, r1, #2
 8007296:	4621      	mov	r1, r4
 8007298:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800729c:	4621      	mov	r1, r4
 800729e:	008a      	lsls	r2, r1, #2
 80072a0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80072a4:	f7f8 ffec 	bl	8000280 <__aeabi_uldivmod>
 80072a8:	4602      	mov	r2, r0
 80072aa:	460b      	mov	r3, r1
 80072ac:	4b60      	ldr	r3, [pc, #384]	; (8007430 <UART_SetConfig+0x4e4>)
 80072ae:	fba3 2302 	umull	r2, r3, r3, r2
 80072b2:	095b      	lsrs	r3, r3, #5
 80072b4:	011c      	lsls	r4, r3, #4
 80072b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80072ba:	2200      	movs	r2, #0
 80072bc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80072c0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80072c4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80072c8:	4642      	mov	r2, r8
 80072ca:	464b      	mov	r3, r9
 80072cc:	1891      	adds	r1, r2, r2
 80072ce:	61b9      	str	r1, [r7, #24]
 80072d0:	415b      	adcs	r3, r3
 80072d2:	61fb      	str	r3, [r7, #28]
 80072d4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80072d8:	4641      	mov	r1, r8
 80072da:	1851      	adds	r1, r2, r1
 80072dc:	6139      	str	r1, [r7, #16]
 80072de:	4649      	mov	r1, r9
 80072e0:	414b      	adcs	r3, r1
 80072e2:	617b      	str	r3, [r7, #20]
 80072e4:	f04f 0200 	mov.w	r2, #0
 80072e8:	f04f 0300 	mov.w	r3, #0
 80072ec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80072f0:	4659      	mov	r1, fp
 80072f2:	00cb      	lsls	r3, r1, #3
 80072f4:	4651      	mov	r1, sl
 80072f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80072fa:	4651      	mov	r1, sl
 80072fc:	00ca      	lsls	r2, r1, #3
 80072fe:	4610      	mov	r0, r2
 8007300:	4619      	mov	r1, r3
 8007302:	4603      	mov	r3, r0
 8007304:	4642      	mov	r2, r8
 8007306:	189b      	adds	r3, r3, r2
 8007308:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800730c:	464b      	mov	r3, r9
 800730e:	460a      	mov	r2, r1
 8007310:	eb42 0303 	adc.w	r3, r2, r3
 8007314:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007318:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800731c:	685b      	ldr	r3, [r3, #4]
 800731e:	2200      	movs	r2, #0
 8007320:	67bb      	str	r3, [r7, #120]	; 0x78
 8007322:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007324:	f04f 0200 	mov.w	r2, #0
 8007328:	f04f 0300 	mov.w	r3, #0
 800732c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007330:	4649      	mov	r1, r9
 8007332:	008b      	lsls	r3, r1, #2
 8007334:	4641      	mov	r1, r8
 8007336:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800733a:	4641      	mov	r1, r8
 800733c:	008a      	lsls	r2, r1, #2
 800733e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8007342:	f7f8 ff9d 	bl	8000280 <__aeabi_uldivmod>
 8007346:	4602      	mov	r2, r0
 8007348:	460b      	mov	r3, r1
 800734a:	4b39      	ldr	r3, [pc, #228]	; (8007430 <UART_SetConfig+0x4e4>)
 800734c:	fba3 1302 	umull	r1, r3, r3, r2
 8007350:	095b      	lsrs	r3, r3, #5
 8007352:	2164      	movs	r1, #100	; 0x64
 8007354:	fb01 f303 	mul.w	r3, r1, r3
 8007358:	1ad3      	subs	r3, r2, r3
 800735a:	011b      	lsls	r3, r3, #4
 800735c:	3332      	adds	r3, #50	; 0x32
 800735e:	4a34      	ldr	r2, [pc, #208]	; (8007430 <UART_SetConfig+0x4e4>)
 8007360:	fba2 2303 	umull	r2, r3, r2, r3
 8007364:	095b      	lsrs	r3, r3, #5
 8007366:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800736a:	441c      	add	r4, r3
 800736c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007370:	2200      	movs	r2, #0
 8007372:	673b      	str	r3, [r7, #112]	; 0x70
 8007374:	677a      	str	r2, [r7, #116]	; 0x74
 8007376:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800737a:	4642      	mov	r2, r8
 800737c:	464b      	mov	r3, r9
 800737e:	1891      	adds	r1, r2, r2
 8007380:	60b9      	str	r1, [r7, #8]
 8007382:	415b      	adcs	r3, r3
 8007384:	60fb      	str	r3, [r7, #12]
 8007386:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800738a:	4641      	mov	r1, r8
 800738c:	1851      	adds	r1, r2, r1
 800738e:	6039      	str	r1, [r7, #0]
 8007390:	4649      	mov	r1, r9
 8007392:	414b      	adcs	r3, r1
 8007394:	607b      	str	r3, [r7, #4]
 8007396:	f04f 0200 	mov.w	r2, #0
 800739a:	f04f 0300 	mov.w	r3, #0
 800739e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80073a2:	4659      	mov	r1, fp
 80073a4:	00cb      	lsls	r3, r1, #3
 80073a6:	4651      	mov	r1, sl
 80073a8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80073ac:	4651      	mov	r1, sl
 80073ae:	00ca      	lsls	r2, r1, #3
 80073b0:	4610      	mov	r0, r2
 80073b2:	4619      	mov	r1, r3
 80073b4:	4603      	mov	r3, r0
 80073b6:	4642      	mov	r2, r8
 80073b8:	189b      	adds	r3, r3, r2
 80073ba:	66bb      	str	r3, [r7, #104]	; 0x68
 80073bc:	464b      	mov	r3, r9
 80073be:	460a      	mov	r2, r1
 80073c0:	eb42 0303 	adc.w	r3, r2, r3
 80073c4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80073c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80073ca:	685b      	ldr	r3, [r3, #4]
 80073cc:	2200      	movs	r2, #0
 80073ce:	663b      	str	r3, [r7, #96]	; 0x60
 80073d0:	667a      	str	r2, [r7, #100]	; 0x64
 80073d2:	f04f 0200 	mov.w	r2, #0
 80073d6:	f04f 0300 	mov.w	r3, #0
 80073da:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80073de:	4649      	mov	r1, r9
 80073e0:	008b      	lsls	r3, r1, #2
 80073e2:	4641      	mov	r1, r8
 80073e4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80073e8:	4641      	mov	r1, r8
 80073ea:	008a      	lsls	r2, r1, #2
 80073ec:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80073f0:	f7f8 ff46 	bl	8000280 <__aeabi_uldivmod>
 80073f4:	4602      	mov	r2, r0
 80073f6:	460b      	mov	r3, r1
 80073f8:	4b0d      	ldr	r3, [pc, #52]	; (8007430 <UART_SetConfig+0x4e4>)
 80073fa:	fba3 1302 	umull	r1, r3, r3, r2
 80073fe:	095b      	lsrs	r3, r3, #5
 8007400:	2164      	movs	r1, #100	; 0x64
 8007402:	fb01 f303 	mul.w	r3, r1, r3
 8007406:	1ad3      	subs	r3, r2, r3
 8007408:	011b      	lsls	r3, r3, #4
 800740a:	3332      	adds	r3, #50	; 0x32
 800740c:	4a08      	ldr	r2, [pc, #32]	; (8007430 <UART_SetConfig+0x4e4>)
 800740e:	fba2 2303 	umull	r2, r3, r2, r3
 8007412:	095b      	lsrs	r3, r3, #5
 8007414:	f003 020f 	and.w	r2, r3, #15
 8007418:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	4422      	add	r2, r4
 8007420:	609a      	str	r2, [r3, #8]
}
 8007422:	bf00      	nop
 8007424:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8007428:	46bd      	mov	sp, r7
 800742a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800742e:	bf00      	nop
 8007430:	51eb851f 	.word	0x51eb851f

08007434 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8007434:	b580      	push	{r7, lr}
 8007436:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8007438:	4904      	ldr	r1, [pc, #16]	; (800744c <MX_FATFS_Init+0x18>)
 800743a:	4805      	ldr	r0, [pc, #20]	; (8007450 <MX_FATFS_Init+0x1c>)
 800743c:	f003 fb02 	bl	800aa44 <FATFS_LinkDriver>
 8007440:	4603      	mov	r3, r0
 8007442:	461a      	mov	r2, r3
 8007444:	4b03      	ldr	r3, [pc, #12]	; (8007454 <MX_FATFS_Init+0x20>)
 8007446:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8007448:	bf00      	nop
 800744a:	bd80      	pop	{r7, pc}
 800744c:	20003d40 	.word	0x20003d40
 8007450:	200000c0 	.word	0x200000c0
 8007454:	20003d3c 	.word	0x20003d3c

08007458 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8007458:	b480      	push	{r7}
 800745a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800745c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800745e:	4618      	mov	r0, r3
 8007460:	46bd      	mov	sp, r7
 8007462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007466:	4770      	bx	lr

08007468 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8007468:	b580      	push	{r7, lr}
 800746a:	b082      	sub	sp, #8
 800746c:	af00      	add	r7, sp, #0
 800746e:	4603      	mov	r3, r0
 8007470:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize(pdrv);
 8007472:	79fb      	ldrb	r3, [r7, #7]
 8007474:	4618      	mov	r0, r3
 8007476:	f7fa fa1d 	bl	80018b4 <SD_disk_initialize>
 800747a:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 800747c:	4618      	mov	r0, r3
 800747e:	3708      	adds	r7, #8
 8007480:	46bd      	mov	sp, r7
 8007482:	bd80      	pop	{r7, pc}

08007484 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8007484:	b580      	push	{r7, lr}
 8007486:	b082      	sub	sp, #8
 8007488:	af00      	add	r7, sp, #0
 800748a:	4603      	mov	r3, r0
 800748c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return SD_disk_status(pdrv);
 800748e:	79fb      	ldrb	r3, [r7, #7]
 8007490:	4618      	mov	r0, r3
 8007492:	f7fa faf5 	bl	8001a80 <SD_disk_status>
 8007496:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8007498:	4618      	mov	r0, r3
 800749a:	3708      	adds	r7, #8
 800749c:	46bd      	mov	sp, r7
 800749e:	bd80      	pop	{r7, pc}

080074a0 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 80074a0:	b580      	push	{r7, lr}
 80074a2:	b084      	sub	sp, #16
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	60b9      	str	r1, [r7, #8]
 80074a8:	607a      	str	r2, [r7, #4]
 80074aa:	603b      	str	r3, [r7, #0]
 80074ac:	4603      	mov	r3, r0
 80074ae:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return SD_disk_read(pdrv, buff, sector, count);
 80074b0:	7bf8      	ldrb	r0, [r7, #15]
 80074b2:	683b      	ldr	r3, [r7, #0]
 80074b4:	687a      	ldr	r2, [r7, #4]
 80074b6:	68b9      	ldr	r1, [r7, #8]
 80074b8:	f7fa faf8 	bl	8001aac <SD_disk_read>
 80074bc:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 80074be:	4618      	mov	r0, r3
 80074c0:	3710      	adds	r7, #16
 80074c2:	46bd      	mov	sp, r7
 80074c4:	bd80      	pop	{r7, pc}

080074c6 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 80074c6:	b580      	push	{r7, lr}
 80074c8:	b084      	sub	sp, #16
 80074ca:	af00      	add	r7, sp, #0
 80074cc:	60b9      	str	r1, [r7, #8]
 80074ce:	607a      	str	r2, [r7, #4]
 80074d0:	603b      	str	r3, [r7, #0]
 80074d2:	4603      	mov	r3, r0
 80074d4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return SD_disk_write(pdrv, buff, sector, count);
 80074d6:	7bf8      	ldrb	r0, [r7, #15]
 80074d8:	683b      	ldr	r3, [r7, #0]
 80074da:	687a      	ldr	r2, [r7, #4]
 80074dc:	68b9      	ldr	r1, [r7, #8]
 80074de:	f7fa fb4f 	bl	8001b80 <SD_disk_write>
 80074e2:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 80074e4:	4618      	mov	r0, r3
 80074e6:	3710      	adds	r7, #16
 80074e8:	46bd      	mov	sp, r7
 80074ea:	bd80      	pop	{r7, pc}

080074ec <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 80074ec:	b580      	push	{r7, lr}
 80074ee:	b082      	sub	sp, #8
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	4603      	mov	r3, r0
 80074f4:	603a      	str	r2, [r7, #0]
 80074f6:	71fb      	strb	r3, [r7, #7]
 80074f8:	460b      	mov	r3, r1
 80074fa:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return SD_disk_ioctl(pdrv, cmd, buff);
 80074fc:	79b9      	ldrb	r1, [r7, #6]
 80074fe:	79fb      	ldrb	r3, [r7, #7]
 8007500:	683a      	ldr	r2, [r7, #0]
 8007502:	4618      	mov	r0, r3
 8007504:	f7fa fbc0 	bl	8001c88 <SD_disk_ioctl>
 8007508:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 800750a:	4618      	mov	r0, r3
 800750c:	3708      	adds	r7, #8
 800750e:	46bd      	mov	sp, r7
 8007510:	bd80      	pop	{r7, pc}
	...

08007514 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8007514:	b580      	push	{r7, lr}
 8007516:	b084      	sub	sp, #16
 8007518:	af00      	add	r7, sp, #0
 800751a:	4603      	mov	r3, r0
 800751c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800751e:	79fb      	ldrb	r3, [r7, #7]
 8007520:	4a08      	ldr	r2, [pc, #32]	; (8007544 <disk_status+0x30>)
 8007522:	009b      	lsls	r3, r3, #2
 8007524:	4413      	add	r3, r2
 8007526:	685b      	ldr	r3, [r3, #4]
 8007528:	685b      	ldr	r3, [r3, #4]
 800752a:	79fa      	ldrb	r2, [r7, #7]
 800752c:	4905      	ldr	r1, [pc, #20]	; (8007544 <disk_status+0x30>)
 800752e:	440a      	add	r2, r1
 8007530:	7a12      	ldrb	r2, [r2, #8]
 8007532:	4610      	mov	r0, r2
 8007534:	4798      	blx	r3
 8007536:	4603      	mov	r3, r0
 8007538:	73fb      	strb	r3, [r7, #15]
  return stat;
 800753a:	7bfb      	ldrb	r3, [r7, #15]
}
 800753c:	4618      	mov	r0, r3
 800753e:	3710      	adds	r7, #16
 8007540:	46bd      	mov	sp, r7
 8007542:	bd80      	pop	{r7, pc}
 8007544:	20003f6c 	.word	0x20003f6c

08007548 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8007548:	b580      	push	{r7, lr}
 800754a:	b084      	sub	sp, #16
 800754c:	af00      	add	r7, sp, #0
 800754e:	4603      	mov	r3, r0
 8007550:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8007552:	2300      	movs	r3, #0
 8007554:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8007556:	79fb      	ldrb	r3, [r7, #7]
 8007558:	4a0d      	ldr	r2, [pc, #52]	; (8007590 <disk_initialize+0x48>)
 800755a:	5cd3      	ldrb	r3, [r2, r3]
 800755c:	2b00      	cmp	r3, #0
 800755e:	d111      	bne.n	8007584 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8007560:	79fb      	ldrb	r3, [r7, #7]
 8007562:	4a0b      	ldr	r2, [pc, #44]	; (8007590 <disk_initialize+0x48>)
 8007564:	2101      	movs	r1, #1
 8007566:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8007568:	79fb      	ldrb	r3, [r7, #7]
 800756a:	4a09      	ldr	r2, [pc, #36]	; (8007590 <disk_initialize+0x48>)
 800756c:	009b      	lsls	r3, r3, #2
 800756e:	4413      	add	r3, r2
 8007570:	685b      	ldr	r3, [r3, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	79fa      	ldrb	r2, [r7, #7]
 8007576:	4906      	ldr	r1, [pc, #24]	; (8007590 <disk_initialize+0x48>)
 8007578:	440a      	add	r2, r1
 800757a:	7a12      	ldrb	r2, [r2, #8]
 800757c:	4610      	mov	r0, r2
 800757e:	4798      	blx	r3
 8007580:	4603      	mov	r3, r0
 8007582:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8007584:	7bfb      	ldrb	r3, [r7, #15]
}
 8007586:	4618      	mov	r0, r3
 8007588:	3710      	adds	r7, #16
 800758a:	46bd      	mov	sp, r7
 800758c:	bd80      	pop	{r7, pc}
 800758e:	bf00      	nop
 8007590:	20003f6c 	.word	0x20003f6c

08007594 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8007594:	b590      	push	{r4, r7, lr}
 8007596:	b087      	sub	sp, #28
 8007598:	af00      	add	r7, sp, #0
 800759a:	60b9      	str	r1, [r7, #8]
 800759c:	607a      	str	r2, [r7, #4]
 800759e:	603b      	str	r3, [r7, #0]
 80075a0:	4603      	mov	r3, r0
 80075a2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80075a4:	7bfb      	ldrb	r3, [r7, #15]
 80075a6:	4a0a      	ldr	r2, [pc, #40]	; (80075d0 <disk_read+0x3c>)
 80075a8:	009b      	lsls	r3, r3, #2
 80075aa:	4413      	add	r3, r2
 80075ac:	685b      	ldr	r3, [r3, #4]
 80075ae:	689c      	ldr	r4, [r3, #8]
 80075b0:	7bfb      	ldrb	r3, [r7, #15]
 80075b2:	4a07      	ldr	r2, [pc, #28]	; (80075d0 <disk_read+0x3c>)
 80075b4:	4413      	add	r3, r2
 80075b6:	7a18      	ldrb	r0, [r3, #8]
 80075b8:	683b      	ldr	r3, [r7, #0]
 80075ba:	687a      	ldr	r2, [r7, #4]
 80075bc:	68b9      	ldr	r1, [r7, #8]
 80075be:	47a0      	blx	r4
 80075c0:	4603      	mov	r3, r0
 80075c2:	75fb      	strb	r3, [r7, #23]
  return res;
 80075c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80075c6:	4618      	mov	r0, r3
 80075c8:	371c      	adds	r7, #28
 80075ca:	46bd      	mov	sp, r7
 80075cc:	bd90      	pop	{r4, r7, pc}
 80075ce:	bf00      	nop
 80075d0:	20003f6c 	.word	0x20003f6c

080075d4 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80075d4:	b590      	push	{r4, r7, lr}
 80075d6:	b087      	sub	sp, #28
 80075d8:	af00      	add	r7, sp, #0
 80075da:	60b9      	str	r1, [r7, #8]
 80075dc:	607a      	str	r2, [r7, #4]
 80075de:	603b      	str	r3, [r7, #0]
 80075e0:	4603      	mov	r3, r0
 80075e2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80075e4:	7bfb      	ldrb	r3, [r7, #15]
 80075e6:	4a0a      	ldr	r2, [pc, #40]	; (8007610 <disk_write+0x3c>)
 80075e8:	009b      	lsls	r3, r3, #2
 80075ea:	4413      	add	r3, r2
 80075ec:	685b      	ldr	r3, [r3, #4]
 80075ee:	68dc      	ldr	r4, [r3, #12]
 80075f0:	7bfb      	ldrb	r3, [r7, #15]
 80075f2:	4a07      	ldr	r2, [pc, #28]	; (8007610 <disk_write+0x3c>)
 80075f4:	4413      	add	r3, r2
 80075f6:	7a18      	ldrb	r0, [r3, #8]
 80075f8:	683b      	ldr	r3, [r7, #0]
 80075fa:	687a      	ldr	r2, [r7, #4]
 80075fc:	68b9      	ldr	r1, [r7, #8]
 80075fe:	47a0      	blx	r4
 8007600:	4603      	mov	r3, r0
 8007602:	75fb      	strb	r3, [r7, #23]
  return res;
 8007604:	7dfb      	ldrb	r3, [r7, #23]
}
 8007606:	4618      	mov	r0, r3
 8007608:	371c      	adds	r7, #28
 800760a:	46bd      	mov	sp, r7
 800760c:	bd90      	pop	{r4, r7, pc}
 800760e:	bf00      	nop
 8007610:	20003f6c 	.word	0x20003f6c

08007614 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8007614:	b580      	push	{r7, lr}
 8007616:	b084      	sub	sp, #16
 8007618:	af00      	add	r7, sp, #0
 800761a:	4603      	mov	r3, r0
 800761c:	603a      	str	r2, [r7, #0]
 800761e:	71fb      	strb	r3, [r7, #7]
 8007620:	460b      	mov	r3, r1
 8007622:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8007624:	79fb      	ldrb	r3, [r7, #7]
 8007626:	4a09      	ldr	r2, [pc, #36]	; (800764c <disk_ioctl+0x38>)
 8007628:	009b      	lsls	r3, r3, #2
 800762a:	4413      	add	r3, r2
 800762c:	685b      	ldr	r3, [r3, #4]
 800762e:	691b      	ldr	r3, [r3, #16]
 8007630:	79fa      	ldrb	r2, [r7, #7]
 8007632:	4906      	ldr	r1, [pc, #24]	; (800764c <disk_ioctl+0x38>)
 8007634:	440a      	add	r2, r1
 8007636:	7a10      	ldrb	r0, [r2, #8]
 8007638:	79b9      	ldrb	r1, [r7, #6]
 800763a:	683a      	ldr	r2, [r7, #0]
 800763c:	4798      	blx	r3
 800763e:	4603      	mov	r3, r0
 8007640:	73fb      	strb	r3, [r7, #15]
  return res;
 8007642:	7bfb      	ldrb	r3, [r7, #15]
}
 8007644:	4618      	mov	r0, r3
 8007646:	3710      	adds	r7, #16
 8007648:	46bd      	mov	sp, r7
 800764a:	bd80      	pop	{r7, pc}
 800764c:	20003f6c 	.word	0x20003f6c

08007650 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8007650:	b480      	push	{r7}
 8007652:	b085      	sub	sp, #20
 8007654:	af00      	add	r7, sp, #0
 8007656:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	3301      	adds	r3, #1
 800765c:	781b      	ldrb	r3, [r3, #0]
 800765e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8007660:	89fb      	ldrh	r3, [r7, #14]
 8007662:	021b      	lsls	r3, r3, #8
 8007664:	b21a      	sxth	r2, r3
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	781b      	ldrb	r3, [r3, #0]
 800766a:	b21b      	sxth	r3, r3
 800766c:	4313      	orrs	r3, r2
 800766e:	b21b      	sxth	r3, r3
 8007670:	81fb      	strh	r3, [r7, #14]
	return rv;
 8007672:	89fb      	ldrh	r3, [r7, #14]
}
 8007674:	4618      	mov	r0, r3
 8007676:	3714      	adds	r7, #20
 8007678:	46bd      	mov	sp, r7
 800767a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800767e:	4770      	bx	lr

08007680 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8007680:	b480      	push	{r7}
 8007682:	b085      	sub	sp, #20
 8007684:	af00      	add	r7, sp, #0
 8007686:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	3303      	adds	r3, #3
 800768c:	781b      	ldrb	r3, [r3, #0]
 800768e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	021b      	lsls	r3, r3, #8
 8007694:	687a      	ldr	r2, [r7, #4]
 8007696:	3202      	adds	r2, #2
 8007698:	7812      	ldrb	r2, [r2, #0]
 800769a:	4313      	orrs	r3, r2
 800769c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	021b      	lsls	r3, r3, #8
 80076a2:	687a      	ldr	r2, [r7, #4]
 80076a4:	3201      	adds	r2, #1
 80076a6:	7812      	ldrb	r2, [r2, #0]
 80076a8:	4313      	orrs	r3, r2
 80076aa:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	021b      	lsls	r3, r3, #8
 80076b0:	687a      	ldr	r2, [r7, #4]
 80076b2:	7812      	ldrb	r2, [r2, #0]
 80076b4:	4313      	orrs	r3, r2
 80076b6:	60fb      	str	r3, [r7, #12]
	return rv;
 80076b8:	68fb      	ldr	r3, [r7, #12]
}
 80076ba:	4618      	mov	r0, r3
 80076bc:	3714      	adds	r7, #20
 80076be:	46bd      	mov	sp, r7
 80076c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c4:	4770      	bx	lr

080076c6 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80076c6:	b480      	push	{r7}
 80076c8:	b083      	sub	sp, #12
 80076ca:	af00      	add	r7, sp, #0
 80076cc:	6078      	str	r0, [r7, #4]
 80076ce:	460b      	mov	r3, r1
 80076d0:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	1c5a      	adds	r2, r3, #1
 80076d6:	607a      	str	r2, [r7, #4]
 80076d8:	887a      	ldrh	r2, [r7, #2]
 80076da:	b2d2      	uxtb	r2, r2
 80076dc:	701a      	strb	r2, [r3, #0]
 80076de:	887b      	ldrh	r3, [r7, #2]
 80076e0:	0a1b      	lsrs	r3, r3, #8
 80076e2:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	1c5a      	adds	r2, r3, #1
 80076e8:	607a      	str	r2, [r7, #4]
 80076ea:	887a      	ldrh	r2, [r7, #2]
 80076ec:	b2d2      	uxtb	r2, r2
 80076ee:	701a      	strb	r2, [r3, #0]
}
 80076f0:	bf00      	nop
 80076f2:	370c      	adds	r7, #12
 80076f4:	46bd      	mov	sp, r7
 80076f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fa:	4770      	bx	lr

080076fc <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80076fc:	b480      	push	{r7}
 80076fe:	b083      	sub	sp, #12
 8007700:	af00      	add	r7, sp, #0
 8007702:	6078      	str	r0, [r7, #4]
 8007704:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	1c5a      	adds	r2, r3, #1
 800770a:	607a      	str	r2, [r7, #4]
 800770c:	683a      	ldr	r2, [r7, #0]
 800770e:	b2d2      	uxtb	r2, r2
 8007710:	701a      	strb	r2, [r3, #0]
 8007712:	683b      	ldr	r3, [r7, #0]
 8007714:	0a1b      	lsrs	r3, r3, #8
 8007716:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	1c5a      	adds	r2, r3, #1
 800771c:	607a      	str	r2, [r7, #4]
 800771e:	683a      	ldr	r2, [r7, #0]
 8007720:	b2d2      	uxtb	r2, r2
 8007722:	701a      	strb	r2, [r3, #0]
 8007724:	683b      	ldr	r3, [r7, #0]
 8007726:	0a1b      	lsrs	r3, r3, #8
 8007728:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	1c5a      	adds	r2, r3, #1
 800772e:	607a      	str	r2, [r7, #4]
 8007730:	683a      	ldr	r2, [r7, #0]
 8007732:	b2d2      	uxtb	r2, r2
 8007734:	701a      	strb	r2, [r3, #0]
 8007736:	683b      	ldr	r3, [r7, #0]
 8007738:	0a1b      	lsrs	r3, r3, #8
 800773a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	1c5a      	adds	r2, r3, #1
 8007740:	607a      	str	r2, [r7, #4]
 8007742:	683a      	ldr	r2, [r7, #0]
 8007744:	b2d2      	uxtb	r2, r2
 8007746:	701a      	strb	r2, [r3, #0]
}
 8007748:	bf00      	nop
 800774a:	370c      	adds	r7, #12
 800774c:	46bd      	mov	sp, r7
 800774e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007752:	4770      	bx	lr

08007754 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8007754:	b480      	push	{r7}
 8007756:	b087      	sub	sp, #28
 8007758:	af00      	add	r7, sp, #0
 800775a:	60f8      	str	r0, [r7, #12]
 800775c:	60b9      	str	r1, [r7, #8]
 800775e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8007764:	68bb      	ldr	r3, [r7, #8]
 8007766:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	2b00      	cmp	r3, #0
 800776c:	d00d      	beq.n	800778a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800776e:	693a      	ldr	r2, [r7, #16]
 8007770:	1c53      	adds	r3, r2, #1
 8007772:	613b      	str	r3, [r7, #16]
 8007774:	697b      	ldr	r3, [r7, #20]
 8007776:	1c59      	adds	r1, r3, #1
 8007778:	6179      	str	r1, [r7, #20]
 800777a:	7812      	ldrb	r2, [r2, #0]
 800777c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	3b01      	subs	r3, #1
 8007782:	607b      	str	r3, [r7, #4]
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	2b00      	cmp	r3, #0
 8007788:	d1f1      	bne.n	800776e <mem_cpy+0x1a>
	}
}
 800778a:	bf00      	nop
 800778c:	371c      	adds	r7, #28
 800778e:	46bd      	mov	sp, r7
 8007790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007794:	4770      	bx	lr

08007796 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8007796:	b480      	push	{r7}
 8007798:	b087      	sub	sp, #28
 800779a:	af00      	add	r7, sp, #0
 800779c:	60f8      	str	r0, [r7, #12]
 800779e:	60b9      	str	r1, [r7, #8]
 80077a0:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80077a6:	697b      	ldr	r3, [r7, #20]
 80077a8:	1c5a      	adds	r2, r3, #1
 80077aa:	617a      	str	r2, [r7, #20]
 80077ac:	68ba      	ldr	r2, [r7, #8]
 80077ae:	b2d2      	uxtb	r2, r2
 80077b0:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	3b01      	subs	r3, #1
 80077b6:	607b      	str	r3, [r7, #4]
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d1f3      	bne.n	80077a6 <mem_set+0x10>
}
 80077be:	bf00      	nop
 80077c0:	bf00      	nop
 80077c2:	371c      	adds	r7, #28
 80077c4:	46bd      	mov	sp, r7
 80077c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ca:	4770      	bx	lr

080077cc <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80077cc:	b480      	push	{r7}
 80077ce:	b089      	sub	sp, #36	; 0x24
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	60f8      	str	r0, [r7, #12]
 80077d4:	60b9      	str	r1, [r7, #8]
 80077d6:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	61fb      	str	r3, [r7, #28]
 80077dc:	68bb      	ldr	r3, [r7, #8]
 80077de:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80077e0:	2300      	movs	r3, #0
 80077e2:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80077e4:	69fb      	ldr	r3, [r7, #28]
 80077e6:	1c5a      	adds	r2, r3, #1
 80077e8:	61fa      	str	r2, [r7, #28]
 80077ea:	781b      	ldrb	r3, [r3, #0]
 80077ec:	4619      	mov	r1, r3
 80077ee:	69bb      	ldr	r3, [r7, #24]
 80077f0:	1c5a      	adds	r2, r3, #1
 80077f2:	61ba      	str	r2, [r7, #24]
 80077f4:	781b      	ldrb	r3, [r3, #0]
 80077f6:	1acb      	subs	r3, r1, r3
 80077f8:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	3b01      	subs	r3, #1
 80077fe:	607b      	str	r3, [r7, #4]
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	2b00      	cmp	r3, #0
 8007804:	d002      	beq.n	800780c <mem_cmp+0x40>
 8007806:	697b      	ldr	r3, [r7, #20]
 8007808:	2b00      	cmp	r3, #0
 800780a:	d0eb      	beq.n	80077e4 <mem_cmp+0x18>

	return r;
 800780c:	697b      	ldr	r3, [r7, #20]
}
 800780e:	4618      	mov	r0, r3
 8007810:	3724      	adds	r7, #36	; 0x24
 8007812:	46bd      	mov	sp, r7
 8007814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007818:	4770      	bx	lr

0800781a <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800781a:	b480      	push	{r7}
 800781c:	b083      	sub	sp, #12
 800781e:	af00      	add	r7, sp, #0
 8007820:	6078      	str	r0, [r7, #4]
 8007822:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8007824:	e002      	b.n	800782c <chk_chr+0x12>
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	3301      	adds	r3, #1
 800782a:	607b      	str	r3, [r7, #4]
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	781b      	ldrb	r3, [r3, #0]
 8007830:	2b00      	cmp	r3, #0
 8007832:	d005      	beq.n	8007840 <chk_chr+0x26>
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	781b      	ldrb	r3, [r3, #0]
 8007838:	461a      	mov	r2, r3
 800783a:	683b      	ldr	r3, [r7, #0]
 800783c:	4293      	cmp	r3, r2
 800783e:	d1f2      	bne.n	8007826 <chk_chr+0xc>
	return *str;
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	781b      	ldrb	r3, [r3, #0]
}
 8007844:	4618      	mov	r0, r3
 8007846:	370c      	adds	r7, #12
 8007848:	46bd      	mov	sp, r7
 800784a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800784e:	4770      	bx	lr

08007850 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8007850:	b480      	push	{r7}
 8007852:	b085      	sub	sp, #20
 8007854:	af00      	add	r7, sp, #0
 8007856:	6078      	str	r0, [r7, #4]
 8007858:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800785a:	2300      	movs	r3, #0
 800785c:	60bb      	str	r3, [r7, #8]
 800785e:	68bb      	ldr	r3, [r7, #8]
 8007860:	60fb      	str	r3, [r7, #12]
 8007862:	e029      	b.n	80078b8 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8007864:	4a27      	ldr	r2, [pc, #156]	; (8007904 <chk_lock+0xb4>)
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	011b      	lsls	r3, r3, #4
 800786a:	4413      	add	r3, r2
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	2b00      	cmp	r3, #0
 8007870:	d01d      	beq.n	80078ae <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8007872:	4a24      	ldr	r2, [pc, #144]	; (8007904 <chk_lock+0xb4>)
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	011b      	lsls	r3, r3, #4
 8007878:	4413      	add	r3, r2
 800787a:	681a      	ldr	r2, [r3, #0]
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	429a      	cmp	r2, r3
 8007882:	d116      	bne.n	80078b2 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8007884:	4a1f      	ldr	r2, [pc, #124]	; (8007904 <chk_lock+0xb4>)
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	011b      	lsls	r3, r3, #4
 800788a:	4413      	add	r3, r2
 800788c:	3304      	adds	r3, #4
 800788e:	681a      	ldr	r2, [r3, #0]
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8007894:	429a      	cmp	r2, r3
 8007896:	d10c      	bne.n	80078b2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8007898:	4a1a      	ldr	r2, [pc, #104]	; (8007904 <chk_lock+0xb4>)
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	011b      	lsls	r3, r3, #4
 800789e:	4413      	add	r3, r2
 80078a0:	3308      	adds	r3, #8
 80078a2:	681a      	ldr	r2, [r3, #0]
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80078a8:	429a      	cmp	r2, r3
 80078aa:	d102      	bne.n	80078b2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80078ac:	e007      	b.n	80078be <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80078ae:	2301      	movs	r3, #1
 80078b0:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	3301      	adds	r3, #1
 80078b6:	60fb      	str	r3, [r7, #12]
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	2b01      	cmp	r3, #1
 80078bc:	d9d2      	bls.n	8007864 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	2b02      	cmp	r3, #2
 80078c2:	d109      	bne.n	80078d8 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80078c4:	68bb      	ldr	r3, [r7, #8]
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d102      	bne.n	80078d0 <chk_lock+0x80>
 80078ca:	683b      	ldr	r3, [r7, #0]
 80078cc:	2b02      	cmp	r3, #2
 80078ce:	d101      	bne.n	80078d4 <chk_lock+0x84>
 80078d0:	2300      	movs	r3, #0
 80078d2:	e010      	b.n	80078f6 <chk_lock+0xa6>
 80078d4:	2312      	movs	r3, #18
 80078d6:	e00e      	b.n	80078f6 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80078d8:	683b      	ldr	r3, [r7, #0]
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d108      	bne.n	80078f0 <chk_lock+0xa0>
 80078de:	4a09      	ldr	r2, [pc, #36]	; (8007904 <chk_lock+0xb4>)
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	011b      	lsls	r3, r3, #4
 80078e4:	4413      	add	r3, r2
 80078e6:	330c      	adds	r3, #12
 80078e8:	881b      	ldrh	r3, [r3, #0]
 80078ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80078ee:	d101      	bne.n	80078f4 <chk_lock+0xa4>
 80078f0:	2310      	movs	r3, #16
 80078f2:	e000      	b.n	80078f6 <chk_lock+0xa6>
 80078f4:	2300      	movs	r3, #0
}
 80078f6:	4618      	mov	r0, r3
 80078f8:	3714      	adds	r7, #20
 80078fa:	46bd      	mov	sp, r7
 80078fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007900:	4770      	bx	lr
 8007902:	bf00      	nop
 8007904:	20003d4c 	.word	0x20003d4c

08007908 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8007908:	b480      	push	{r7}
 800790a:	b083      	sub	sp, #12
 800790c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800790e:	2300      	movs	r3, #0
 8007910:	607b      	str	r3, [r7, #4]
 8007912:	e002      	b.n	800791a <enq_lock+0x12>
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	3301      	adds	r3, #1
 8007918:	607b      	str	r3, [r7, #4]
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	2b01      	cmp	r3, #1
 800791e:	d806      	bhi.n	800792e <enq_lock+0x26>
 8007920:	4a09      	ldr	r2, [pc, #36]	; (8007948 <enq_lock+0x40>)
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	011b      	lsls	r3, r3, #4
 8007926:	4413      	add	r3, r2
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	2b00      	cmp	r3, #0
 800792c:	d1f2      	bne.n	8007914 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	2b02      	cmp	r3, #2
 8007932:	bf14      	ite	ne
 8007934:	2301      	movne	r3, #1
 8007936:	2300      	moveq	r3, #0
 8007938:	b2db      	uxtb	r3, r3
}
 800793a:	4618      	mov	r0, r3
 800793c:	370c      	adds	r7, #12
 800793e:	46bd      	mov	sp, r7
 8007940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007944:	4770      	bx	lr
 8007946:	bf00      	nop
 8007948:	20003d4c 	.word	0x20003d4c

0800794c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800794c:	b480      	push	{r7}
 800794e:	b085      	sub	sp, #20
 8007950:	af00      	add	r7, sp, #0
 8007952:	6078      	str	r0, [r7, #4]
 8007954:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8007956:	2300      	movs	r3, #0
 8007958:	60fb      	str	r3, [r7, #12]
 800795a:	e01f      	b.n	800799c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800795c:	4a41      	ldr	r2, [pc, #260]	; (8007a64 <inc_lock+0x118>)
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	011b      	lsls	r3, r3, #4
 8007962:	4413      	add	r3, r2
 8007964:	681a      	ldr	r2, [r3, #0]
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	429a      	cmp	r2, r3
 800796c:	d113      	bne.n	8007996 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800796e:	4a3d      	ldr	r2, [pc, #244]	; (8007a64 <inc_lock+0x118>)
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	011b      	lsls	r3, r3, #4
 8007974:	4413      	add	r3, r2
 8007976:	3304      	adds	r3, #4
 8007978:	681a      	ldr	r2, [r3, #0]
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800797e:	429a      	cmp	r2, r3
 8007980:	d109      	bne.n	8007996 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8007982:	4a38      	ldr	r2, [pc, #224]	; (8007a64 <inc_lock+0x118>)
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	011b      	lsls	r3, r3, #4
 8007988:	4413      	add	r3, r2
 800798a:	3308      	adds	r3, #8
 800798c:	681a      	ldr	r2, [r3, #0]
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8007992:	429a      	cmp	r2, r3
 8007994:	d006      	beq.n	80079a4 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	3301      	adds	r3, #1
 800799a:	60fb      	str	r3, [r7, #12]
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	2b01      	cmp	r3, #1
 80079a0:	d9dc      	bls.n	800795c <inc_lock+0x10>
 80079a2:	e000      	b.n	80079a6 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80079a4:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	2b02      	cmp	r3, #2
 80079aa:	d132      	bne.n	8007a12 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80079ac:	2300      	movs	r3, #0
 80079ae:	60fb      	str	r3, [r7, #12]
 80079b0:	e002      	b.n	80079b8 <inc_lock+0x6c>
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	3301      	adds	r3, #1
 80079b6:	60fb      	str	r3, [r7, #12]
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	2b01      	cmp	r3, #1
 80079bc:	d806      	bhi.n	80079cc <inc_lock+0x80>
 80079be:	4a29      	ldr	r2, [pc, #164]	; (8007a64 <inc_lock+0x118>)
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	011b      	lsls	r3, r3, #4
 80079c4:	4413      	add	r3, r2
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d1f2      	bne.n	80079b2 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	2b02      	cmp	r3, #2
 80079d0:	d101      	bne.n	80079d6 <inc_lock+0x8a>
 80079d2:	2300      	movs	r3, #0
 80079d4:	e040      	b.n	8007a58 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681a      	ldr	r2, [r3, #0]
 80079da:	4922      	ldr	r1, [pc, #136]	; (8007a64 <inc_lock+0x118>)
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	011b      	lsls	r3, r3, #4
 80079e0:	440b      	add	r3, r1
 80079e2:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	689a      	ldr	r2, [r3, #8]
 80079e8:	491e      	ldr	r1, [pc, #120]	; (8007a64 <inc_lock+0x118>)
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	011b      	lsls	r3, r3, #4
 80079ee:	440b      	add	r3, r1
 80079f0:	3304      	adds	r3, #4
 80079f2:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	695a      	ldr	r2, [r3, #20]
 80079f8:	491a      	ldr	r1, [pc, #104]	; (8007a64 <inc_lock+0x118>)
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	011b      	lsls	r3, r3, #4
 80079fe:	440b      	add	r3, r1
 8007a00:	3308      	adds	r3, #8
 8007a02:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8007a04:	4a17      	ldr	r2, [pc, #92]	; (8007a64 <inc_lock+0x118>)
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	011b      	lsls	r3, r3, #4
 8007a0a:	4413      	add	r3, r2
 8007a0c:	330c      	adds	r3, #12
 8007a0e:	2200      	movs	r2, #0
 8007a10:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8007a12:	683b      	ldr	r3, [r7, #0]
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d009      	beq.n	8007a2c <inc_lock+0xe0>
 8007a18:	4a12      	ldr	r2, [pc, #72]	; (8007a64 <inc_lock+0x118>)
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	011b      	lsls	r3, r3, #4
 8007a1e:	4413      	add	r3, r2
 8007a20:	330c      	adds	r3, #12
 8007a22:	881b      	ldrh	r3, [r3, #0]
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d001      	beq.n	8007a2c <inc_lock+0xe0>
 8007a28:	2300      	movs	r3, #0
 8007a2a:	e015      	b.n	8007a58 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8007a2c:	683b      	ldr	r3, [r7, #0]
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d108      	bne.n	8007a44 <inc_lock+0xf8>
 8007a32:	4a0c      	ldr	r2, [pc, #48]	; (8007a64 <inc_lock+0x118>)
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	011b      	lsls	r3, r3, #4
 8007a38:	4413      	add	r3, r2
 8007a3a:	330c      	adds	r3, #12
 8007a3c:	881b      	ldrh	r3, [r3, #0]
 8007a3e:	3301      	adds	r3, #1
 8007a40:	b29a      	uxth	r2, r3
 8007a42:	e001      	b.n	8007a48 <inc_lock+0xfc>
 8007a44:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007a48:	4906      	ldr	r1, [pc, #24]	; (8007a64 <inc_lock+0x118>)
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	011b      	lsls	r3, r3, #4
 8007a4e:	440b      	add	r3, r1
 8007a50:	330c      	adds	r3, #12
 8007a52:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	3301      	adds	r3, #1
}
 8007a58:	4618      	mov	r0, r3
 8007a5a:	3714      	adds	r7, #20
 8007a5c:	46bd      	mov	sp, r7
 8007a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a62:	4770      	bx	lr
 8007a64:	20003d4c 	.word	0x20003d4c

08007a68 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8007a68:	b480      	push	{r7}
 8007a6a:	b085      	sub	sp, #20
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	3b01      	subs	r3, #1
 8007a74:	607b      	str	r3, [r7, #4]
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	2b01      	cmp	r3, #1
 8007a7a:	d825      	bhi.n	8007ac8 <dec_lock+0x60>
		n = Files[i].ctr;
 8007a7c:	4a17      	ldr	r2, [pc, #92]	; (8007adc <dec_lock+0x74>)
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	011b      	lsls	r3, r3, #4
 8007a82:	4413      	add	r3, r2
 8007a84:	330c      	adds	r3, #12
 8007a86:	881b      	ldrh	r3, [r3, #0]
 8007a88:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8007a8a:	89fb      	ldrh	r3, [r7, #14]
 8007a8c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007a90:	d101      	bne.n	8007a96 <dec_lock+0x2e>
 8007a92:	2300      	movs	r3, #0
 8007a94:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8007a96:	89fb      	ldrh	r3, [r7, #14]
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d002      	beq.n	8007aa2 <dec_lock+0x3a>
 8007a9c:	89fb      	ldrh	r3, [r7, #14]
 8007a9e:	3b01      	subs	r3, #1
 8007aa0:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8007aa2:	4a0e      	ldr	r2, [pc, #56]	; (8007adc <dec_lock+0x74>)
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	011b      	lsls	r3, r3, #4
 8007aa8:	4413      	add	r3, r2
 8007aaa:	330c      	adds	r3, #12
 8007aac:	89fa      	ldrh	r2, [r7, #14]
 8007aae:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8007ab0:	89fb      	ldrh	r3, [r7, #14]
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d105      	bne.n	8007ac2 <dec_lock+0x5a>
 8007ab6:	4a09      	ldr	r2, [pc, #36]	; (8007adc <dec_lock+0x74>)
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	011b      	lsls	r3, r3, #4
 8007abc:	4413      	add	r3, r2
 8007abe:	2200      	movs	r2, #0
 8007ac0:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8007ac2:	2300      	movs	r3, #0
 8007ac4:	737b      	strb	r3, [r7, #13]
 8007ac6:	e001      	b.n	8007acc <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8007ac8:	2302      	movs	r3, #2
 8007aca:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8007acc:	7b7b      	ldrb	r3, [r7, #13]
}
 8007ace:	4618      	mov	r0, r3
 8007ad0:	3714      	adds	r7, #20
 8007ad2:	46bd      	mov	sp, r7
 8007ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad8:	4770      	bx	lr
 8007ada:	bf00      	nop
 8007adc:	20003d4c 	.word	0x20003d4c

08007ae0 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8007ae0:	b480      	push	{r7}
 8007ae2:	b085      	sub	sp, #20
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8007ae8:	2300      	movs	r3, #0
 8007aea:	60fb      	str	r3, [r7, #12]
 8007aec:	e010      	b.n	8007b10 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8007aee:	4a0d      	ldr	r2, [pc, #52]	; (8007b24 <clear_lock+0x44>)
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	011b      	lsls	r3, r3, #4
 8007af4:	4413      	add	r3, r2
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	687a      	ldr	r2, [r7, #4]
 8007afa:	429a      	cmp	r2, r3
 8007afc:	d105      	bne.n	8007b0a <clear_lock+0x2a>
 8007afe:	4a09      	ldr	r2, [pc, #36]	; (8007b24 <clear_lock+0x44>)
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	011b      	lsls	r3, r3, #4
 8007b04:	4413      	add	r3, r2
 8007b06:	2200      	movs	r2, #0
 8007b08:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	3301      	adds	r3, #1
 8007b0e:	60fb      	str	r3, [r7, #12]
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	2b01      	cmp	r3, #1
 8007b14:	d9eb      	bls.n	8007aee <clear_lock+0xe>
	}
}
 8007b16:	bf00      	nop
 8007b18:	bf00      	nop
 8007b1a:	3714      	adds	r7, #20
 8007b1c:	46bd      	mov	sp, r7
 8007b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b22:	4770      	bx	lr
 8007b24:	20003d4c 	.word	0x20003d4c

08007b28 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8007b28:	b580      	push	{r7, lr}
 8007b2a:	b086      	sub	sp, #24
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8007b30:	2300      	movs	r3, #0
 8007b32:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	78db      	ldrb	r3, [r3, #3]
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d034      	beq.n	8007ba6 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b40:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	7858      	ldrb	r0, [r3, #1]
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8007b4c:	2301      	movs	r3, #1
 8007b4e:	697a      	ldr	r2, [r7, #20]
 8007b50:	f7ff fd40 	bl	80075d4 <disk_write>
 8007b54:	4603      	mov	r3, r0
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d002      	beq.n	8007b60 <sync_window+0x38>
			res = FR_DISK_ERR;
 8007b5a:	2301      	movs	r3, #1
 8007b5c:	73fb      	strb	r3, [r7, #15]
 8007b5e:	e022      	b.n	8007ba6 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	2200      	movs	r2, #0
 8007b64:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b6a:	697a      	ldr	r2, [r7, #20]
 8007b6c:	1ad2      	subs	r2, r2, r3
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	6a1b      	ldr	r3, [r3, #32]
 8007b72:	429a      	cmp	r2, r3
 8007b74:	d217      	bcs.n	8007ba6 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	789b      	ldrb	r3, [r3, #2]
 8007b7a:	613b      	str	r3, [r7, #16]
 8007b7c:	e010      	b.n	8007ba0 <sync_window+0x78>
					wsect += fs->fsize;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	6a1b      	ldr	r3, [r3, #32]
 8007b82:	697a      	ldr	r2, [r7, #20]
 8007b84:	4413      	add	r3, r2
 8007b86:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	7858      	ldrb	r0, [r3, #1]
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8007b92:	2301      	movs	r3, #1
 8007b94:	697a      	ldr	r2, [r7, #20]
 8007b96:	f7ff fd1d 	bl	80075d4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007b9a:	693b      	ldr	r3, [r7, #16]
 8007b9c:	3b01      	subs	r3, #1
 8007b9e:	613b      	str	r3, [r7, #16]
 8007ba0:	693b      	ldr	r3, [r7, #16]
 8007ba2:	2b01      	cmp	r3, #1
 8007ba4:	d8eb      	bhi.n	8007b7e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8007ba6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ba8:	4618      	mov	r0, r3
 8007baa:	3718      	adds	r7, #24
 8007bac:	46bd      	mov	sp, r7
 8007bae:	bd80      	pop	{r7, pc}

08007bb0 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8007bb0:	b580      	push	{r7, lr}
 8007bb2:	b084      	sub	sp, #16
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	6078      	str	r0, [r7, #4]
 8007bb8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8007bba:	2300      	movs	r3, #0
 8007bbc:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007bc2:	683a      	ldr	r2, [r7, #0]
 8007bc4:	429a      	cmp	r2, r3
 8007bc6:	d01b      	beq.n	8007c00 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8007bc8:	6878      	ldr	r0, [r7, #4]
 8007bca:	f7ff ffad 	bl	8007b28 <sync_window>
 8007bce:	4603      	mov	r3, r0
 8007bd0:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8007bd2:	7bfb      	ldrb	r3, [r7, #15]
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d113      	bne.n	8007c00 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	7858      	ldrb	r0, [r3, #1]
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8007be2:	2301      	movs	r3, #1
 8007be4:	683a      	ldr	r2, [r7, #0]
 8007be6:	f7ff fcd5 	bl	8007594 <disk_read>
 8007bea:	4603      	mov	r3, r0
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d004      	beq.n	8007bfa <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8007bf0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007bf4:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8007bf6:	2301      	movs	r3, #1
 8007bf8:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	683a      	ldr	r2, [r7, #0]
 8007bfe:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 8007c00:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c02:	4618      	mov	r0, r3
 8007c04:	3710      	adds	r7, #16
 8007c06:	46bd      	mov	sp, r7
 8007c08:	bd80      	pop	{r7, pc}
	...

08007c0c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8007c0c:	b580      	push	{r7, lr}
 8007c0e:	b084      	sub	sp, #16
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8007c14:	6878      	ldr	r0, [r7, #4]
 8007c16:	f7ff ff87 	bl	8007b28 <sync_window>
 8007c1a:	4603      	mov	r3, r0
 8007c1c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8007c1e:	7bfb      	ldrb	r3, [r7, #15]
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d159      	bne.n	8007cd8 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	781b      	ldrb	r3, [r3, #0]
 8007c28:	2b03      	cmp	r3, #3
 8007c2a:	d149      	bne.n	8007cc0 <sync_fs+0xb4>
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	791b      	ldrb	r3, [r3, #4]
 8007c30:	2b01      	cmp	r3, #1
 8007c32:	d145      	bne.n	8007cc0 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	899b      	ldrh	r3, [r3, #12]
 8007c3e:	461a      	mov	r2, r3
 8007c40:	2100      	movs	r1, #0
 8007c42:	f7ff fda8 	bl	8007796 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	3338      	adds	r3, #56	; 0x38
 8007c4a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007c4e:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8007c52:	4618      	mov	r0, r3
 8007c54:	f7ff fd37 	bl	80076c6 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	3338      	adds	r3, #56	; 0x38
 8007c5c:	4921      	ldr	r1, [pc, #132]	; (8007ce4 <sync_fs+0xd8>)
 8007c5e:	4618      	mov	r0, r3
 8007c60:	f7ff fd4c 	bl	80076fc <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	3338      	adds	r3, #56	; 0x38
 8007c68:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8007c6c:	491e      	ldr	r1, [pc, #120]	; (8007ce8 <sync_fs+0xdc>)
 8007c6e:	4618      	mov	r0, r3
 8007c70:	f7ff fd44 	bl	80076fc <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	3338      	adds	r3, #56	; 0x38
 8007c78:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	699b      	ldr	r3, [r3, #24]
 8007c80:	4619      	mov	r1, r3
 8007c82:	4610      	mov	r0, r2
 8007c84:	f7ff fd3a 	bl	80076fc <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	3338      	adds	r3, #56	; 0x38
 8007c8c:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	695b      	ldr	r3, [r3, #20]
 8007c94:	4619      	mov	r1, r3
 8007c96:	4610      	mov	r0, r2
 8007c98:	f7ff fd30 	bl	80076fc <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ca0:	1c5a      	adds	r2, r3, #1
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	7858      	ldrb	r0, [r3, #1]
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007cb4:	2301      	movs	r3, #1
 8007cb6:	f7ff fc8d 	bl	80075d4 <disk_write>
			fs->fsi_flag = 0;
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	2200      	movs	r2, #0
 8007cbe:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	785b      	ldrb	r3, [r3, #1]
 8007cc4:	2200      	movs	r2, #0
 8007cc6:	2100      	movs	r1, #0
 8007cc8:	4618      	mov	r0, r3
 8007cca:	f7ff fca3 	bl	8007614 <disk_ioctl>
 8007cce:	4603      	mov	r3, r0
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d001      	beq.n	8007cd8 <sync_fs+0xcc>
 8007cd4:	2301      	movs	r3, #1
 8007cd6:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8007cd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cda:	4618      	mov	r0, r3
 8007cdc:	3710      	adds	r7, #16
 8007cde:	46bd      	mov	sp, r7
 8007ce0:	bd80      	pop	{r7, pc}
 8007ce2:	bf00      	nop
 8007ce4:	41615252 	.word	0x41615252
 8007ce8:	61417272 	.word	0x61417272

08007cec <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8007cec:	b480      	push	{r7}
 8007cee:	b083      	sub	sp, #12
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	6078      	str	r0, [r7, #4]
 8007cf4:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8007cf6:	683b      	ldr	r3, [r7, #0]
 8007cf8:	3b02      	subs	r3, #2
 8007cfa:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	69db      	ldr	r3, [r3, #28]
 8007d00:	3b02      	subs	r3, #2
 8007d02:	683a      	ldr	r2, [r7, #0]
 8007d04:	429a      	cmp	r2, r3
 8007d06:	d301      	bcc.n	8007d0c <clust2sect+0x20>
 8007d08:	2300      	movs	r3, #0
 8007d0a:	e008      	b.n	8007d1e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	895b      	ldrh	r3, [r3, #10]
 8007d10:	461a      	mov	r2, r3
 8007d12:	683b      	ldr	r3, [r7, #0]
 8007d14:	fb03 f202 	mul.w	r2, r3, r2
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d1c:	4413      	add	r3, r2
}
 8007d1e:	4618      	mov	r0, r3
 8007d20:	370c      	adds	r7, #12
 8007d22:	46bd      	mov	sp, r7
 8007d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d28:	4770      	bx	lr

08007d2a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8007d2a:	b580      	push	{r7, lr}
 8007d2c:	b086      	sub	sp, #24
 8007d2e:	af00      	add	r7, sp, #0
 8007d30:	6078      	str	r0, [r7, #4]
 8007d32:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8007d3a:	683b      	ldr	r3, [r7, #0]
 8007d3c:	2b01      	cmp	r3, #1
 8007d3e:	d904      	bls.n	8007d4a <get_fat+0x20>
 8007d40:	693b      	ldr	r3, [r7, #16]
 8007d42:	69db      	ldr	r3, [r3, #28]
 8007d44:	683a      	ldr	r2, [r7, #0]
 8007d46:	429a      	cmp	r2, r3
 8007d48:	d302      	bcc.n	8007d50 <get_fat+0x26>
		val = 1;	/* Internal error */
 8007d4a:	2301      	movs	r3, #1
 8007d4c:	617b      	str	r3, [r7, #20]
 8007d4e:	e0bb      	b.n	8007ec8 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8007d50:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007d54:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8007d56:	693b      	ldr	r3, [r7, #16]
 8007d58:	781b      	ldrb	r3, [r3, #0]
 8007d5a:	2b03      	cmp	r3, #3
 8007d5c:	f000 8083 	beq.w	8007e66 <get_fat+0x13c>
 8007d60:	2b03      	cmp	r3, #3
 8007d62:	f300 80a7 	bgt.w	8007eb4 <get_fat+0x18a>
 8007d66:	2b01      	cmp	r3, #1
 8007d68:	d002      	beq.n	8007d70 <get_fat+0x46>
 8007d6a:	2b02      	cmp	r3, #2
 8007d6c:	d056      	beq.n	8007e1c <get_fat+0xf2>
 8007d6e:	e0a1      	b.n	8007eb4 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8007d70:	683b      	ldr	r3, [r7, #0]
 8007d72:	60fb      	str	r3, [r7, #12]
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	085b      	lsrs	r3, r3, #1
 8007d78:	68fa      	ldr	r2, [r7, #12]
 8007d7a:	4413      	add	r3, r2
 8007d7c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007d7e:	693b      	ldr	r3, [r7, #16]
 8007d80:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007d82:	693b      	ldr	r3, [r7, #16]
 8007d84:	899b      	ldrh	r3, [r3, #12]
 8007d86:	4619      	mov	r1, r3
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8007d8e:	4413      	add	r3, r2
 8007d90:	4619      	mov	r1, r3
 8007d92:	6938      	ldr	r0, [r7, #16]
 8007d94:	f7ff ff0c 	bl	8007bb0 <move_window>
 8007d98:	4603      	mov	r3, r0
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	f040 808d 	bne.w	8007eba <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	1c5a      	adds	r2, r3, #1
 8007da4:	60fa      	str	r2, [r7, #12]
 8007da6:	693a      	ldr	r2, [r7, #16]
 8007da8:	8992      	ldrh	r2, [r2, #12]
 8007daa:	fbb3 f1f2 	udiv	r1, r3, r2
 8007dae:	fb01 f202 	mul.w	r2, r1, r2
 8007db2:	1a9b      	subs	r3, r3, r2
 8007db4:	693a      	ldr	r2, [r7, #16]
 8007db6:	4413      	add	r3, r2
 8007db8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007dbc:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007dbe:	693b      	ldr	r3, [r7, #16]
 8007dc0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007dc2:	693b      	ldr	r3, [r7, #16]
 8007dc4:	899b      	ldrh	r3, [r3, #12]
 8007dc6:	4619      	mov	r1, r3
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	fbb3 f3f1 	udiv	r3, r3, r1
 8007dce:	4413      	add	r3, r2
 8007dd0:	4619      	mov	r1, r3
 8007dd2:	6938      	ldr	r0, [r7, #16]
 8007dd4:	f7ff feec 	bl	8007bb0 <move_window>
 8007dd8:	4603      	mov	r3, r0
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d16f      	bne.n	8007ebe <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 8007dde:	693b      	ldr	r3, [r7, #16]
 8007de0:	899b      	ldrh	r3, [r3, #12]
 8007de2:	461a      	mov	r2, r3
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	fbb3 f1f2 	udiv	r1, r3, r2
 8007dea:	fb01 f202 	mul.w	r2, r1, r2
 8007dee:	1a9b      	subs	r3, r3, r2
 8007df0:	693a      	ldr	r2, [r7, #16]
 8007df2:	4413      	add	r3, r2
 8007df4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007df8:	021b      	lsls	r3, r3, #8
 8007dfa:	461a      	mov	r2, r3
 8007dfc:	68bb      	ldr	r3, [r7, #8]
 8007dfe:	4313      	orrs	r3, r2
 8007e00:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8007e02:	683b      	ldr	r3, [r7, #0]
 8007e04:	f003 0301 	and.w	r3, r3, #1
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d002      	beq.n	8007e12 <get_fat+0xe8>
 8007e0c:	68bb      	ldr	r3, [r7, #8]
 8007e0e:	091b      	lsrs	r3, r3, #4
 8007e10:	e002      	b.n	8007e18 <get_fat+0xee>
 8007e12:	68bb      	ldr	r3, [r7, #8]
 8007e14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007e18:	617b      	str	r3, [r7, #20]
			break;
 8007e1a:	e055      	b.n	8007ec8 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8007e1c:	693b      	ldr	r3, [r7, #16]
 8007e1e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007e20:	693b      	ldr	r3, [r7, #16]
 8007e22:	899b      	ldrh	r3, [r3, #12]
 8007e24:	085b      	lsrs	r3, r3, #1
 8007e26:	b29b      	uxth	r3, r3
 8007e28:	4619      	mov	r1, r3
 8007e2a:	683b      	ldr	r3, [r7, #0]
 8007e2c:	fbb3 f3f1 	udiv	r3, r3, r1
 8007e30:	4413      	add	r3, r2
 8007e32:	4619      	mov	r1, r3
 8007e34:	6938      	ldr	r0, [r7, #16]
 8007e36:	f7ff febb 	bl	8007bb0 <move_window>
 8007e3a:	4603      	mov	r3, r0
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d140      	bne.n	8007ec2 <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8007e40:	693b      	ldr	r3, [r7, #16]
 8007e42:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8007e46:	683b      	ldr	r3, [r7, #0]
 8007e48:	005b      	lsls	r3, r3, #1
 8007e4a:	693a      	ldr	r2, [r7, #16]
 8007e4c:	8992      	ldrh	r2, [r2, #12]
 8007e4e:	fbb3 f0f2 	udiv	r0, r3, r2
 8007e52:	fb00 f202 	mul.w	r2, r0, r2
 8007e56:	1a9b      	subs	r3, r3, r2
 8007e58:	440b      	add	r3, r1
 8007e5a:	4618      	mov	r0, r3
 8007e5c:	f7ff fbf8 	bl	8007650 <ld_word>
 8007e60:	4603      	mov	r3, r0
 8007e62:	617b      	str	r3, [r7, #20]
			break;
 8007e64:	e030      	b.n	8007ec8 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007e66:	693b      	ldr	r3, [r7, #16]
 8007e68:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007e6a:	693b      	ldr	r3, [r7, #16]
 8007e6c:	899b      	ldrh	r3, [r3, #12]
 8007e6e:	089b      	lsrs	r3, r3, #2
 8007e70:	b29b      	uxth	r3, r3
 8007e72:	4619      	mov	r1, r3
 8007e74:	683b      	ldr	r3, [r7, #0]
 8007e76:	fbb3 f3f1 	udiv	r3, r3, r1
 8007e7a:	4413      	add	r3, r2
 8007e7c:	4619      	mov	r1, r3
 8007e7e:	6938      	ldr	r0, [r7, #16]
 8007e80:	f7ff fe96 	bl	8007bb0 <move_window>
 8007e84:	4603      	mov	r3, r0
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d11d      	bne.n	8007ec6 <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8007e8a:	693b      	ldr	r3, [r7, #16]
 8007e8c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8007e90:	683b      	ldr	r3, [r7, #0]
 8007e92:	009b      	lsls	r3, r3, #2
 8007e94:	693a      	ldr	r2, [r7, #16]
 8007e96:	8992      	ldrh	r2, [r2, #12]
 8007e98:	fbb3 f0f2 	udiv	r0, r3, r2
 8007e9c:	fb00 f202 	mul.w	r2, r0, r2
 8007ea0:	1a9b      	subs	r3, r3, r2
 8007ea2:	440b      	add	r3, r1
 8007ea4:	4618      	mov	r0, r3
 8007ea6:	f7ff fbeb 	bl	8007680 <ld_dword>
 8007eaa:	4603      	mov	r3, r0
 8007eac:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8007eb0:	617b      	str	r3, [r7, #20]
			break;
 8007eb2:	e009      	b.n	8007ec8 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8007eb4:	2301      	movs	r3, #1
 8007eb6:	617b      	str	r3, [r7, #20]
 8007eb8:	e006      	b.n	8007ec8 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007eba:	bf00      	nop
 8007ebc:	e004      	b.n	8007ec8 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007ebe:	bf00      	nop
 8007ec0:	e002      	b.n	8007ec8 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8007ec2:	bf00      	nop
 8007ec4:	e000      	b.n	8007ec8 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007ec6:	bf00      	nop
		}
	}

	return val;
 8007ec8:	697b      	ldr	r3, [r7, #20]
}
 8007eca:	4618      	mov	r0, r3
 8007ecc:	3718      	adds	r7, #24
 8007ece:	46bd      	mov	sp, r7
 8007ed0:	bd80      	pop	{r7, pc}

08007ed2 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8007ed2:	b590      	push	{r4, r7, lr}
 8007ed4:	b089      	sub	sp, #36	; 0x24
 8007ed6:	af00      	add	r7, sp, #0
 8007ed8:	60f8      	str	r0, [r7, #12]
 8007eda:	60b9      	str	r1, [r7, #8]
 8007edc:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8007ede:	2302      	movs	r3, #2
 8007ee0:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8007ee2:	68bb      	ldr	r3, [r7, #8]
 8007ee4:	2b01      	cmp	r3, #1
 8007ee6:	f240 8102 	bls.w	80080ee <put_fat+0x21c>
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	69db      	ldr	r3, [r3, #28]
 8007eee:	68ba      	ldr	r2, [r7, #8]
 8007ef0:	429a      	cmp	r2, r3
 8007ef2:	f080 80fc 	bcs.w	80080ee <put_fat+0x21c>
		switch (fs->fs_type) {
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	781b      	ldrb	r3, [r3, #0]
 8007efa:	2b03      	cmp	r3, #3
 8007efc:	f000 80b6 	beq.w	800806c <put_fat+0x19a>
 8007f00:	2b03      	cmp	r3, #3
 8007f02:	f300 80fd 	bgt.w	8008100 <put_fat+0x22e>
 8007f06:	2b01      	cmp	r3, #1
 8007f08:	d003      	beq.n	8007f12 <put_fat+0x40>
 8007f0a:	2b02      	cmp	r3, #2
 8007f0c:	f000 8083 	beq.w	8008016 <put_fat+0x144>
 8007f10:	e0f6      	b.n	8008100 <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8007f12:	68bb      	ldr	r3, [r7, #8]
 8007f14:	61bb      	str	r3, [r7, #24]
 8007f16:	69bb      	ldr	r3, [r7, #24]
 8007f18:	085b      	lsrs	r3, r3, #1
 8007f1a:	69ba      	ldr	r2, [r7, #24]
 8007f1c:	4413      	add	r3, r2
 8007f1e:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	899b      	ldrh	r3, [r3, #12]
 8007f28:	4619      	mov	r1, r3
 8007f2a:	69bb      	ldr	r3, [r7, #24]
 8007f2c:	fbb3 f3f1 	udiv	r3, r3, r1
 8007f30:	4413      	add	r3, r2
 8007f32:	4619      	mov	r1, r3
 8007f34:	68f8      	ldr	r0, [r7, #12]
 8007f36:	f7ff fe3b 	bl	8007bb0 <move_window>
 8007f3a:	4603      	mov	r3, r0
 8007f3c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007f3e:	7ffb      	ldrb	r3, [r7, #31]
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	f040 80d6 	bne.w	80080f2 <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8007f4c:	69bb      	ldr	r3, [r7, #24]
 8007f4e:	1c5a      	adds	r2, r3, #1
 8007f50:	61ba      	str	r2, [r7, #24]
 8007f52:	68fa      	ldr	r2, [r7, #12]
 8007f54:	8992      	ldrh	r2, [r2, #12]
 8007f56:	fbb3 f0f2 	udiv	r0, r3, r2
 8007f5a:	fb00 f202 	mul.w	r2, r0, r2
 8007f5e:	1a9b      	subs	r3, r3, r2
 8007f60:	440b      	add	r3, r1
 8007f62:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8007f64:	68bb      	ldr	r3, [r7, #8]
 8007f66:	f003 0301 	and.w	r3, r3, #1
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d00d      	beq.n	8007f8a <put_fat+0xb8>
 8007f6e:	697b      	ldr	r3, [r7, #20]
 8007f70:	781b      	ldrb	r3, [r3, #0]
 8007f72:	b25b      	sxtb	r3, r3
 8007f74:	f003 030f 	and.w	r3, r3, #15
 8007f78:	b25a      	sxtb	r2, r3
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	b2db      	uxtb	r3, r3
 8007f7e:	011b      	lsls	r3, r3, #4
 8007f80:	b25b      	sxtb	r3, r3
 8007f82:	4313      	orrs	r3, r2
 8007f84:	b25b      	sxtb	r3, r3
 8007f86:	b2db      	uxtb	r3, r3
 8007f88:	e001      	b.n	8007f8e <put_fat+0xbc>
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	b2db      	uxtb	r3, r3
 8007f8e:	697a      	ldr	r2, [r7, #20]
 8007f90:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	2201      	movs	r2, #1
 8007f96:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	899b      	ldrh	r3, [r3, #12]
 8007fa0:	4619      	mov	r1, r3
 8007fa2:	69bb      	ldr	r3, [r7, #24]
 8007fa4:	fbb3 f3f1 	udiv	r3, r3, r1
 8007fa8:	4413      	add	r3, r2
 8007faa:	4619      	mov	r1, r3
 8007fac:	68f8      	ldr	r0, [r7, #12]
 8007fae:	f7ff fdff 	bl	8007bb0 <move_window>
 8007fb2:	4603      	mov	r3, r0
 8007fb4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007fb6:	7ffb      	ldrb	r3, [r7, #31]
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	f040 809c 	bne.w	80080f6 <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	899b      	ldrh	r3, [r3, #12]
 8007fc8:	461a      	mov	r2, r3
 8007fca:	69bb      	ldr	r3, [r7, #24]
 8007fcc:	fbb3 f0f2 	udiv	r0, r3, r2
 8007fd0:	fb00 f202 	mul.w	r2, r0, r2
 8007fd4:	1a9b      	subs	r3, r3, r2
 8007fd6:	440b      	add	r3, r1
 8007fd8:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8007fda:	68bb      	ldr	r3, [r7, #8]
 8007fdc:	f003 0301 	and.w	r3, r3, #1
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d003      	beq.n	8007fec <put_fat+0x11a>
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	091b      	lsrs	r3, r3, #4
 8007fe8:	b2db      	uxtb	r3, r3
 8007fea:	e00e      	b.n	800800a <put_fat+0x138>
 8007fec:	697b      	ldr	r3, [r7, #20]
 8007fee:	781b      	ldrb	r3, [r3, #0]
 8007ff0:	b25b      	sxtb	r3, r3
 8007ff2:	f023 030f 	bic.w	r3, r3, #15
 8007ff6:	b25a      	sxtb	r2, r3
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	0a1b      	lsrs	r3, r3, #8
 8007ffc:	b25b      	sxtb	r3, r3
 8007ffe:	f003 030f 	and.w	r3, r3, #15
 8008002:	b25b      	sxtb	r3, r3
 8008004:	4313      	orrs	r3, r2
 8008006:	b25b      	sxtb	r3, r3
 8008008:	b2db      	uxtb	r3, r3
 800800a:	697a      	ldr	r2, [r7, #20]
 800800c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	2201      	movs	r2, #1
 8008012:	70da      	strb	r2, [r3, #3]
			break;
 8008014:	e074      	b.n	8008100 <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	899b      	ldrh	r3, [r3, #12]
 800801e:	085b      	lsrs	r3, r3, #1
 8008020:	b29b      	uxth	r3, r3
 8008022:	4619      	mov	r1, r3
 8008024:	68bb      	ldr	r3, [r7, #8]
 8008026:	fbb3 f3f1 	udiv	r3, r3, r1
 800802a:	4413      	add	r3, r2
 800802c:	4619      	mov	r1, r3
 800802e:	68f8      	ldr	r0, [r7, #12]
 8008030:	f7ff fdbe 	bl	8007bb0 <move_window>
 8008034:	4603      	mov	r3, r0
 8008036:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008038:	7ffb      	ldrb	r3, [r7, #31]
 800803a:	2b00      	cmp	r3, #0
 800803c:	d15d      	bne.n	80080fa <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008044:	68bb      	ldr	r3, [r7, #8]
 8008046:	005b      	lsls	r3, r3, #1
 8008048:	68fa      	ldr	r2, [r7, #12]
 800804a:	8992      	ldrh	r2, [r2, #12]
 800804c:	fbb3 f0f2 	udiv	r0, r3, r2
 8008050:	fb00 f202 	mul.w	r2, r0, r2
 8008054:	1a9b      	subs	r3, r3, r2
 8008056:	440b      	add	r3, r1
 8008058:	687a      	ldr	r2, [r7, #4]
 800805a:	b292      	uxth	r2, r2
 800805c:	4611      	mov	r1, r2
 800805e:	4618      	mov	r0, r3
 8008060:	f7ff fb31 	bl	80076c6 <st_word>
			fs->wflag = 1;
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	2201      	movs	r2, #1
 8008068:	70da      	strb	r2, [r3, #3]
			break;
 800806a:	e049      	b.n	8008100 <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	899b      	ldrh	r3, [r3, #12]
 8008074:	089b      	lsrs	r3, r3, #2
 8008076:	b29b      	uxth	r3, r3
 8008078:	4619      	mov	r1, r3
 800807a:	68bb      	ldr	r3, [r7, #8]
 800807c:	fbb3 f3f1 	udiv	r3, r3, r1
 8008080:	4413      	add	r3, r2
 8008082:	4619      	mov	r1, r3
 8008084:	68f8      	ldr	r0, [r7, #12]
 8008086:	f7ff fd93 	bl	8007bb0 <move_window>
 800808a:	4603      	mov	r3, r0
 800808c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800808e:	7ffb      	ldrb	r3, [r7, #31]
 8008090:	2b00      	cmp	r3, #0
 8008092:	d134      	bne.n	80080fe <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80080a0:	68bb      	ldr	r3, [r7, #8]
 80080a2:	009b      	lsls	r3, r3, #2
 80080a4:	68fa      	ldr	r2, [r7, #12]
 80080a6:	8992      	ldrh	r2, [r2, #12]
 80080a8:	fbb3 f0f2 	udiv	r0, r3, r2
 80080ac:	fb00 f202 	mul.w	r2, r0, r2
 80080b0:	1a9b      	subs	r3, r3, r2
 80080b2:	440b      	add	r3, r1
 80080b4:	4618      	mov	r0, r3
 80080b6:	f7ff fae3 	bl	8007680 <ld_dword>
 80080ba:	4603      	mov	r3, r0
 80080bc:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80080c0:	4323      	orrs	r3, r4
 80080c2:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80080ca:	68bb      	ldr	r3, [r7, #8]
 80080cc:	009b      	lsls	r3, r3, #2
 80080ce:	68fa      	ldr	r2, [r7, #12]
 80080d0:	8992      	ldrh	r2, [r2, #12]
 80080d2:	fbb3 f0f2 	udiv	r0, r3, r2
 80080d6:	fb00 f202 	mul.w	r2, r0, r2
 80080da:	1a9b      	subs	r3, r3, r2
 80080dc:	440b      	add	r3, r1
 80080de:	6879      	ldr	r1, [r7, #4]
 80080e0:	4618      	mov	r0, r3
 80080e2:	f7ff fb0b 	bl	80076fc <st_dword>
			fs->wflag = 1;
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	2201      	movs	r2, #1
 80080ea:	70da      	strb	r2, [r3, #3]
			break;
 80080ec:	e008      	b.n	8008100 <put_fat+0x22e>
		}
	}
 80080ee:	bf00      	nop
 80080f0:	e006      	b.n	8008100 <put_fat+0x22e>
			if (res != FR_OK) break;
 80080f2:	bf00      	nop
 80080f4:	e004      	b.n	8008100 <put_fat+0x22e>
			if (res != FR_OK) break;
 80080f6:	bf00      	nop
 80080f8:	e002      	b.n	8008100 <put_fat+0x22e>
			if (res != FR_OK) break;
 80080fa:	bf00      	nop
 80080fc:	e000      	b.n	8008100 <put_fat+0x22e>
			if (res != FR_OK) break;
 80080fe:	bf00      	nop
	return res;
 8008100:	7ffb      	ldrb	r3, [r7, #31]
}
 8008102:	4618      	mov	r0, r3
 8008104:	3724      	adds	r7, #36	; 0x24
 8008106:	46bd      	mov	sp, r7
 8008108:	bd90      	pop	{r4, r7, pc}

0800810a <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800810a:	b580      	push	{r7, lr}
 800810c:	b088      	sub	sp, #32
 800810e:	af00      	add	r7, sp, #0
 8008110:	60f8      	str	r0, [r7, #12]
 8008112:	60b9      	str	r1, [r7, #8]
 8008114:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8008116:	2300      	movs	r3, #0
 8008118:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8008120:	68bb      	ldr	r3, [r7, #8]
 8008122:	2b01      	cmp	r3, #1
 8008124:	d904      	bls.n	8008130 <remove_chain+0x26>
 8008126:	69bb      	ldr	r3, [r7, #24]
 8008128:	69db      	ldr	r3, [r3, #28]
 800812a:	68ba      	ldr	r2, [r7, #8]
 800812c:	429a      	cmp	r2, r3
 800812e:	d301      	bcc.n	8008134 <remove_chain+0x2a>
 8008130:	2302      	movs	r3, #2
 8008132:	e04b      	b.n	80081cc <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	2b00      	cmp	r3, #0
 8008138:	d00c      	beq.n	8008154 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800813a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800813e:	6879      	ldr	r1, [r7, #4]
 8008140:	69b8      	ldr	r0, [r7, #24]
 8008142:	f7ff fec6 	bl	8007ed2 <put_fat>
 8008146:	4603      	mov	r3, r0
 8008148:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800814a:	7ffb      	ldrb	r3, [r7, #31]
 800814c:	2b00      	cmp	r3, #0
 800814e:	d001      	beq.n	8008154 <remove_chain+0x4a>
 8008150:	7ffb      	ldrb	r3, [r7, #31]
 8008152:	e03b      	b.n	80081cc <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8008154:	68b9      	ldr	r1, [r7, #8]
 8008156:	68f8      	ldr	r0, [r7, #12]
 8008158:	f7ff fde7 	bl	8007d2a <get_fat>
 800815c:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800815e:	697b      	ldr	r3, [r7, #20]
 8008160:	2b00      	cmp	r3, #0
 8008162:	d031      	beq.n	80081c8 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8008164:	697b      	ldr	r3, [r7, #20]
 8008166:	2b01      	cmp	r3, #1
 8008168:	d101      	bne.n	800816e <remove_chain+0x64>
 800816a:	2302      	movs	r3, #2
 800816c:	e02e      	b.n	80081cc <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800816e:	697b      	ldr	r3, [r7, #20]
 8008170:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008174:	d101      	bne.n	800817a <remove_chain+0x70>
 8008176:	2301      	movs	r3, #1
 8008178:	e028      	b.n	80081cc <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800817a:	2200      	movs	r2, #0
 800817c:	68b9      	ldr	r1, [r7, #8]
 800817e:	69b8      	ldr	r0, [r7, #24]
 8008180:	f7ff fea7 	bl	8007ed2 <put_fat>
 8008184:	4603      	mov	r3, r0
 8008186:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8008188:	7ffb      	ldrb	r3, [r7, #31]
 800818a:	2b00      	cmp	r3, #0
 800818c:	d001      	beq.n	8008192 <remove_chain+0x88>
 800818e:	7ffb      	ldrb	r3, [r7, #31]
 8008190:	e01c      	b.n	80081cc <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8008192:	69bb      	ldr	r3, [r7, #24]
 8008194:	699a      	ldr	r2, [r3, #24]
 8008196:	69bb      	ldr	r3, [r7, #24]
 8008198:	69db      	ldr	r3, [r3, #28]
 800819a:	3b02      	subs	r3, #2
 800819c:	429a      	cmp	r2, r3
 800819e:	d20b      	bcs.n	80081b8 <remove_chain+0xae>
			fs->free_clst++;
 80081a0:	69bb      	ldr	r3, [r7, #24]
 80081a2:	699b      	ldr	r3, [r3, #24]
 80081a4:	1c5a      	adds	r2, r3, #1
 80081a6:	69bb      	ldr	r3, [r7, #24]
 80081a8:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 80081aa:	69bb      	ldr	r3, [r7, #24]
 80081ac:	791b      	ldrb	r3, [r3, #4]
 80081ae:	f043 0301 	orr.w	r3, r3, #1
 80081b2:	b2da      	uxtb	r2, r3
 80081b4:	69bb      	ldr	r3, [r7, #24]
 80081b6:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80081b8:	697b      	ldr	r3, [r7, #20]
 80081ba:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80081bc:	69bb      	ldr	r3, [r7, #24]
 80081be:	69db      	ldr	r3, [r3, #28]
 80081c0:	68ba      	ldr	r2, [r7, #8]
 80081c2:	429a      	cmp	r2, r3
 80081c4:	d3c6      	bcc.n	8008154 <remove_chain+0x4a>
 80081c6:	e000      	b.n	80081ca <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80081c8:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80081ca:	2300      	movs	r3, #0
}
 80081cc:	4618      	mov	r0, r3
 80081ce:	3720      	adds	r7, #32
 80081d0:	46bd      	mov	sp, r7
 80081d2:	bd80      	pop	{r7, pc}

080081d4 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80081d4:	b580      	push	{r7, lr}
 80081d6:	b088      	sub	sp, #32
 80081d8:	af00      	add	r7, sp, #0
 80081da:	6078      	str	r0, [r7, #4]
 80081dc:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80081e4:	683b      	ldr	r3, [r7, #0]
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d10d      	bne.n	8008206 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80081ea:	693b      	ldr	r3, [r7, #16]
 80081ec:	695b      	ldr	r3, [r3, #20]
 80081ee:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80081f0:	69bb      	ldr	r3, [r7, #24]
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d004      	beq.n	8008200 <create_chain+0x2c>
 80081f6:	693b      	ldr	r3, [r7, #16]
 80081f8:	69db      	ldr	r3, [r3, #28]
 80081fa:	69ba      	ldr	r2, [r7, #24]
 80081fc:	429a      	cmp	r2, r3
 80081fe:	d31b      	bcc.n	8008238 <create_chain+0x64>
 8008200:	2301      	movs	r3, #1
 8008202:	61bb      	str	r3, [r7, #24]
 8008204:	e018      	b.n	8008238 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8008206:	6839      	ldr	r1, [r7, #0]
 8008208:	6878      	ldr	r0, [r7, #4]
 800820a:	f7ff fd8e 	bl	8007d2a <get_fat>
 800820e:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	2b01      	cmp	r3, #1
 8008214:	d801      	bhi.n	800821a <create_chain+0x46>
 8008216:	2301      	movs	r3, #1
 8008218:	e070      	b.n	80082fc <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008220:	d101      	bne.n	8008226 <create_chain+0x52>
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	e06a      	b.n	80082fc <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8008226:	693b      	ldr	r3, [r7, #16]
 8008228:	69db      	ldr	r3, [r3, #28]
 800822a:	68fa      	ldr	r2, [r7, #12]
 800822c:	429a      	cmp	r2, r3
 800822e:	d201      	bcs.n	8008234 <create_chain+0x60>
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	e063      	b.n	80082fc <create_chain+0x128>
		scl = clst;
 8008234:	683b      	ldr	r3, [r7, #0]
 8008236:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8008238:	69bb      	ldr	r3, [r7, #24]
 800823a:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800823c:	69fb      	ldr	r3, [r7, #28]
 800823e:	3301      	adds	r3, #1
 8008240:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8008242:	693b      	ldr	r3, [r7, #16]
 8008244:	69db      	ldr	r3, [r3, #28]
 8008246:	69fa      	ldr	r2, [r7, #28]
 8008248:	429a      	cmp	r2, r3
 800824a:	d307      	bcc.n	800825c <create_chain+0x88>
				ncl = 2;
 800824c:	2302      	movs	r3, #2
 800824e:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8008250:	69fa      	ldr	r2, [r7, #28]
 8008252:	69bb      	ldr	r3, [r7, #24]
 8008254:	429a      	cmp	r2, r3
 8008256:	d901      	bls.n	800825c <create_chain+0x88>
 8008258:	2300      	movs	r3, #0
 800825a:	e04f      	b.n	80082fc <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800825c:	69f9      	ldr	r1, [r7, #28]
 800825e:	6878      	ldr	r0, [r7, #4]
 8008260:	f7ff fd63 	bl	8007d2a <get_fat>
 8008264:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	2b00      	cmp	r3, #0
 800826a:	d00e      	beq.n	800828a <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	2b01      	cmp	r3, #1
 8008270:	d003      	beq.n	800827a <create_chain+0xa6>
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008278:	d101      	bne.n	800827e <create_chain+0xaa>
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	e03e      	b.n	80082fc <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800827e:	69fa      	ldr	r2, [r7, #28]
 8008280:	69bb      	ldr	r3, [r7, #24]
 8008282:	429a      	cmp	r2, r3
 8008284:	d1da      	bne.n	800823c <create_chain+0x68>
 8008286:	2300      	movs	r3, #0
 8008288:	e038      	b.n	80082fc <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800828a:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800828c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008290:	69f9      	ldr	r1, [r7, #28]
 8008292:	6938      	ldr	r0, [r7, #16]
 8008294:	f7ff fe1d 	bl	8007ed2 <put_fat>
 8008298:	4603      	mov	r3, r0
 800829a:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800829c:	7dfb      	ldrb	r3, [r7, #23]
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d109      	bne.n	80082b6 <create_chain+0xe2>
 80082a2:	683b      	ldr	r3, [r7, #0]
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d006      	beq.n	80082b6 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80082a8:	69fa      	ldr	r2, [r7, #28]
 80082aa:	6839      	ldr	r1, [r7, #0]
 80082ac:	6938      	ldr	r0, [r7, #16]
 80082ae:	f7ff fe10 	bl	8007ed2 <put_fat>
 80082b2:	4603      	mov	r3, r0
 80082b4:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80082b6:	7dfb      	ldrb	r3, [r7, #23]
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d116      	bne.n	80082ea <create_chain+0x116>
		fs->last_clst = ncl;
 80082bc:	693b      	ldr	r3, [r7, #16]
 80082be:	69fa      	ldr	r2, [r7, #28]
 80082c0:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80082c2:	693b      	ldr	r3, [r7, #16]
 80082c4:	699a      	ldr	r2, [r3, #24]
 80082c6:	693b      	ldr	r3, [r7, #16]
 80082c8:	69db      	ldr	r3, [r3, #28]
 80082ca:	3b02      	subs	r3, #2
 80082cc:	429a      	cmp	r2, r3
 80082ce:	d804      	bhi.n	80082da <create_chain+0x106>
 80082d0:	693b      	ldr	r3, [r7, #16]
 80082d2:	699b      	ldr	r3, [r3, #24]
 80082d4:	1e5a      	subs	r2, r3, #1
 80082d6:	693b      	ldr	r3, [r7, #16]
 80082d8:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 80082da:	693b      	ldr	r3, [r7, #16]
 80082dc:	791b      	ldrb	r3, [r3, #4]
 80082de:	f043 0301 	orr.w	r3, r3, #1
 80082e2:	b2da      	uxtb	r2, r3
 80082e4:	693b      	ldr	r3, [r7, #16]
 80082e6:	711a      	strb	r2, [r3, #4]
 80082e8:	e007      	b.n	80082fa <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80082ea:	7dfb      	ldrb	r3, [r7, #23]
 80082ec:	2b01      	cmp	r3, #1
 80082ee:	d102      	bne.n	80082f6 <create_chain+0x122>
 80082f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80082f4:	e000      	b.n	80082f8 <create_chain+0x124>
 80082f6:	2301      	movs	r3, #1
 80082f8:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80082fa:	69fb      	ldr	r3, [r7, #28]
}
 80082fc:	4618      	mov	r0, r3
 80082fe:	3720      	adds	r7, #32
 8008300:	46bd      	mov	sp, r7
 8008302:	bd80      	pop	{r7, pc}

08008304 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8008304:	b480      	push	{r7}
 8008306:	b087      	sub	sp, #28
 8008308:	af00      	add	r7, sp, #0
 800830a:	6078      	str	r0, [r7, #4]
 800830c:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008318:	3304      	adds	r3, #4
 800831a:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	899b      	ldrh	r3, [r3, #12]
 8008320:	461a      	mov	r2, r3
 8008322:	683b      	ldr	r3, [r7, #0]
 8008324:	fbb3 f3f2 	udiv	r3, r3, r2
 8008328:	68fa      	ldr	r2, [r7, #12]
 800832a:	8952      	ldrh	r2, [r2, #10]
 800832c:	fbb3 f3f2 	udiv	r3, r3, r2
 8008330:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8008332:	693b      	ldr	r3, [r7, #16]
 8008334:	1d1a      	adds	r2, r3, #4
 8008336:	613a      	str	r2, [r7, #16]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800833c:	68bb      	ldr	r3, [r7, #8]
 800833e:	2b00      	cmp	r3, #0
 8008340:	d101      	bne.n	8008346 <clmt_clust+0x42>
 8008342:	2300      	movs	r3, #0
 8008344:	e010      	b.n	8008368 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8008346:	697a      	ldr	r2, [r7, #20]
 8008348:	68bb      	ldr	r3, [r7, #8]
 800834a:	429a      	cmp	r2, r3
 800834c:	d307      	bcc.n	800835e <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800834e:	697a      	ldr	r2, [r7, #20]
 8008350:	68bb      	ldr	r3, [r7, #8]
 8008352:	1ad3      	subs	r3, r2, r3
 8008354:	617b      	str	r3, [r7, #20]
 8008356:	693b      	ldr	r3, [r7, #16]
 8008358:	3304      	adds	r3, #4
 800835a:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800835c:	e7e9      	b.n	8008332 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800835e:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8008360:	693b      	ldr	r3, [r7, #16]
 8008362:	681a      	ldr	r2, [r3, #0]
 8008364:	697b      	ldr	r3, [r7, #20]
 8008366:	4413      	add	r3, r2
}
 8008368:	4618      	mov	r0, r3
 800836a:	371c      	adds	r7, #28
 800836c:	46bd      	mov	sp, r7
 800836e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008372:	4770      	bx	lr

08008374 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8008374:	b580      	push	{r7, lr}
 8008376:	b086      	sub	sp, #24
 8008378:	af00      	add	r7, sp, #0
 800837a:	6078      	str	r0, [r7, #4]
 800837c:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8008384:	683b      	ldr	r3, [r7, #0]
 8008386:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800838a:	d204      	bcs.n	8008396 <dir_sdi+0x22>
 800838c:	683b      	ldr	r3, [r7, #0]
 800838e:	f003 031f 	and.w	r3, r3, #31
 8008392:	2b00      	cmp	r3, #0
 8008394:	d001      	beq.n	800839a <dir_sdi+0x26>
		return FR_INT_ERR;
 8008396:	2302      	movs	r3, #2
 8008398:	e071      	b.n	800847e <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	683a      	ldr	r2, [r7, #0]
 800839e:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	689b      	ldr	r3, [r3, #8]
 80083a4:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80083a6:	697b      	ldr	r3, [r7, #20]
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d106      	bne.n	80083ba <dir_sdi+0x46>
 80083ac:	693b      	ldr	r3, [r7, #16]
 80083ae:	781b      	ldrb	r3, [r3, #0]
 80083b0:	2b02      	cmp	r3, #2
 80083b2:	d902      	bls.n	80083ba <dir_sdi+0x46>
		clst = fs->dirbase;
 80083b4:	693b      	ldr	r3, [r7, #16]
 80083b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083b8:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80083ba:	697b      	ldr	r3, [r7, #20]
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d10c      	bne.n	80083da <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80083c0:	683b      	ldr	r3, [r7, #0]
 80083c2:	095b      	lsrs	r3, r3, #5
 80083c4:	693a      	ldr	r2, [r7, #16]
 80083c6:	8912      	ldrh	r2, [r2, #8]
 80083c8:	4293      	cmp	r3, r2
 80083ca:	d301      	bcc.n	80083d0 <dir_sdi+0x5c>
 80083cc:	2302      	movs	r3, #2
 80083ce:	e056      	b.n	800847e <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 80083d0:	693b      	ldr	r3, [r7, #16]
 80083d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	61da      	str	r2, [r3, #28]
 80083d8:	e02d      	b.n	8008436 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80083da:	693b      	ldr	r3, [r7, #16]
 80083dc:	895b      	ldrh	r3, [r3, #10]
 80083de:	461a      	mov	r2, r3
 80083e0:	693b      	ldr	r3, [r7, #16]
 80083e2:	899b      	ldrh	r3, [r3, #12]
 80083e4:	fb02 f303 	mul.w	r3, r2, r3
 80083e8:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80083ea:	e019      	b.n	8008420 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	6979      	ldr	r1, [r7, #20]
 80083f0:	4618      	mov	r0, r3
 80083f2:	f7ff fc9a 	bl	8007d2a <get_fat>
 80083f6:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80083f8:	697b      	ldr	r3, [r7, #20]
 80083fa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80083fe:	d101      	bne.n	8008404 <dir_sdi+0x90>
 8008400:	2301      	movs	r3, #1
 8008402:	e03c      	b.n	800847e <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8008404:	697b      	ldr	r3, [r7, #20]
 8008406:	2b01      	cmp	r3, #1
 8008408:	d904      	bls.n	8008414 <dir_sdi+0xa0>
 800840a:	693b      	ldr	r3, [r7, #16]
 800840c:	69db      	ldr	r3, [r3, #28]
 800840e:	697a      	ldr	r2, [r7, #20]
 8008410:	429a      	cmp	r2, r3
 8008412:	d301      	bcc.n	8008418 <dir_sdi+0xa4>
 8008414:	2302      	movs	r3, #2
 8008416:	e032      	b.n	800847e <dir_sdi+0x10a>
			ofs -= csz;
 8008418:	683a      	ldr	r2, [r7, #0]
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	1ad3      	subs	r3, r2, r3
 800841e:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8008420:	683a      	ldr	r2, [r7, #0]
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	429a      	cmp	r2, r3
 8008426:	d2e1      	bcs.n	80083ec <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8008428:	6979      	ldr	r1, [r7, #20]
 800842a:	6938      	ldr	r0, [r7, #16]
 800842c:	f7ff fc5e 	bl	8007cec <clust2sect>
 8008430:	4602      	mov	r2, r0
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	697a      	ldr	r2, [r7, #20]
 800843a:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	69db      	ldr	r3, [r3, #28]
 8008440:	2b00      	cmp	r3, #0
 8008442:	d101      	bne.n	8008448 <dir_sdi+0xd4>
 8008444:	2302      	movs	r3, #2
 8008446:	e01a      	b.n	800847e <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	69da      	ldr	r2, [r3, #28]
 800844c:	693b      	ldr	r3, [r7, #16]
 800844e:	899b      	ldrh	r3, [r3, #12]
 8008450:	4619      	mov	r1, r3
 8008452:	683b      	ldr	r3, [r7, #0]
 8008454:	fbb3 f3f1 	udiv	r3, r3, r1
 8008458:	441a      	add	r2, r3
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800845e:	693b      	ldr	r3, [r7, #16]
 8008460:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008464:	693b      	ldr	r3, [r7, #16]
 8008466:	899b      	ldrh	r3, [r3, #12]
 8008468:	461a      	mov	r2, r3
 800846a:	683b      	ldr	r3, [r7, #0]
 800846c:	fbb3 f0f2 	udiv	r0, r3, r2
 8008470:	fb00 f202 	mul.w	r2, r0, r2
 8008474:	1a9b      	subs	r3, r3, r2
 8008476:	18ca      	adds	r2, r1, r3
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800847c:	2300      	movs	r3, #0
}
 800847e:	4618      	mov	r0, r3
 8008480:	3718      	adds	r7, #24
 8008482:	46bd      	mov	sp, r7
 8008484:	bd80      	pop	{r7, pc}

08008486 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8008486:	b580      	push	{r7, lr}
 8008488:	b086      	sub	sp, #24
 800848a:	af00      	add	r7, sp, #0
 800848c:	6078      	str	r0, [r7, #4]
 800848e:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	695b      	ldr	r3, [r3, #20]
 800849a:	3320      	adds	r3, #32
 800849c:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	69db      	ldr	r3, [r3, #28]
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d003      	beq.n	80084ae <dir_next+0x28>
 80084a6:	68bb      	ldr	r3, [r7, #8]
 80084a8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80084ac:	d301      	bcc.n	80084b2 <dir_next+0x2c>
 80084ae:	2304      	movs	r3, #4
 80084b0:	e0bb      	b.n	800862a <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	899b      	ldrh	r3, [r3, #12]
 80084b6:	461a      	mov	r2, r3
 80084b8:	68bb      	ldr	r3, [r7, #8]
 80084ba:	fbb3 f1f2 	udiv	r1, r3, r2
 80084be:	fb01 f202 	mul.w	r2, r1, r2
 80084c2:	1a9b      	subs	r3, r3, r2
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	f040 809d 	bne.w	8008604 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	69db      	ldr	r3, [r3, #28]
 80084ce:	1c5a      	adds	r2, r3, #1
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	699b      	ldr	r3, [r3, #24]
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d10b      	bne.n	80084f4 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80084dc:	68bb      	ldr	r3, [r7, #8]
 80084de:	095b      	lsrs	r3, r3, #5
 80084e0:	68fa      	ldr	r2, [r7, #12]
 80084e2:	8912      	ldrh	r2, [r2, #8]
 80084e4:	4293      	cmp	r3, r2
 80084e6:	f0c0 808d 	bcc.w	8008604 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	2200      	movs	r2, #0
 80084ee:	61da      	str	r2, [r3, #28]
 80084f0:	2304      	movs	r3, #4
 80084f2:	e09a      	b.n	800862a <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	899b      	ldrh	r3, [r3, #12]
 80084f8:	461a      	mov	r2, r3
 80084fa:	68bb      	ldr	r3, [r7, #8]
 80084fc:	fbb3 f3f2 	udiv	r3, r3, r2
 8008500:	68fa      	ldr	r2, [r7, #12]
 8008502:	8952      	ldrh	r2, [r2, #10]
 8008504:	3a01      	subs	r2, #1
 8008506:	4013      	ands	r3, r2
 8008508:	2b00      	cmp	r3, #0
 800850a:	d17b      	bne.n	8008604 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800850c:	687a      	ldr	r2, [r7, #4]
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	699b      	ldr	r3, [r3, #24]
 8008512:	4619      	mov	r1, r3
 8008514:	4610      	mov	r0, r2
 8008516:	f7ff fc08 	bl	8007d2a <get_fat>
 800851a:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800851c:	697b      	ldr	r3, [r7, #20]
 800851e:	2b01      	cmp	r3, #1
 8008520:	d801      	bhi.n	8008526 <dir_next+0xa0>
 8008522:	2302      	movs	r3, #2
 8008524:	e081      	b.n	800862a <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8008526:	697b      	ldr	r3, [r7, #20]
 8008528:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800852c:	d101      	bne.n	8008532 <dir_next+0xac>
 800852e:	2301      	movs	r3, #1
 8008530:	e07b      	b.n	800862a <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	69db      	ldr	r3, [r3, #28]
 8008536:	697a      	ldr	r2, [r7, #20]
 8008538:	429a      	cmp	r2, r3
 800853a:	d359      	bcc.n	80085f0 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800853c:	683b      	ldr	r3, [r7, #0]
 800853e:	2b00      	cmp	r3, #0
 8008540:	d104      	bne.n	800854c <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	2200      	movs	r2, #0
 8008546:	61da      	str	r2, [r3, #28]
 8008548:	2304      	movs	r3, #4
 800854a:	e06e      	b.n	800862a <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800854c:	687a      	ldr	r2, [r7, #4]
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	699b      	ldr	r3, [r3, #24]
 8008552:	4619      	mov	r1, r3
 8008554:	4610      	mov	r0, r2
 8008556:	f7ff fe3d 	bl	80081d4 <create_chain>
 800855a:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800855c:	697b      	ldr	r3, [r7, #20]
 800855e:	2b00      	cmp	r3, #0
 8008560:	d101      	bne.n	8008566 <dir_next+0xe0>
 8008562:	2307      	movs	r3, #7
 8008564:	e061      	b.n	800862a <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8008566:	697b      	ldr	r3, [r7, #20]
 8008568:	2b01      	cmp	r3, #1
 800856a:	d101      	bne.n	8008570 <dir_next+0xea>
 800856c:	2302      	movs	r3, #2
 800856e:	e05c      	b.n	800862a <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8008570:	697b      	ldr	r3, [r7, #20]
 8008572:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008576:	d101      	bne.n	800857c <dir_next+0xf6>
 8008578:	2301      	movs	r3, #1
 800857a:	e056      	b.n	800862a <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800857c:	68f8      	ldr	r0, [r7, #12]
 800857e:	f7ff fad3 	bl	8007b28 <sync_window>
 8008582:	4603      	mov	r3, r0
 8008584:	2b00      	cmp	r3, #0
 8008586:	d001      	beq.n	800858c <dir_next+0x106>
 8008588:	2301      	movs	r3, #1
 800858a:	e04e      	b.n	800862a <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	899b      	ldrh	r3, [r3, #12]
 8008596:	461a      	mov	r2, r3
 8008598:	2100      	movs	r1, #0
 800859a:	f7ff f8fc 	bl	8007796 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800859e:	2300      	movs	r3, #0
 80085a0:	613b      	str	r3, [r7, #16]
 80085a2:	6979      	ldr	r1, [r7, #20]
 80085a4:	68f8      	ldr	r0, [r7, #12]
 80085a6:	f7ff fba1 	bl	8007cec <clust2sect>
 80085aa:	4602      	mov	r2, r0
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	635a      	str	r2, [r3, #52]	; 0x34
 80085b0:	e012      	b.n	80085d8 <dir_next+0x152>
						fs->wflag = 1;
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	2201      	movs	r2, #1
 80085b6:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80085b8:	68f8      	ldr	r0, [r7, #12]
 80085ba:	f7ff fab5 	bl	8007b28 <sync_window>
 80085be:	4603      	mov	r3, r0
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d001      	beq.n	80085c8 <dir_next+0x142>
 80085c4:	2301      	movs	r3, #1
 80085c6:	e030      	b.n	800862a <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80085c8:	693b      	ldr	r3, [r7, #16]
 80085ca:	3301      	adds	r3, #1
 80085cc:	613b      	str	r3, [r7, #16]
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085d2:	1c5a      	adds	r2, r3, #1
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	635a      	str	r2, [r3, #52]	; 0x34
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	895b      	ldrh	r3, [r3, #10]
 80085dc:	461a      	mov	r2, r3
 80085de:	693b      	ldr	r3, [r7, #16]
 80085e0:	4293      	cmp	r3, r2
 80085e2:	d3e6      	bcc.n	80085b2 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80085e8:	693b      	ldr	r3, [r7, #16]
 80085ea:	1ad2      	subs	r2, r2, r3
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	697a      	ldr	r2, [r7, #20]
 80085f4:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80085f6:	6979      	ldr	r1, [r7, #20]
 80085f8:	68f8      	ldr	r0, [r7, #12]
 80085fa:	f7ff fb77 	bl	8007cec <clust2sect>
 80085fe:	4602      	mov	r2, r0
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	68ba      	ldr	r2, [r7, #8]
 8008608:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	899b      	ldrh	r3, [r3, #12]
 8008614:	461a      	mov	r2, r3
 8008616:	68bb      	ldr	r3, [r7, #8]
 8008618:	fbb3 f0f2 	udiv	r0, r3, r2
 800861c:	fb00 f202 	mul.w	r2, r0, r2
 8008620:	1a9b      	subs	r3, r3, r2
 8008622:	18ca      	adds	r2, r1, r3
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8008628:	2300      	movs	r3, #0
}
 800862a:	4618      	mov	r0, r3
 800862c:	3718      	adds	r7, #24
 800862e:	46bd      	mov	sp, r7
 8008630:	bd80      	pop	{r7, pc}

08008632 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8008632:	b580      	push	{r7, lr}
 8008634:	b086      	sub	sp, #24
 8008636:	af00      	add	r7, sp, #0
 8008638:	6078      	str	r0, [r7, #4]
 800863a:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8008642:	2100      	movs	r1, #0
 8008644:	6878      	ldr	r0, [r7, #4]
 8008646:	f7ff fe95 	bl	8008374 <dir_sdi>
 800864a:	4603      	mov	r3, r0
 800864c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800864e:	7dfb      	ldrb	r3, [r7, #23]
 8008650:	2b00      	cmp	r3, #0
 8008652:	d12b      	bne.n	80086ac <dir_alloc+0x7a>
		n = 0;
 8008654:	2300      	movs	r3, #0
 8008656:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	69db      	ldr	r3, [r3, #28]
 800865c:	4619      	mov	r1, r3
 800865e:	68f8      	ldr	r0, [r7, #12]
 8008660:	f7ff faa6 	bl	8007bb0 <move_window>
 8008664:	4603      	mov	r3, r0
 8008666:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8008668:	7dfb      	ldrb	r3, [r7, #23]
 800866a:	2b00      	cmp	r3, #0
 800866c:	d11d      	bne.n	80086aa <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	6a1b      	ldr	r3, [r3, #32]
 8008672:	781b      	ldrb	r3, [r3, #0]
 8008674:	2be5      	cmp	r3, #229	; 0xe5
 8008676:	d004      	beq.n	8008682 <dir_alloc+0x50>
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	6a1b      	ldr	r3, [r3, #32]
 800867c:	781b      	ldrb	r3, [r3, #0]
 800867e:	2b00      	cmp	r3, #0
 8008680:	d107      	bne.n	8008692 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8008682:	693b      	ldr	r3, [r7, #16]
 8008684:	3301      	adds	r3, #1
 8008686:	613b      	str	r3, [r7, #16]
 8008688:	693a      	ldr	r2, [r7, #16]
 800868a:	683b      	ldr	r3, [r7, #0]
 800868c:	429a      	cmp	r2, r3
 800868e:	d102      	bne.n	8008696 <dir_alloc+0x64>
 8008690:	e00c      	b.n	80086ac <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8008692:	2300      	movs	r3, #0
 8008694:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8008696:	2101      	movs	r1, #1
 8008698:	6878      	ldr	r0, [r7, #4]
 800869a:	f7ff fef4 	bl	8008486 <dir_next>
 800869e:	4603      	mov	r3, r0
 80086a0:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80086a2:	7dfb      	ldrb	r3, [r7, #23]
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d0d7      	beq.n	8008658 <dir_alloc+0x26>
 80086a8:	e000      	b.n	80086ac <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80086aa:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80086ac:	7dfb      	ldrb	r3, [r7, #23]
 80086ae:	2b04      	cmp	r3, #4
 80086b0:	d101      	bne.n	80086b6 <dir_alloc+0x84>
 80086b2:	2307      	movs	r3, #7
 80086b4:	75fb      	strb	r3, [r7, #23]
	return res;
 80086b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80086b8:	4618      	mov	r0, r3
 80086ba:	3718      	adds	r7, #24
 80086bc:	46bd      	mov	sp, r7
 80086be:	bd80      	pop	{r7, pc}

080086c0 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80086c0:	b580      	push	{r7, lr}
 80086c2:	b084      	sub	sp, #16
 80086c4:	af00      	add	r7, sp, #0
 80086c6:	6078      	str	r0, [r7, #4]
 80086c8:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80086ca:	683b      	ldr	r3, [r7, #0]
 80086cc:	331a      	adds	r3, #26
 80086ce:	4618      	mov	r0, r3
 80086d0:	f7fe ffbe 	bl	8007650 <ld_word>
 80086d4:	4603      	mov	r3, r0
 80086d6:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	781b      	ldrb	r3, [r3, #0]
 80086dc:	2b03      	cmp	r3, #3
 80086de:	d109      	bne.n	80086f4 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80086e0:	683b      	ldr	r3, [r7, #0]
 80086e2:	3314      	adds	r3, #20
 80086e4:	4618      	mov	r0, r3
 80086e6:	f7fe ffb3 	bl	8007650 <ld_word>
 80086ea:	4603      	mov	r3, r0
 80086ec:	041b      	lsls	r3, r3, #16
 80086ee:	68fa      	ldr	r2, [r7, #12]
 80086f0:	4313      	orrs	r3, r2
 80086f2:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80086f4:	68fb      	ldr	r3, [r7, #12]
}
 80086f6:	4618      	mov	r0, r3
 80086f8:	3710      	adds	r7, #16
 80086fa:	46bd      	mov	sp, r7
 80086fc:	bd80      	pop	{r7, pc}

080086fe <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80086fe:	b580      	push	{r7, lr}
 8008700:	b084      	sub	sp, #16
 8008702:	af00      	add	r7, sp, #0
 8008704:	60f8      	str	r0, [r7, #12]
 8008706:	60b9      	str	r1, [r7, #8]
 8008708:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800870a:	68bb      	ldr	r3, [r7, #8]
 800870c:	331a      	adds	r3, #26
 800870e:	687a      	ldr	r2, [r7, #4]
 8008710:	b292      	uxth	r2, r2
 8008712:	4611      	mov	r1, r2
 8008714:	4618      	mov	r0, r3
 8008716:	f7fe ffd6 	bl	80076c6 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	781b      	ldrb	r3, [r3, #0]
 800871e:	2b03      	cmp	r3, #3
 8008720:	d109      	bne.n	8008736 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8008722:	68bb      	ldr	r3, [r7, #8]
 8008724:	f103 0214 	add.w	r2, r3, #20
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	0c1b      	lsrs	r3, r3, #16
 800872c:	b29b      	uxth	r3, r3
 800872e:	4619      	mov	r1, r3
 8008730:	4610      	mov	r0, r2
 8008732:	f7fe ffc8 	bl	80076c6 <st_word>
	}
}
 8008736:	bf00      	nop
 8008738:	3710      	adds	r7, #16
 800873a:	46bd      	mov	sp, r7
 800873c:	bd80      	pop	{r7, pc}
	...

08008740 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8008740:	b590      	push	{r4, r7, lr}
 8008742:	b087      	sub	sp, #28
 8008744:	af00      	add	r7, sp, #0
 8008746:	6078      	str	r0, [r7, #4]
 8008748:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800874a:	683b      	ldr	r3, [r7, #0]
 800874c:	331a      	adds	r3, #26
 800874e:	4618      	mov	r0, r3
 8008750:	f7fe ff7e 	bl	8007650 <ld_word>
 8008754:	4603      	mov	r3, r0
 8008756:	2b00      	cmp	r3, #0
 8008758:	d001      	beq.n	800875e <cmp_lfn+0x1e>
 800875a:	2300      	movs	r3, #0
 800875c:	e059      	b.n	8008812 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800875e:	683b      	ldr	r3, [r7, #0]
 8008760:	781b      	ldrb	r3, [r3, #0]
 8008762:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008766:	1e5a      	subs	r2, r3, #1
 8008768:	4613      	mov	r3, r2
 800876a:	005b      	lsls	r3, r3, #1
 800876c:	4413      	add	r3, r2
 800876e:	009b      	lsls	r3, r3, #2
 8008770:	4413      	add	r3, r2
 8008772:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8008774:	2301      	movs	r3, #1
 8008776:	81fb      	strh	r3, [r7, #14]
 8008778:	2300      	movs	r3, #0
 800877a:	613b      	str	r3, [r7, #16]
 800877c:	e033      	b.n	80087e6 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800877e:	4a27      	ldr	r2, [pc, #156]	; (800881c <cmp_lfn+0xdc>)
 8008780:	693b      	ldr	r3, [r7, #16]
 8008782:	4413      	add	r3, r2
 8008784:	781b      	ldrb	r3, [r3, #0]
 8008786:	461a      	mov	r2, r3
 8008788:	683b      	ldr	r3, [r7, #0]
 800878a:	4413      	add	r3, r2
 800878c:	4618      	mov	r0, r3
 800878e:	f7fe ff5f 	bl	8007650 <ld_word>
 8008792:	4603      	mov	r3, r0
 8008794:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8008796:	89fb      	ldrh	r3, [r7, #14]
 8008798:	2b00      	cmp	r3, #0
 800879a:	d01a      	beq.n	80087d2 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800879c:	697b      	ldr	r3, [r7, #20]
 800879e:	2bfe      	cmp	r3, #254	; 0xfe
 80087a0:	d812      	bhi.n	80087c8 <cmp_lfn+0x88>
 80087a2:	89bb      	ldrh	r3, [r7, #12]
 80087a4:	4618      	mov	r0, r3
 80087a6:	f002 f999 	bl	800aadc <ff_wtoupper>
 80087aa:	4603      	mov	r3, r0
 80087ac:	461c      	mov	r4, r3
 80087ae:	697b      	ldr	r3, [r7, #20]
 80087b0:	1c5a      	adds	r2, r3, #1
 80087b2:	617a      	str	r2, [r7, #20]
 80087b4:	005b      	lsls	r3, r3, #1
 80087b6:	687a      	ldr	r2, [r7, #4]
 80087b8:	4413      	add	r3, r2
 80087ba:	881b      	ldrh	r3, [r3, #0]
 80087bc:	4618      	mov	r0, r3
 80087be:	f002 f98d 	bl	800aadc <ff_wtoupper>
 80087c2:	4603      	mov	r3, r0
 80087c4:	429c      	cmp	r4, r3
 80087c6:	d001      	beq.n	80087cc <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 80087c8:	2300      	movs	r3, #0
 80087ca:	e022      	b.n	8008812 <cmp_lfn+0xd2>
			}
			wc = uc;
 80087cc:	89bb      	ldrh	r3, [r7, #12]
 80087ce:	81fb      	strh	r3, [r7, #14]
 80087d0:	e006      	b.n	80087e0 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 80087d2:	89bb      	ldrh	r3, [r7, #12]
 80087d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80087d8:	4293      	cmp	r3, r2
 80087da:	d001      	beq.n	80087e0 <cmp_lfn+0xa0>
 80087dc:	2300      	movs	r3, #0
 80087de:	e018      	b.n	8008812 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80087e0:	693b      	ldr	r3, [r7, #16]
 80087e2:	3301      	adds	r3, #1
 80087e4:	613b      	str	r3, [r7, #16]
 80087e6:	693b      	ldr	r3, [r7, #16]
 80087e8:	2b0c      	cmp	r3, #12
 80087ea:	d9c8      	bls.n	800877e <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 80087ec:	683b      	ldr	r3, [r7, #0]
 80087ee:	781b      	ldrb	r3, [r3, #0]
 80087f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d00b      	beq.n	8008810 <cmp_lfn+0xd0>
 80087f8:	89fb      	ldrh	r3, [r7, #14]
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d008      	beq.n	8008810 <cmp_lfn+0xd0>
 80087fe:	697b      	ldr	r3, [r7, #20]
 8008800:	005b      	lsls	r3, r3, #1
 8008802:	687a      	ldr	r2, [r7, #4]
 8008804:	4413      	add	r3, r2
 8008806:	881b      	ldrh	r3, [r3, #0]
 8008808:	2b00      	cmp	r3, #0
 800880a:	d001      	beq.n	8008810 <cmp_lfn+0xd0>
 800880c:	2300      	movs	r3, #0
 800880e:	e000      	b.n	8008812 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8008810:	2301      	movs	r3, #1
}
 8008812:	4618      	mov	r0, r3
 8008814:	371c      	adds	r7, #28
 8008816:	46bd      	mov	sp, r7
 8008818:	bd90      	pop	{r4, r7, pc}
 800881a:	bf00      	nop
 800881c:	0800dd20 	.word	0x0800dd20

08008820 <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 8008820:	b580      	push	{r7, lr}
 8008822:	b086      	sub	sp, #24
 8008824:	af00      	add	r7, sp, #0
 8008826:	6078      	str	r0, [r7, #4]
 8008828:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 800882a:	683b      	ldr	r3, [r7, #0]
 800882c:	331a      	adds	r3, #26
 800882e:	4618      	mov	r0, r3
 8008830:	f7fe ff0e 	bl	8007650 <ld_word>
 8008834:	4603      	mov	r3, r0
 8008836:	2b00      	cmp	r3, #0
 8008838:	d001      	beq.n	800883e <pick_lfn+0x1e>
 800883a:	2300      	movs	r3, #0
 800883c:	e04d      	b.n	80088da <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 800883e:	683b      	ldr	r3, [r7, #0]
 8008840:	781b      	ldrb	r3, [r3, #0]
 8008842:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008846:	1e5a      	subs	r2, r3, #1
 8008848:	4613      	mov	r3, r2
 800884a:	005b      	lsls	r3, r3, #1
 800884c:	4413      	add	r3, r2
 800884e:	009b      	lsls	r3, r3, #2
 8008850:	4413      	add	r3, r2
 8008852:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8008854:	2301      	movs	r3, #1
 8008856:	81fb      	strh	r3, [r7, #14]
 8008858:	2300      	movs	r3, #0
 800885a:	613b      	str	r3, [r7, #16]
 800885c:	e028      	b.n	80088b0 <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800885e:	4a21      	ldr	r2, [pc, #132]	; (80088e4 <pick_lfn+0xc4>)
 8008860:	693b      	ldr	r3, [r7, #16]
 8008862:	4413      	add	r3, r2
 8008864:	781b      	ldrb	r3, [r3, #0]
 8008866:	461a      	mov	r2, r3
 8008868:	683b      	ldr	r3, [r7, #0]
 800886a:	4413      	add	r3, r2
 800886c:	4618      	mov	r0, r3
 800886e:	f7fe feef 	bl	8007650 <ld_word>
 8008872:	4603      	mov	r3, r0
 8008874:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8008876:	89fb      	ldrh	r3, [r7, #14]
 8008878:	2b00      	cmp	r3, #0
 800887a:	d00f      	beq.n	800889c <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800887c:	697b      	ldr	r3, [r7, #20]
 800887e:	2bfe      	cmp	r3, #254	; 0xfe
 8008880:	d901      	bls.n	8008886 <pick_lfn+0x66>
 8008882:	2300      	movs	r3, #0
 8008884:	e029      	b.n	80088da <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 8008886:	89bb      	ldrh	r3, [r7, #12]
 8008888:	81fb      	strh	r3, [r7, #14]
 800888a:	697b      	ldr	r3, [r7, #20]
 800888c:	1c5a      	adds	r2, r3, #1
 800888e:	617a      	str	r2, [r7, #20]
 8008890:	005b      	lsls	r3, r3, #1
 8008892:	687a      	ldr	r2, [r7, #4]
 8008894:	4413      	add	r3, r2
 8008896:	89fa      	ldrh	r2, [r7, #14]
 8008898:	801a      	strh	r2, [r3, #0]
 800889a:	e006      	b.n	80088aa <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800889c:	89bb      	ldrh	r3, [r7, #12]
 800889e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80088a2:	4293      	cmp	r3, r2
 80088a4:	d001      	beq.n	80088aa <pick_lfn+0x8a>
 80088a6:	2300      	movs	r3, #0
 80088a8:	e017      	b.n	80088da <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80088aa:	693b      	ldr	r3, [r7, #16]
 80088ac:	3301      	adds	r3, #1
 80088ae:	613b      	str	r3, [r7, #16]
 80088b0:	693b      	ldr	r3, [r7, #16]
 80088b2:	2b0c      	cmp	r3, #12
 80088b4:	d9d3      	bls.n	800885e <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 80088b6:	683b      	ldr	r3, [r7, #0]
 80088b8:	781b      	ldrb	r3, [r3, #0]
 80088ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d00a      	beq.n	80088d8 <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 80088c2:	697b      	ldr	r3, [r7, #20]
 80088c4:	2bfe      	cmp	r3, #254	; 0xfe
 80088c6:	d901      	bls.n	80088cc <pick_lfn+0xac>
 80088c8:	2300      	movs	r3, #0
 80088ca:	e006      	b.n	80088da <pick_lfn+0xba>
		lfnbuf[i] = 0;
 80088cc:	697b      	ldr	r3, [r7, #20]
 80088ce:	005b      	lsls	r3, r3, #1
 80088d0:	687a      	ldr	r2, [r7, #4]
 80088d2:	4413      	add	r3, r2
 80088d4:	2200      	movs	r2, #0
 80088d6:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 80088d8:	2301      	movs	r3, #1
}
 80088da:	4618      	mov	r0, r3
 80088dc:	3718      	adds	r7, #24
 80088de:	46bd      	mov	sp, r7
 80088e0:	bd80      	pop	{r7, pc}
 80088e2:	bf00      	nop
 80088e4:	0800dd20 	.word	0x0800dd20

080088e8 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 80088e8:	b580      	push	{r7, lr}
 80088ea:	b088      	sub	sp, #32
 80088ec:	af00      	add	r7, sp, #0
 80088ee:	60f8      	str	r0, [r7, #12]
 80088f0:	60b9      	str	r1, [r7, #8]
 80088f2:	4611      	mov	r1, r2
 80088f4:	461a      	mov	r2, r3
 80088f6:	460b      	mov	r3, r1
 80088f8:	71fb      	strb	r3, [r7, #7]
 80088fa:	4613      	mov	r3, r2
 80088fc:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 80088fe:	68bb      	ldr	r3, [r7, #8]
 8008900:	330d      	adds	r3, #13
 8008902:	79ba      	ldrb	r2, [r7, #6]
 8008904:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8008906:	68bb      	ldr	r3, [r7, #8]
 8008908:	330b      	adds	r3, #11
 800890a:	220f      	movs	r2, #15
 800890c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800890e:	68bb      	ldr	r3, [r7, #8]
 8008910:	330c      	adds	r3, #12
 8008912:	2200      	movs	r2, #0
 8008914:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8008916:	68bb      	ldr	r3, [r7, #8]
 8008918:	331a      	adds	r3, #26
 800891a:	2100      	movs	r1, #0
 800891c:	4618      	mov	r0, r3
 800891e:	f7fe fed2 	bl	80076c6 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8008922:	79fb      	ldrb	r3, [r7, #7]
 8008924:	1e5a      	subs	r2, r3, #1
 8008926:	4613      	mov	r3, r2
 8008928:	005b      	lsls	r3, r3, #1
 800892a:	4413      	add	r3, r2
 800892c:	009b      	lsls	r3, r3, #2
 800892e:	4413      	add	r3, r2
 8008930:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8008932:	2300      	movs	r3, #0
 8008934:	82fb      	strh	r3, [r7, #22]
 8008936:	2300      	movs	r3, #0
 8008938:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800893a:	8afb      	ldrh	r3, [r7, #22]
 800893c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008940:	4293      	cmp	r3, r2
 8008942:	d007      	beq.n	8008954 <put_lfn+0x6c>
 8008944:	69fb      	ldr	r3, [r7, #28]
 8008946:	1c5a      	adds	r2, r3, #1
 8008948:	61fa      	str	r2, [r7, #28]
 800894a:	005b      	lsls	r3, r3, #1
 800894c:	68fa      	ldr	r2, [r7, #12]
 800894e:	4413      	add	r3, r2
 8008950:	881b      	ldrh	r3, [r3, #0]
 8008952:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8008954:	4a17      	ldr	r2, [pc, #92]	; (80089b4 <put_lfn+0xcc>)
 8008956:	69bb      	ldr	r3, [r7, #24]
 8008958:	4413      	add	r3, r2
 800895a:	781b      	ldrb	r3, [r3, #0]
 800895c:	461a      	mov	r2, r3
 800895e:	68bb      	ldr	r3, [r7, #8]
 8008960:	4413      	add	r3, r2
 8008962:	8afa      	ldrh	r2, [r7, #22]
 8008964:	4611      	mov	r1, r2
 8008966:	4618      	mov	r0, r3
 8008968:	f7fe fead 	bl	80076c6 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800896c:	8afb      	ldrh	r3, [r7, #22]
 800896e:	2b00      	cmp	r3, #0
 8008970:	d102      	bne.n	8008978 <put_lfn+0x90>
 8008972:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008976:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8008978:	69bb      	ldr	r3, [r7, #24]
 800897a:	3301      	adds	r3, #1
 800897c:	61bb      	str	r3, [r7, #24]
 800897e:	69bb      	ldr	r3, [r7, #24]
 8008980:	2b0c      	cmp	r3, #12
 8008982:	d9da      	bls.n	800893a <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8008984:	8afb      	ldrh	r3, [r7, #22]
 8008986:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800898a:	4293      	cmp	r3, r2
 800898c:	d006      	beq.n	800899c <put_lfn+0xb4>
 800898e:	69fb      	ldr	r3, [r7, #28]
 8008990:	005b      	lsls	r3, r3, #1
 8008992:	68fa      	ldr	r2, [r7, #12]
 8008994:	4413      	add	r3, r2
 8008996:	881b      	ldrh	r3, [r3, #0]
 8008998:	2b00      	cmp	r3, #0
 800899a:	d103      	bne.n	80089a4 <put_lfn+0xbc>
 800899c:	79fb      	ldrb	r3, [r7, #7]
 800899e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80089a2:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 80089a4:	68bb      	ldr	r3, [r7, #8]
 80089a6:	79fa      	ldrb	r2, [r7, #7]
 80089a8:	701a      	strb	r2, [r3, #0]
}
 80089aa:	bf00      	nop
 80089ac:	3720      	adds	r7, #32
 80089ae:	46bd      	mov	sp, r7
 80089b0:	bd80      	pop	{r7, pc}
 80089b2:	bf00      	nop
 80089b4:	0800dd20 	.word	0x0800dd20

080089b8 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 80089b8:	b580      	push	{r7, lr}
 80089ba:	b08c      	sub	sp, #48	; 0x30
 80089bc:	af00      	add	r7, sp, #0
 80089be:	60f8      	str	r0, [r7, #12]
 80089c0:	60b9      	str	r1, [r7, #8]
 80089c2:	607a      	str	r2, [r7, #4]
 80089c4:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 80089c6:	220b      	movs	r2, #11
 80089c8:	68b9      	ldr	r1, [r7, #8]
 80089ca:	68f8      	ldr	r0, [r7, #12]
 80089cc:	f7fe fec2 	bl	8007754 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 80089d0:	683b      	ldr	r3, [r7, #0]
 80089d2:	2b05      	cmp	r3, #5
 80089d4:	d92b      	bls.n	8008a2e <gen_numname+0x76>
		sr = seq;
 80089d6:	683b      	ldr	r3, [r7, #0]
 80089d8:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 80089da:	e022      	b.n	8008a22 <gen_numname+0x6a>
			wc = *lfn++;
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	1c9a      	adds	r2, r3, #2
 80089e0:	607a      	str	r2, [r7, #4]
 80089e2:	881b      	ldrh	r3, [r3, #0]
 80089e4:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 80089e6:	2300      	movs	r3, #0
 80089e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80089ea:	e017      	b.n	8008a1c <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 80089ec:	69fb      	ldr	r3, [r7, #28]
 80089ee:	005a      	lsls	r2, r3, #1
 80089f0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80089f2:	f003 0301 	and.w	r3, r3, #1
 80089f6:	4413      	add	r3, r2
 80089f8:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 80089fa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80089fc:	085b      	lsrs	r3, r3, #1
 80089fe:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8008a00:	69fb      	ldr	r3, [r7, #28]
 8008a02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d005      	beq.n	8008a16 <gen_numname+0x5e>
 8008a0a:	69fb      	ldr	r3, [r7, #28]
 8008a0c:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 8008a10:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 8008a14:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8008a16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a18:	3301      	adds	r3, #1
 8008a1a:	62bb      	str	r3, [r7, #40]	; 0x28
 8008a1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a1e:	2b0f      	cmp	r3, #15
 8008a20:	d9e4      	bls.n	80089ec <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	881b      	ldrh	r3, [r3, #0]
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d1d8      	bne.n	80089dc <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8008a2a:	69fb      	ldr	r3, [r7, #28]
 8008a2c:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8008a2e:	2307      	movs	r3, #7
 8008a30:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8008a32:	683b      	ldr	r3, [r7, #0]
 8008a34:	b2db      	uxtb	r3, r3
 8008a36:	f003 030f 	and.w	r3, r3, #15
 8008a3a:	b2db      	uxtb	r3, r3
 8008a3c:	3330      	adds	r3, #48	; 0x30
 8008a3e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 8008a42:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008a46:	2b39      	cmp	r3, #57	; 0x39
 8008a48:	d904      	bls.n	8008a54 <gen_numname+0x9c>
 8008a4a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008a4e:	3307      	adds	r3, #7
 8008a50:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8008a54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a56:	1e5a      	subs	r2, r3, #1
 8008a58:	62ba      	str	r2, [r7, #40]	; 0x28
 8008a5a:	3330      	adds	r3, #48	; 0x30
 8008a5c:	443b      	add	r3, r7
 8008a5e:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8008a62:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8008a66:	683b      	ldr	r3, [r7, #0]
 8008a68:	091b      	lsrs	r3, r3, #4
 8008a6a:	603b      	str	r3, [r7, #0]
	} while (seq);
 8008a6c:	683b      	ldr	r3, [r7, #0]
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d1df      	bne.n	8008a32 <gen_numname+0x7a>
	ns[i] = '~';
 8008a72:	f107 0214 	add.w	r2, r7, #20
 8008a76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a78:	4413      	add	r3, r2
 8008a7a:	227e      	movs	r2, #126	; 0x7e
 8008a7c:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8008a7e:	2300      	movs	r3, #0
 8008a80:	627b      	str	r3, [r7, #36]	; 0x24
 8008a82:	e002      	b.n	8008a8a <gen_numname+0xd2>
 8008a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a86:	3301      	adds	r3, #1
 8008a88:	627b      	str	r3, [r7, #36]	; 0x24
 8008a8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a8e:	429a      	cmp	r2, r3
 8008a90:	d205      	bcs.n	8008a9e <gen_numname+0xe6>
 8008a92:	68fa      	ldr	r2, [r7, #12]
 8008a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a96:	4413      	add	r3, r2
 8008a98:	781b      	ldrb	r3, [r3, #0]
 8008a9a:	2b20      	cmp	r3, #32
 8008a9c:	d1f2      	bne.n	8008a84 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8008a9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008aa0:	2b07      	cmp	r3, #7
 8008aa2:	d807      	bhi.n	8008ab4 <gen_numname+0xfc>
 8008aa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008aa6:	1c5a      	adds	r2, r3, #1
 8008aa8:	62ba      	str	r2, [r7, #40]	; 0x28
 8008aaa:	3330      	adds	r3, #48	; 0x30
 8008aac:	443b      	add	r3, r7
 8008aae:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8008ab2:	e000      	b.n	8008ab6 <gen_numname+0xfe>
 8008ab4:	2120      	movs	r1, #32
 8008ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ab8:	1c5a      	adds	r2, r3, #1
 8008aba:	627a      	str	r2, [r7, #36]	; 0x24
 8008abc:	68fa      	ldr	r2, [r7, #12]
 8008abe:	4413      	add	r3, r2
 8008ac0:	460a      	mov	r2, r1
 8008ac2:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8008ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ac6:	2b07      	cmp	r3, #7
 8008ac8:	d9e9      	bls.n	8008a9e <gen_numname+0xe6>
}
 8008aca:	bf00      	nop
 8008acc:	bf00      	nop
 8008ace:	3730      	adds	r7, #48	; 0x30
 8008ad0:	46bd      	mov	sp, r7
 8008ad2:	bd80      	pop	{r7, pc}

08008ad4 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8008ad4:	b480      	push	{r7}
 8008ad6:	b085      	sub	sp, #20
 8008ad8:	af00      	add	r7, sp, #0
 8008ada:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8008adc:	2300      	movs	r3, #0
 8008ade:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8008ae0:	230b      	movs	r3, #11
 8008ae2:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8008ae4:	7bfb      	ldrb	r3, [r7, #15]
 8008ae6:	b2da      	uxtb	r2, r3
 8008ae8:	0852      	lsrs	r2, r2, #1
 8008aea:	01db      	lsls	r3, r3, #7
 8008aec:	4313      	orrs	r3, r2
 8008aee:	b2da      	uxtb	r2, r3
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	1c59      	adds	r1, r3, #1
 8008af4:	6079      	str	r1, [r7, #4]
 8008af6:	781b      	ldrb	r3, [r3, #0]
 8008af8:	4413      	add	r3, r2
 8008afa:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8008afc:	68bb      	ldr	r3, [r7, #8]
 8008afe:	3b01      	subs	r3, #1
 8008b00:	60bb      	str	r3, [r7, #8]
 8008b02:	68bb      	ldr	r3, [r7, #8]
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d1ed      	bne.n	8008ae4 <sum_sfn+0x10>
	return sum;
 8008b08:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b0a:	4618      	mov	r0, r3
 8008b0c:	3714      	adds	r7, #20
 8008b0e:	46bd      	mov	sp, r7
 8008b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b14:	4770      	bx	lr

08008b16 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 8008b16:	b580      	push	{r7, lr}
 8008b18:	b086      	sub	sp, #24
 8008b1a:	af00      	add	r7, sp, #0
 8008b1c:	6078      	str	r0, [r7, #4]
 8008b1e:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 8008b20:	2304      	movs	r3, #4
 8008b22:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 8008b2a:	23ff      	movs	r3, #255	; 0xff
 8008b2c:	757b      	strb	r3, [r7, #21]
 8008b2e:	23ff      	movs	r3, #255	; 0xff
 8008b30:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 8008b32:	e081      	b.n	8008c38 <dir_read+0x122>
		res = move_window(fs, dp->sect);
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	69db      	ldr	r3, [r3, #28]
 8008b38:	4619      	mov	r1, r3
 8008b3a:	6938      	ldr	r0, [r7, #16]
 8008b3c:	f7ff f838 	bl	8007bb0 <move_window>
 8008b40:	4603      	mov	r3, r0
 8008b42:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8008b44:	7dfb      	ldrb	r3, [r7, #23]
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d17c      	bne.n	8008c44 <dir_read+0x12e>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	6a1b      	ldr	r3, [r3, #32]
 8008b4e:	781b      	ldrb	r3, [r3, #0]
 8008b50:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 8008b52:	7dbb      	ldrb	r3, [r7, #22]
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d102      	bne.n	8008b5e <dir_read+0x48>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 8008b58:	2304      	movs	r3, #4
 8008b5a:	75fb      	strb	r3, [r7, #23]
 8008b5c:	e077      	b.n	8008c4e <dir_read+0x138>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	6a1b      	ldr	r3, [r3, #32]
 8008b62:	330b      	adds	r3, #11
 8008b64:	781b      	ldrb	r3, [r3, #0]
 8008b66:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008b6a:	73fb      	strb	r3, [r7, #15]
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	7bfa      	ldrb	r2, [r7, #15]
 8008b70:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 8008b72:	7dbb      	ldrb	r3, [r7, #22]
 8008b74:	2be5      	cmp	r3, #229	; 0xe5
 8008b76:	d00e      	beq.n	8008b96 <dir_read+0x80>
 8008b78:	7dbb      	ldrb	r3, [r7, #22]
 8008b7a:	2b2e      	cmp	r3, #46	; 0x2e
 8008b7c:	d00b      	beq.n	8008b96 <dir_read+0x80>
 8008b7e:	7bfb      	ldrb	r3, [r7, #15]
 8008b80:	f023 0320 	bic.w	r3, r3, #32
 8008b84:	2b08      	cmp	r3, #8
 8008b86:	bf0c      	ite	eq
 8008b88:	2301      	moveq	r3, #1
 8008b8a:	2300      	movne	r3, #0
 8008b8c:	b2db      	uxtb	r3, r3
 8008b8e:	461a      	mov	r2, r3
 8008b90:	683b      	ldr	r3, [r7, #0]
 8008b92:	4293      	cmp	r3, r2
 8008b94:	d002      	beq.n	8008b9c <dir_read+0x86>
				ord = 0xFF;
 8008b96:	23ff      	movs	r3, #255	; 0xff
 8008b98:	757b      	strb	r3, [r7, #21]
 8008b9a:	e044      	b.n	8008c26 <dir_read+0x110>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 8008b9c:	7bfb      	ldrb	r3, [r7, #15]
 8008b9e:	2b0f      	cmp	r3, #15
 8008ba0:	d12f      	bne.n	8008c02 <dir_read+0xec>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 8008ba2:	7dbb      	ldrb	r3, [r7, #22]
 8008ba4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d00d      	beq.n	8008bc8 <dir_read+0xb2>
						sum = dp->dir[LDIR_Chksum];
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	6a1b      	ldr	r3, [r3, #32]
 8008bb0:	7b5b      	ldrb	r3, [r3, #13]
 8008bb2:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 8008bb4:	7dbb      	ldrb	r3, [r7, #22]
 8008bb6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008bba:	75bb      	strb	r3, [r7, #22]
 8008bbc:	7dbb      	ldrb	r3, [r7, #22]
 8008bbe:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	695a      	ldr	r2, [r3, #20]
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8008bc8:	7dba      	ldrb	r2, [r7, #22]
 8008bca:	7d7b      	ldrb	r3, [r7, #21]
 8008bcc:	429a      	cmp	r2, r3
 8008bce:	d115      	bne.n	8008bfc <dir_read+0xe6>
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	6a1b      	ldr	r3, [r3, #32]
 8008bd4:	330d      	adds	r3, #13
 8008bd6:	781b      	ldrb	r3, [r3, #0]
 8008bd8:	7d3a      	ldrb	r2, [r7, #20]
 8008bda:	429a      	cmp	r2, r3
 8008bdc:	d10e      	bne.n	8008bfc <dir_read+0xe6>
 8008bde:	693b      	ldr	r3, [r7, #16]
 8008be0:	691a      	ldr	r2, [r3, #16]
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	6a1b      	ldr	r3, [r3, #32]
 8008be6:	4619      	mov	r1, r3
 8008be8:	4610      	mov	r0, r2
 8008bea:	f7ff fe19 	bl	8008820 <pick_lfn>
 8008bee:	4603      	mov	r3, r0
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d003      	beq.n	8008bfc <dir_read+0xe6>
 8008bf4:	7d7b      	ldrb	r3, [r7, #21]
 8008bf6:	3b01      	subs	r3, #1
 8008bf8:	b2db      	uxtb	r3, r3
 8008bfa:	e000      	b.n	8008bfe <dir_read+0xe8>
 8008bfc:	23ff      	movs	r3, #255	; 0xff
 8008bfe:	757b      	strb	r3, [r7, #21]
 8008c00:	e011      	b.n	8008c26 <dir_read+0x110>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 8008c02:	7d7b      	ldrb	r3, [r7, #21]
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d109      	bne.n	8008c1c <dir_read+0x106>
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	6a1b      	ldr	r3, [r3, #32]
 8008c0c:	4618      	mov	r0, r3
 8008c0e:	f7ff ff61 	bl	8008ad4 <sum_sfn>
 8008c12:	4603      	mov	r3, r0
 8008c14:	461a      	mov	r2, r3
 8008c16:	7d3b      	ldrb	r3, [r7, #20]
 8008c18:	4293      	cmp	r3, r2
 8008c1a:	d015      	beq.n	8008c48 <dir_read+0x132>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008c22:	631a      	str	r2, [r3, #48]	; 0x30
					}
					break;
 8008c24:	e010      	b.n	8008c48 <dir_read+0x132>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 8008c26:	2100      	movs	r1, #0
 8008c28:	6878      	ldr	r0, [r7, #4]
 8008c2a:	f7ff fc2c 	bl	8008486 <dir_next>
 8008c2e:	4603      	mov	r3, r0
 8008c30:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8008c32:	7dfb      	ldrb	r3, [r7, #23]
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d109      	bne.n	8008c4c <dir_read+0x136>
	while (dp->sect) {
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	69db      	ldr	r3, [r3, #28]
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	f47f af79 	bne.w	8008b34 <dir_read+0x1e>
 8008c42:	e004      	b.n	8008c4e <dir_read+0x138>
		if (res != FR_OK) break;
 8008c44:	bf00      	nop
 8008c46:	e002      	b.n	8008c4e <dir_read+0x138>
					break;
 8008c48:	bf00      	nop
 8008c4a:	e000      	b.n	8008c4e <dir_read+0x138>
		if (res != FR_OK) break;
 8008c4c:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8008c4e:	7dfb      	ldrb	r3, [r7, #23]
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d002      	beq.n	8008c5a <dir_read+0x144>
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	2200      	movs	r2, #0
 8008c58:	61da      	str	r2, [r3, #28]
	return res;
 8008c5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c5c:	4618      	mov	r0, r3
 8008c5e:	3718      	adds	r7, #24
 8008c60:	46bd      	mov	sp, r7
 8008c62:	bd80      	pop	{r7, pc}

08008c64 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8008c64:	b580      	push	{r7, lr}
 8008c66:	b086      	sub	sp, #24
 8008c68:	af00      	add	r7, sp, #0
 8008c6a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8008c72:	2100      	movs	r1, #0
 8008c74:	6878      	ldr	r0, [r7, #4]
 8008c76:	f7ff fb7d 	bl	8008374 <dir_sdi>
 8008c7a:	4603      	mov	r3, r0
 8008c7c:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8008c7e:	7dfb      	ldrb	r3, [r7, #23]
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d001      	beq.n	8008c88 <dir_find+0x24>
 8008c84:	7dfb      	ldrb	r3, [r7, #23]
 8008c86:	e0a9      	b.n	8008ddc <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8008c88:	23ff      	movs	r3, #255	; 0xff
 8008c8a:	753b      	strb	r3, [r7, #20]
 8008c8c:	7d3b      	ldrb	r3, [r7, #20]
 8008c8e:	757b      	strb	r3, [r7, #21]
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008c96:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	69db      	ldr	r3, [r3, #28]
 8008c9c:	4619      	mov	r1, r3
 8008c9e:	6938      	ldr	r0, [r7, #16]
 8008ca0:	f7fe ff86 	bl	8007bb0 <move_window>
 8008ca4:	4603      	mov	r3, r0
 8008ca6:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8008ca8:	7dfb      	ldrb	r3, [r7, #23]
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	f040 8090 	bne.w	8008dd0 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	6a1b      	ldr	r3, [r3, #32]
 8008cb4:	781b      	ldrb	r3, [r3, #0]
 8008cb6:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8008cb8:	7dbb      	ldrb	r3, [r7, #22]
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d102      	bne.n	8008cc4 <dir_find+0x60>
 8008cbe:	2304      	movs	r3, #4
 8008cc0:	75fb      	strb	r3, [r7, #23]
 8008cc2:	e08a      	b.n	8008dda <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	6a1b      	ldr	r3, [r3, #32]
 8008cc8:	330b      	adds	r3, #11
 8008cca:	781b      	ldrb	r3, [r3, #0]
 8008ccc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008cd0:	73fb      	strb	r3, [r7, #15]
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	7bfa      	ldrb	r2, [r7, #15]
 8008cd6:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8008cd8:	7dbb      	ldrb	r3, [r7, #22]
 8008cda:	2be5      	cmp	r3, #229	; 0xe5
 8008cdc:	d007      	beq.n	8008cee <dir_find+0x8a>
 8008cde:	7bfb      	ldrb	r3, [r7, #15]
 8008ce0:	f003 0308 	and.w	r3, r3, #8
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d009      	beq.n	8008cfc <dir_find+0x98>
 8008ce8:	7bfb      	ldrb	r3, [r7, #15]
 8008cea:	2b0f      	cmp	r3, #15
 8008cec:	d006      	beq.n	8008cfc <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8008cee:	23ff      	movs	r3, #255	; 0xff
 8008cf0:	757b      	strb	r3, [r7, #21]
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008cf8:	631a      	str	r2, [r3, #48]	; 0x30
 8008cfa:	e05e      	b.n	8008dba <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8008cfc:	7bfb      	ldrb	r3, [r7, #15]
 8008cfe:	2b0f      	cmp	r3, #15
 8008d00:	d136      	bne.n	8008d70 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8008d08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d154      	bne.n	8008dba <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8008d10:	7dbb      	ldrb	r3, [r7, #22]
 8008d12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d00d      	beq.n	8008d36 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	6a1b      	ldr	r3, [r3, #32]
 8008d1e:	7b5b      	ldrb	r3, [r3, #13]
 8008d20:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8008d22:	7dbb      	ldrb	r3, [r7, #22]
 8008d24:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008d28:	75bb      	strb	r3, [r7, #22]
 8008d2a:	7dbb      	ldrb	r3, [r7, #22]
 8008d2c:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	695a      	ldr	r2, [r3, #20]
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8008d36:	7dba      	ldrb	r2, [r7, #22]
 8008d38:	7d7b      	ldrb	r3, [r7, #21]
 8008d3a:	429a      	cmp	r2, r3
 8008d3c:	d115      	bne.n	8008d6a <dir_find+0x106>
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	6a1b      	ldr	r3, [r3, #32]
 8008d42:	330d      	adds	r3, #13
 8008d44:	781b      	ldrb	r3, [r3, #0]
 8008d46:	7d3a      	ldrb	r2, [r7, #20]
 8008d48:	429a      	cmp	r2, r3
 8008d4a:	d10e      	bne.n	8008d6a <dir_find+0x106>
 8008d4c:	693b      	ldr	r3, [r7, #16]
 8008d4e:	691a      	ldr	r2, [r3, #16]
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	6a1b      	ldr	r3, [r3, #32]
 8008d54:	4619      	mov	r1, r3
 8008d56:	4610      	mov	r0, r2
 8008d58:	f7ff fcf2 	bl	8008740 <cmp_lfn>
 8008d5c:	4603      	mov	r3, r0
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d003      	beq.n	8008d6a <dir_find+0x106>
 8008d62:	7d7b      	ldrb	r3, [r7, #21]
 8008d64:	3b01      	subs	r3, #1
 8008d66:	b2db      	uxtb	r3, r3
 8008d68:	e000      	b.n	8008d6c <dir_find+0x108>
 8008d6a:	23ff      	movs	r3, #255	; 0xff
 8008d6c:	757b      	strb	r3, [r7, #21]
 8008d6e:	e024      	b.n	8008dba <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8008d70:	7d7b      	ldrb	r3, [r7, #21]
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d109      	bne.n	8008d8a <dir_find+0x126>
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	6a1b      	ldr	r3, [r3, #32]
 8008d7a:	4618      	mov	r0, r3
 8008d7c:	f7ff feaa 	bl	8008ad4 <sum_sfn>
 8008d80:	4603      	mov	r3, r0
 8008d82:	461a      	mov	r2, r3
 8008d84:	7d3b      	ldrb	r3, [r7, #20]
 8008d86:	4293      	cmp	r3, r2
 8008d88:	d024      	beq.n	8008dd4 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8008d90:	f003 0301 	and.w	r3, r3, #1
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d10a      	bne.n	8008dae <dir_find+0x14a>
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	6a18      	ldr	r0, [r3, #32]
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	3324      	adds	r3, #36	; 0x24
 8008da0:	220b      	movs	r2, #11
 8008da2:	4619      	mov	r1, r3
 8008da4:	f7fe fd12 	bl	80077cc <mem_cmp>
 8008da8:	4603      	mov	r3, r0
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d014      	beq.n	8008dd8 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8008dae:	23ff      	movs	r3, #255	; 0xff
 8008db0:	757b      	strb	r3, [r7, #21]
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008db8:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8008dba:	2100      	movs	r1, #0
 8008dbc:	6878      	ldr	r0, [r7, #4]
 8008dbe:	f7ff fb62 	bl	8008486 <dir_next>
 8008dc2:	4603      	mov	r3, r0
 8008dc4:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8008dc6:	7dfb      	ldrb	r3, [r7, #23]
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	f43f af65 	beq.w	8008c98 <dir_find+0x34>
 8008dce:	e004      	b.n	8008dda <dir_find+0x176>
		if (res != FR_OK) break;
 8008dd0:	bf00      	nop
 8008dd2:	e002      	b.n	8008dda <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8008dd4:	bf00      	nop
 8008dd6:	e000      	b.n	8008dda <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8008dd8:	bf00      	nop

	return res;
 8008dda:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ddc:	4618      	mov	r0, r3
 8008dde:	3718      	adds	r7, #24
 8008de0:	46bd      	mov	sp, r7
 8008de2:	bd80      	pop	{r7, pc}

08008de4 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8008de4:	b580      	push	{r7, lr}
 8008de6:	b08c      	sub	sp, #48	; 0x30
 8008de8:	af00      	add	r7, sp, #0
 8008dea:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8008df8:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d001      	beq.n	8008e04 <dir_register+0x20>
 8008e00:	2306      	movs	r3, #6
 8008e02:	e0e0      	b.n	8008fc6 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8008e04:	2300      	movs	r3, #0
 8008e06:	627b      	str	r3, [r7, #36]	; 0x24
 8008e08:	e002      	b.n	8008e10 <dir_register+0x2c>
 8008e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e0c:	3301      	adds	r3, #1
 8008e0e:	627b      	str	r3, [r7, #36]	; 0x24
 8008e10:	69fb      	ldr	r3, [r7, #28]
 8008e12:	691a      	ldr	r2, [r3, #16]
 8008e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e16:	005b      	lsls	r3, r3, #1
 8008e18:	4413      	add	r3, r2
 8008e1a:	881b      	ldrh	r3, [r3, #0]
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d1f4      	bne.n	8008e0a <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8008e26:	f107 030c 	add.w	r3, r7, #12
 8008e2a:	220c      	movs	r2, #12
 8008e2c:	4618      	mov	r0, r3
 8008e2e:	f7fe fc91 	bl	8007754 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8008e32:	7dfb      	ldrb	r3, [r7, #23]
 8008e34:	f003 0301 	and.w	r3, r3, #1
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d032      	beq.n	8008ea2 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	2240      	movs	r2, #64	; 0x40
 8008e40:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 8008e44:	2301      	movs	r3, #1
 8008e46:	62bb      	str	r3, [r7, #40]	; 0x28
 8008e48:	e016      	b.n	8008e78 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8008e50:	69fb      	ldr	r3, [r7, #28]
 8008e52:	691a      	ldr	r2, [r3, #16]
 8008e54:	f107 010c 	add.w	r1, r7, #12
 8008e58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e5a:	f7ff fdad 	bl	80089b8 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8008e5e:	6878      	ldr	r0, [r7, #4]
 8008e60:	f7ff ff00 	bl	8008c64 <dir_find>
 8008e64:	4603      	mov	r3, r0
 8008e66:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 8008e6a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d106      	bne.n	8008e80 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8008e72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e74:	3301      	adds	r3, #1
 8008e76:	62bb      	str	r3, [r7, #40]	; 0x28
 8008e78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e7a:	2b63      	cmp	r3, #99	; 0x63
 8008e7c:	d9e5      	bls.n	8008e4a <dir_register+0x66>
 8008e7e:	e000      	b.n	8008e82 <dir_register+0x9e>
			if (res != FR_OK) break;
 8008e80:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8008e82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e84:	2b64      	cmp	r3, #100	; 0x64
 8008e86:	d101      	bne.n	8008e8c <dir_register+0xa8>
 8008e88:	2307      	movs	r3, #7
 8008e8a:	e09c      	b.n	8008fc6 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8008e8c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008e90:	2b04      	cmp	r3, #4
 8008e92:	d002      	beq.n	8008e9a <dir_register+0xb6>
 8008e94:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008e98:	e095      	b.n	8008fc6 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8008e9a:	7dfa      	ldrb	r2, [r7, #23]
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8008ea2:	7dfb      	ldrb	r3, [r7, #23]
 8008ea4:	f003 0302 	and.w	r3, r3, #2
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d007      	beq.n	8008ebc <dir_register+0xd8>
 8008eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eae:	330c      	adds	r3, #12
 8008eb0:	4a47      	ldr	r2, [pc, #284]	; (8008fd0 <dir_register+0x1ec>)
 8008eb2:	fba2 2303 	umull	r2, r3, r2, r3
 8008eb6:	089b      	lsrs	r3, r3, #2
 8008eb8:	3301      	adds	r3, #1
 8008eba:	e000      	b.n	8008ebe <dir_register+0xda>
 8008ebc:	2301      	movs	r3, #1
 8008ebe:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8008ec0:	6a39      	ldr	r1, [r7, #32]
 8008ec2:	6878      	ldr	r0, [r7, #4]
 8008ec4:	f7ff fbb5 	bl	8008632 <dir_alloc>
 8008ec8:	4603      	mov	r3, r0
 8008eca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8008ece:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d148      	bne.n	8008f68 <dir_register+0x184>
 8008ed6:	6a3b      	ldr	r3, [r7, #32]
 8008ed8:	3b01      	subs	r3, #1
 8008eda:	623b      	str	r3, [r7, #32]
 8008edc:	6a3b      	ldr	r3, [r7, #32]
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d042      	beq.n	8008f68 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	695a      	ldr	r2, [r3, #20]
 8008ee6:	6a3b      	ldr	r3, [r7, #32]
 8008ee8:	015b      	lsls	r3, r3, #5
 8008eea:	1ad3      	subs	r3, r2, r3
 8008eec:	4619      	mov	r1, r3
 8008eee:	6878      	ldr	r0, [r7, #4]
 8008ef0:	f7ff fa40 	bl	8008374 <dir_sdi>
 8008ef4:	4603      	mov	r3, r0
 8008ef6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8008efa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d132      	bne.n	8008f68 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	3324      	adds	r3, #36	; 0x24
 8008f06:	4618      	mov	r0, r3
 8008f08:	f7ff fde4 	bl	8008ad4 <sum_sfn>
 8008f0c:	4603      	mov	r3, r0
 8008f0e:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	69db      	ldr	r3, [r3, #28]
 8008f14:	4619      	mov	r1, r3
 8008f16:	69f8      	ldr	r0, [r7, #28]
 8008f18:	f7fe fe4a 	bl	8007bb0 <move_window>
 8008f1c:	4603      	mov	r3, r0
 8008f1e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 8008f22:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d11d      	bne.n	8008f66 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8008f2a:	69fb      	ldr	r3, [r7, #28]
 8008f2c:	6918      	ldr	r0, [r3, #16]
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	6a19      	ldr	r1, [r3, #32]
 8008f32:	6a3b      	ldr	r3, [r7, #32]
 8008f34:	b2da      	uxtb	r2, r3
 8008f36:	7efb      	ldrb	r3, [r7, #27]
 8008f38:	f7ff fcd6 	bl	80088e8 <put_lfn>
				fs->wflag = 1;
 8008f3c:	69fb      	ldr	r3, [r7, #28]
 8008f3e:	2201      	movs	r2, #1
 8008f40:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8008f42:	2100      	movs	r1, #0
 8008f44:	6878      	ldr	r0, [r7, #4]
 8008f46:	f7ff fa9e 	bl	8008486 <dir_next>
 8008f4a:	4603      	mov	r3, r0
 8008f4c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 8008f50:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d107      	bne.n	8008f68 <dir_register+0x184>
 8008f58:	6a3b      	ldr	r3, [r7, #32]
 8008f5a:	3b01      	subs	r3, #1
 8008f5c:	623b      	str	r3, [r7, #32]
 8008f5e:	6a3b      	ldr	r3, [r7, #32]
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d1d5      	bne.n	8008f10 <dir_register+0x12c>
 8008f64:	e000      	b.n	8008f68 <dir_register+0x184>
				if (res != FR_OK) break;
 8008f66:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8008f68:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d128      	bne.n	8008fc2 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	69db      	ldr	r3, [r3, #28]
 8008f74:	4619      	mov	r1, r3
 8008f76:	69f8      	ldr	r0, [r7, #28]
 8008f78:	f7fe fe1a 	bl	8007bb0 <move_window>
 8008f7c:	4603      	mov	r3, r0
 8008f7e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8008f82:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d11b      	bne.n	8008fc2 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	6a1b      	ldr	r3, [r3, #32]
 8008f8e:	2220      	movs	r2, #32
 8008f90:	2100      	movs	r1, #0
 8008f92:	4618      	mov	r0, r3
 8008f94:	f7fe fbff 	bl	8007796 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	6a18      	ldr	r0, [r3, #32]
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	3324      	adds	r3, #36	; 0x24
 8008fa0:	220b      	movs	r2, #11
 8008fa2:	4619      	mov	r1, r3
 8008fa4:	f7fe fbd6 	bl	8007754 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	6a1b      	ldr	r3, [r3, #32]
 8008fb2:	330c      	adds	r3, #12
 8008fb4:	f002 0218 	and.w	r2, r2, #24
 8008fb8:	b2d2      	uxtb	r2, r2
 8008fba:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8008fbc:	69fb      	ldr	r3, [r7, #28]
 8008fbe:	2201      	movs	r2, #1
 8008fc0:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8008fc2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8008fc6:	4618      	mov	r0, r3
 8008fc8:	3730      	adds	r7, #48	; 0x30
 8008fca:	46bd      	mov	sp, r7
 8008fcc:	bd80      	pop	{r7, pc}
 8008fce:	bf00      	nop
 8008fd0:	4ec4ec4f 	.word	0x4ec4ec4f

08008fd4 <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 8008fd4:	b580      	push	{r7, lr}
 8008fd6:	b086      	sub	sp, #24
 8008fd8:	af00      	add	r7, sp, #0
 8008fda:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	613b      	str	r3, [r7, #16]
#if _USE_LFN != 0	/* LFN configuration */
	DWORD last = dp->dptr;
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	695b      	ldr	r3, [r3, #20]
 8008fe6:	60fb      	str	r3, [r7, #12]

	res = (dp->blk_ofs == 0xFFFFFFFF) ? FR_OK : dir_sdi(dp, dp->blk_ofs);	/* Goto top of the entry block if LFN is exist */
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008ff0:	d007      	beq.n	8009002 <dir_remove+0x2e>
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ff6:	4619      	mov	r1, r3
 8008ff8:	6878      	ldr	r0, [r7, #4]
 8008ffa:	f7ff f9bb 	bl	8008374 <dir_sdi>
 8008ffe:	4603      	mov	r3, r0
 8009000:	e000      	b.n	8009004 <dir_remove+0x30>
 8009002:	2300      	movs	r3, #0
 8009004:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8009006:	7dfb      	ldrb	r3, [r7, #23]
 8009008:	2b00      	cmp	r3, #0
 800900a:	d128      	bne.n	800905e <dir_remove+0x8a>
		do {
			res = move_window(fs, dp->sect);
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	69db      	ldr	r3, [r3, #28]
 8009010:	4619      	mov	r1, r3
 8009012:	6938      	ldr	r0, [r7, #16]
 8009014:	f7fe fdcc 	bl	8007bb0 <move_window>
 8009018:	4603      	mov	r3, r0
 800901a:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800901c:	7dfb      	ldrb	r3, [r7, #23]
 800901e:	2b00      	cmp	r3, #0
 8009020:	d115      	bne.n	800904e <dir_remove+0x7a>
			/* Mark an entry 'deleted' */
			if (_FS_EXFAT && fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
				dp->dir[XDIR_Type] &= 0x7F;
			} else {									/* On the FAT12/16/32 volume */
				dp->dir[DIR_Name] = DDEM;
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	6a1b      	ldr	r3, [r3, #32]
 8009026:	22e5      	movs	r2, #229	; 0xe5
 8009028:	701a      	strb	r2, [r3, #0]
			}
			fs->wflag = 1;
 800902a:	693b      	ldr	r3, [r7, #16]
 800902c:	2201      	movs	r2, #1
 800902e:	70da      	strb	r2, [r3, #3]
			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been deleted. */
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	695b      	ldr	r3, [r3, #20]
 8009034:	68fa      	ldr	r2, [r7, #12]
 8009036:	429a      	cmp	r2, r3
 8009038:	d90b      	bls.n	8009052 <dir_remove+0x7e>
			res = dir_next(dp, 0);	/* Next entry */
 800903a:	2100      	movs	r1, #0
 800903c:	6878      	ldr	r0, [r7, #4]
 800903e:	f7ff fa22 	bl	8008486 <dir_next>
 8009042:	4603      	mov	r3, r0
 8009044:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);
 8009046:	7dfb      	ldrb	r3, [r7, #23]
 8009048:	2b00      	cmp	r3, #0
 800904a:	d0df      	beq.n	800900c <dir_remove+0x38>
 800904c:	e002      	b.n	8009054 <dir_remove+0x80>
			if (res != FR_OK) break;
 800904e:	bf00      	nop
 8009050:	e000      	b.n	8009054 <dir_remove+0x80>
			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been deleted. */
 8009052:	bf00      	nop
		if (res == FR_NO_FILE) res = FR_INT_ERR;
 8009054:	7dfb      	ldrb	r3, [r7, #23]
 8009056:	2b04      	cmp	r3, #4
 8009058:	d101      	bne.n	800905e <dir_remove+0x8a>
 800905a:	2302      	movs	r3, #2
 800905c:	75fb      	strb	r3, [r7, #23]
		dp->dir[DIR_Name] = DDEM;
		fs->wflag = 1;
	}
#endif

	return res;
 800905e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009060:	4618      	mov	r0, r3
 8009062:	3718      	adds	r7, #24
 8009064:	46bd      	mov	sp, r7
 8009066:	bd80      	pop	{r7, pc}

08009068 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8009068:	b580      	push	{r7, lr}
 800906a:	b08a      	sub	sp, #40	; 0x28
 800906c:	af00      	add	r7, sp, #0
 800906e:	6078      	str	r0, [r7, #4]
 8009070:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8009072:	683b      	ldr	r3, [r7, #0]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	613b      	str	r3, [r7, #16]
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	691b      	ldr	r3, [r3, #16]
 800907e:	60fb      	str	r3, [r7, #12]
 8009080:	2300      	movs	r3, #0
 8009082:	617b      	str	r3, [r7, #20]
 8009084:	697b      	ldr	r3, [r7, #20]
 8009086:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8009088:	69bb      	ldr	r3, [r7, #24]
 800908a:	1c5a      	adds	r2, r3, #1
 800908c:	61ba      	str	r2, [r7, #24]
 800908e:	693a      	ldr	r2, [r7, #16]
 8009090:	4413      	add	r3, r2
 8009092:	781b      	ldrb	r3, [r3, #0]
 8009094:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8009096:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009098:	2b1f      	cmp	r3, #31
 800909a:	d940      	bls.n	800911e <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800909c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800909e:	2b2f      	cmp	r3, #47	; 0x2f
 80090a0:	d006      	beq.n	80090b0 <create_name+0x48>
 80090a2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80090a4:	2b5c      	cmp	r3, #92	; 0x5c
 80090a6:	d110      	bne.n	80090ca <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80090a8:	e002      	b.n	80090b0 <create_name+0x48>
 80090aa:	69bb      	ldr	r3, [r7, #24]
 80090ac:	3301      	adds	r3, #1
 80090ae:	61bb      	str	r3, [r7, #24]
 80090b0:	693a      	ldr	r2, [r7, #16]
 80090b2:	69bb      	ldr	r3, [r7, #24]
 80090b4:	4413      	add	r3, r2
 80090b6:	781b      	ldrb	r3, [r3, #0]
 80090b8:	2b2f      	cmp	r3, #47	; 0x2f
 80090ba:	d0f6      	beq.n	80090aa <create_name+0x42>
 80090bc:	693a      	ldr	r2, [r7, #16]
 80090be:	69bb      	ldr	r3, [r7, #24]
 80090c0:	4413      	add	r3, r2
 80090c2:	781b      	ldrb	r3, [r3, #0]
 80090c4:	2b5c      	cmp	r3, #92	; 0x5c
 80090c6:	d0f0      	beq.n	80090aa <create_name+0x42>
			break;
 80090c8:	e02a      	b.n	8009120 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 80090ca:	697b      	ldr	r3, [r7, #20]
 80090cc:	2bfe      	cmp	r3, #254	; 0xfe
 80090ce:	d901      	bls.n	80090d4 <create_name+0x6c>
 80090d0:	2306      	movs	r3, #6
 80090d2:	e17d      	b.n	80093d0 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 80090d4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80090d6:	b2db      	uxtb	r3, r3
 80090d8:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 80090da:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80090dc:	2101      	movs	r1, #1
 80090de:	4618      	mov	r0, r3
 80090e0:	f001 fcc0 	bl	800aa64 <ff_convert>
 80090e4:	4603      	mov	r3, r0
 80090e6:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 80090e8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d101      	bne.n	80090f2 <create_name+0x8a>
 80090ee:	2306      	movs	r3, #6
 80090f0:	e16e      	b.n	80093d0 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 80090f2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80090f4:	2b7f      	cmp	r3, #127	; 0x7f
 80090f6:	d809      	bhi.n	800910c <create_name+0xa4>
 80090f8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80090fa:	4619      	mov	r1, r3
 80090fc:	488d      	ldr	r0, [pc, #564]	; (8009334 <create_name+0x2cc>)
 80090fe:	f7fe fb8c 	bl	800781a <chk_chr>
 8009102:	4603      	mov	r3, r0
 8009104:	2b00      	cmp	r3, #0
 8009106:	d001      	beq.n	800910c <create_name+0xa4>
 8009108:	2306      	movs	r3, #6
 800910a:	e161      	b.n	80093d0 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 800910c:	697b      	ldr	r3, [r7, #20]
 800910e:	1c5a      	adds	r2, r3, #1
 8009110:	617a      	str	r2, [r7, #20]
 8009112:	005b      	lsls	r3, r3, #1
 8009114:	68fa      	ldr	r2, [r7, #12]
 8009116:	4413      	add	r3, r2
 8009118:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800911a:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800911c:	e7b4      	b.n	8009088 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800911e:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8009120:	693a      	ldr	r2, [r7, #16]
 8009122:	69bb      	ldr	r3, [r7, #24]
 8009124:	441a      	add	r2, r3
 8009126:	683b      	ldr	r3, [r7, #0]
 8009128:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800912a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800912c:	2b1f      	cmp	r3, #31
 800912e:	d801      	bhi.n	8009134 <create_name+0xcc>
 8009130:	2304      	movs	r3, #4
 8009132:	e000      	b.n	8009136 <create_name+0xce>
 8009134:	2300      	movs	r3, #0
 8009136:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800913a:	e011      	b.n	8009160 <create_name+0xf8>
		w = lfn[di - 1];
 800913c:	697b      	ldr	r3, [r7, #20]
 800913e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8009142:	3b01      	subs	r3, #1
 8009144:	005b      	lsls	r3, r3, #1
 8009146:	68fa      	ldr	r2, [r7, #12]
 8009148:	4413      	add	r3, r2
 800914a:	881b      	ldrh	r3, [r3, #0]
 800914c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800914e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009150:	2b20      	cmp	r3, #32
 8009152:	d002      	beq.n	800915a <create_name+0xf2>
 8009154:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009156:	2b2e      	cmp	r3, #46	; 0x2e
 8009158:	d106      	bne.n	8009168 <create_name+0x100>
		di--;
 800915a:	697b      	ldr	r3, [r7, #20]
 800915c:	3b01      	subs	r3, #1
 800915e:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8009160:	697b      	ldr	r3, [r7, #20]
 8009162:	2b00      	cmp	r3, #0
 8009164:	d1ea      	bne.n	800913c <create_name+0xd4>
 8009166:	e000      	b.n	800916a <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8009168:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800916a:	697b      	ldr	r3, [r7, #20]
 800916c:	005b      	lsls	r3, r3, #1
 800916e:	68fa      	ldr	r2, [r7, #12]
 8009170:	4413      	add	r3, r2
 8009172:	2200      	movs	r2, #0
 8009174:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8009176:	697b      	ldr	r3, [r7, #20]
 8009178:	2b00      	cmp	r3, #0
 800917a:	d101      	bne.n	8009180 <create_name+0x118>
 800917c:	2306      	movs	r3, #6
 800917e:	e127      	b.n	80093d0 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	3324      	adds	r3, #36	; 0x24
 8009184:	220b      	movs	r2, #11
 8009186:	2120      	movs	r1, #32
 8009188:	4618      	mov	r0, r3
 800918a:	f7fe fb04 	bl	8007796 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800918e:	2300      	movs	r3, #0
 8009190:	61bb      	str	r3, [r7, #24]
 8009192:	e002      	b.n	800919a <create_name+0x132>
 8009194:	69bb      	ldr	r3, [r7, #24]
 8009196:	3301      	adds	r3, #1
 8009198:	61bb      	str	r3, [r7, #24]
 800919a:	69bb      	ldr	r3, [r7, #24]
 800919c:	005b      	lsls	r3, r3, #1
 800919e:	68fa      	ldr	r2, [r7, #12]
 80091a0:	4413      	add	r3, r2
 80091a2:	881b      	ldrh	r3, [r3, #0]
 80091a4:	2b20      	cmp	r3, #32
 80091a6:	d0f5      	beq.n	8009194 <create_name+0x12c>
 80091a8:	69bb      	ldr	r3, [r7, #24]
 80091aa:	005b      	lsls	r3, r3, #1
 80091ac:	68fa      	ldr	r2, [r7, #12]
 80091ae:	4413      	add	r3, r2
 80091b0:	881b      	ldrh	r3, [r3, #0]
 80091b2:	2b2e      	cmp	r3, #46	; 0x2e
 80091b4:	d0ee      	beq.n	8009194 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 80091b6:	69bb      	ldr	r3, [r7, #24]
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d009      	beq.n	80091d0 <create_name+0x168>
 80091bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80091c0:	f043 0303 	orr.w	r3, r3, #3
 80091c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 80091c8:	e002      	b.n	80091d0 <create_name+0x168>
 80091ca:	697b      	ldr	r3, [r7, #20]
 80091cc:	3b01      	subs	r3, #1
 80091ce:	617b      	str	r3, [r7, #20]
 80091d0:	697b      	ldr	r3, [r7, #20]
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d009      	beq.n	80091ea <create_name+0x182>
 80091d6:	697b      	ldr	r3, [r7, #20]
 80091d8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80091dc:	3b01      	subs	r3, #1
 80091de:	005b      	lsls	r3, r3, #1
 80091e0:	68fa      	ldr	r2, [r7, #12]
 80091e2:	4413      	add	r3, r2
 80091e4:	881b      	ldrh	r3, [r3, #0]
 80091e6:	2b2e      	cmp	r3, #46	; 0x2e
 80091e8:	d1ef      	bne.n	80091ca <create_name+0x162>

	i = b = 0; ni = 8;
 80091ea:	2300      	movs	r3, #0
 80091ec:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80091f0:	2300      	movs	r3, #0
 80091f2:	623b      	str	r3, [r7, #32]
 80091f4:	2308      	movs	r3, #8
 80091f6:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 80091f8:	69bb      	ldr	r3, [r7, #24]
 80091fa:	1c5a      	adds	r2, r3, #1
 80091fc:	61ba      	str	r2, [r7, #24]
 80091fe:	005b      	lsls	r3, r3, #1
 8009200:	68fa      	ldr	r2, [r7, #12]
 8009202:	4413      	add	r3, r2
 8009204:	881b      	ldrh	r3, [r3, #0]
 8009206:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8009208:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800920a:	2b00      	cmp	r3, #0
 800920c:	f000 8090 	beq.w	8009330 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8009210:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009212:	2b20      	cmp	r3, #32
 8009214:	d006      	beq.n	8009224 <create_name+0x1bc>
 8009216:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009218:	2b2e      	cmp	r3, #46	; 0x2e
 800921a:	d10a      	bne.n	8009232 <create_name+0x1ca>
 800921c:	69ba      	ldr	r2, [r7, #24]
 800921e:	697b      	ldr	r3, [r7, #20]
 8009220:	429a      	cmp	r2, r3
 8009222:	d006      	beq.n	8009232 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8009224:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009228:	f043 0303 	orr.w	r3, r3, #3
 800922c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009230:	e07d      	b.n	800932e <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8009232:	6a3a      	ldr	r2, [r7, #32]
 8009234:	69fb      	ldr	r3, [r7, #28]
 8009236:	429a      	cmp	r2, r3
 8009238:	d203      	bcs.n	8009242 <create_name+0x1da>
 800923a:	69ba      	ldr	r2, [r7, #24]
 800923c:	697b      	ldr	r3, [r7, #20]
 800923e:	429a      	cmp	r2, r3
 8009240:	d123      	bne.n	800928a <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8009242:	69fb      	ldr	r3, [r7, #28]
 8009244:	2b0b      	cmp	r3, #11
 8009246:	d106      	bne.n	8009256 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8009248:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800924c:	f043 0303 	orr.w	r3, r3, #3
 8009250:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009254:	e075      	b.n	8009342 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8009256:	69ba      	ldr	r2, [r7, #24]
 8009258:	697b      	ldr	r3, [r7, #20]
 800925a:	429a      	cmp	r2, r3
 800925c:	d005      	beq.n	800926a <create_name+0x202>
 800925e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009262:	f043 0303 	orr.w	r3, r3, #3
 8009266:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800926a:	69ba      	ldr	r2, [r7, #24]
 800926c:	697b      	ldr	r3, [r7, #20]
 800926e:	429a      	cmp	r2, r3
 8009270:	d866      	bhi.n	8009340 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8009272:	697b      	ldr	r3, [r7, #20]
 8009274:	61bb      	str	r3, [r7, #24]
 8009276:	2308      	movs	r3, #8
 8009278:	623b      	str	r3, [r7, #32]
 800927a:	230b      	movs	r3, #11
 800927c:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800927e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009282:	009b      	lsls	r3, r3, #2
 8009284:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8009288:	e051      	b.n	800932e <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800928a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800928c:	2b7f      	cmp	r3, #127	; 0x7f
 800928e:	d914      	bls.n	80092ba <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8009290:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009292:	2100      	movs	r1, #0
 8009294:	4618      	mov	r0, r3
 8009296:	f001 fbe5 	bl	800aa64 <ff_convert>
 800929a:	4603      	mov	r3, r0
 800929c:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800929e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d004      	beq.n	80092ae <create_name+0x246>
 80092a4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80092a6:	3b80      	subs	r3, #128	; 0x80
 80092a8:	4a23      	ldr	r2, [pc, #140]	; (8009338 <create_name+0x2d0>)
 80092aa:	5cd3      	ldrb	r3, [r2, r3]
 80092ac:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 80092ae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80092b2:	f043 0302 	orr.w	r3, r3, #2
 80092b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 80092ba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d007      	beq.n	80092d0 <create_name+0x268>
 80092c0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80092c2:	4619      	mov	r1, r3
 80092c4:	481d      	ldr	r0, [pc, #116]	; (800933c <create_name+0x2d4>)
 80092c6:	f7fe faa8 	bl	800781a <chk_chr>
 80092ca:	4603      	mov	r3, r0
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d008      	beq.n	80092e2 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 80092d0:	235f      	movs	r3, #95	; 0x5f
 80092d2:	84bb      	strh	r3, [r7, #36]	; 0x24
 80092d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80092d8:	f043 0303 	orr.w	r3, r3, #3
 80092dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80092e0:	e01b      	b.n	800931a <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 80092e2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80092e4:	2b40      	cmp	r3, #64	; 0x40
 80092e6:	d909      	bls.n	80092fc <create_name+0x294>
 80092e8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80092ea:	2b5a      	cmp	r3, #90	; 0x5a
 80092ec:	d806      	bhi.n	80092fc <create_name+0x294>
					b |= 2;
 80092ee:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80092f2:	f043 0302 	orr.w	r3, r3, #2
 80092f6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80092fa:	e00e      	b.n	800931a <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 80092fc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80092fe:	2b60      	cmp	r3, #96	; 0x60
 8009300:	d90b      	bls.n	800931a <create_name+0x2b2>
 8009302:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009304:	2b7a      	cmp	r3, #122	; 0x7a
 8009306:	d808      	bhi.n	800931a <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8009308:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800930c:	f043 0301 	orr.w	r3, r3, #1
 8009310:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8009314:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009316:	3b20      	subs	r3, #32
 8009318:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800931a:	6a3b      	ldr	r3, [r7, #32]
 800931c:	1c5a      	adds	r2, r3, #1
 800931e:	623a      	str	r2, [r7, #32]
 8009320:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009322:	b2d1      	uxtb	r1, r2
 8009324:	687a      	ldr	r2, [r7, #4]
 8009326:	4413      	add	r3, r2
 8009328:	460a      	mov	r2, r1
 800932a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 800932e:	e763      	b.n	80091f8 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8009330:	bf00      	nop
 8009332:	e006      	b.n	8009342 <create_name+0x2da>
 8009334:	0800b5a0 	.word	0x0800b5a0
 8009338:	0800dca0 	.word	0x0800dca0
 800933c:	0800b5ac 	.word	0x0800b5ac
			if (si > di) break;			/* No extension */
 8009340:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009348:	2be5      	cmp	r3, #229	; 0xe5
 800934a:	d103      	bne.n	8009354 <create_name+0x2ec>
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	2205      	movs	r2, #5
 8009350:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 8009354:	69fb      	ldr	r3, [r7, #28]
 8009356:	2b08      	cmp	r3, #8
 8009358:	d104      	bne.n	8009364 <create_name+0x2fc>
 800935a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800935e:	009b      	lsls	r3, r3, #2
 8009360:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8009364:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009368:	f003 030c 	and.w	r3, r3, #12
 800936c:	2b0c      	cmp	r3, #12
 800936e:	d005      	beq.n	800937c <create_name+0x314>
 8009370:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009374:	f003 0303 	and.w	r3, r3, #3
 8009378:	2b03      	cmp	r3, #3
 800937a:	d105      	bne.n	8009388 <create_name+0x320>
 800937c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009380:	f043 0302 	orr.w	r3, r3, #2
 8009384:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8009388:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800938c:	f003 0302 	and.w	r3, r3, #2
 8009390:	2b00      	cmp	r3, #0
 8009392:	d117      	bne.n	80093c4 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8009394:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009398:	f003 0303 	and.w	r3, r3, #3
 800939c:	2b01      	cmp	r3, #1
 800939e:	d105      	bne.n	80093ac <create_name+0x344>
 80093a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80093a4:	f043 0310 	orr.w	r3, r3, #16
 80093a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 80093ac:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80093b0:	f003 030c 	and.w	r3, r3, #12
 80093b4:	2b04      	cmp	r3, #4
 80093b6:	d105      	bne.n	80093c4 <create_name+0x35c>
 80093b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80093bc:	f043 0308 	orr.w	r3, r3, #8
 80093c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80093ca:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 80093ce:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 80093d0:	4618      	mov	r0, r3
 80093d2:	3728      	adds	r7, #40	; 0x28
 80093d4:	46bd      	mov	sp, r7
 80093d6:	bd80      	pop	{r7, pc}

080093d8 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80093d8:	b580      	push	{r7, lr}
 80093da:	b086      	sub	sp, #24
 80093dc:	af00      	add	r7, sp, #0
 80093de:	6078      	str	r0, [r7, #4]
 80093e0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80093e6:	693b      	ldr	r3, [r7, #16]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80093ec:	e002      	b.n	80093f4 <follow_path+0x1c>
 80093ee:	683b      	ldr	r3, [r7, #0]
 80093f0:	3301      	adds	r3, #1
 80093f2:	603b      	str	r3, [r7, #0]
 80093f4:	683b      	ldr	r3, [r7, #0]
 80093f6:	781b      	ldrb	r3, [r3, #0]
 80093f8:	2b2f      	cmp	r3, #47	; 0x2f
 80093fa:	d0f8      	beq.n	80093ee <follow_path+0x16>
 80093fc:	683b      	ldr	r3, [r7, #0]
 80093fe:	781b      	ldrb	r3, [r3, #0]
 8009400:	2b5c      	cmp	r3, #92	; 0x5c
 8009402:	d0f4      	beq.n	80093ee <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8009404:	693b      	ldr	r3, [r7, #16]
 8009406:	2200      	movs	r2, #0
 8009408:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800940a:	683b      	ldr	r3, [r7, #0]
 800940c:	781b      	ldrb	r3, [r3, #0]
 800940e:	2b1f      	cmp	r3, #31
 8009410:	d80a      	bhi.n	8009428 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	2280      	movs	r2, #128	; 0x80
 8009416:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800941a:	2100      	movs	r1, #0
 800941c:	6878      	ldr	r0, [r7, #4]
 800941e:	f7fe ffa9 	bl	8008374 <dir_sdi>
 8009422:	4603      	mov	r3, r0
 8009424:	75fb      	strb	r3, [r7, #23]
 8009426:	e048      	b.n	80094ba <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8009428:	463b      	mov	r3, r7
 800942a:	4619      	mov	r1, r3
 800942c:	6878      	ldr	r0, [r7, #4]
 800942e:	f7ff fe1b 	bl	8009068 <create_name>
 8009432:	4603      	mov	r3, r0
 8009434:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8009436:	7dfb      	ldrb	r3, [r7, #23]
 8009438:	2b00      	cmp	r3, #0
 800943a:	d139      	bne.n	80094b0 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 800943c:	6878      	ldr	r0, [r7, #4]
 800943e:	f7ff fc11 	bl	8008c64 <dir_find>
 8009442:	4603      	mov	r3, r0
 8009444:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800944c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800944e:	7dfb      	ldrb	r3, [r7, #23]
 8009450:	2b00      	cmp	r3, #0
 8009452:	d00a      	beq.n	800946a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8009454:	7dfb      	ldrb	r3, [r7, #23]
 8009456:	2b04      	cmp	r3, #4
 8009458:	d12c      	bne.n	80094b4 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800945a:	7afb      	ldrb	r3, [r7, #11]
 800945c:	f003 0304 	and.w	r3, r3, #4
 8009460:	2b00      	cmp	r3, #0
 8009462:	d127      	bne.n	80094b4 <follow_path+0xdc>
 8009464:	2305      	movs	r3, #5
 8009466:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8009468:	e024      	b.n	80094b4 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800946a:	7afb      	ldrb	r3, [r7, #11]
 800946c:	f003 0304 	and.w	r3, r3, #4
 8009470:	2b00      	cmp	r3, #0
 8009472:	d121      	bne.n	80094b8 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8009474:	693b      	ldr	r3, [r7, #16]
 8009476:	799b      	ldrb	r3, [r3, #6]
 8009478:	f003 0310 	and.w	r3, r3, #16
 800947c:	2b00      	cmp	r3, #0
 800947e:	d102      	bne.n	8009486 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8009480:	2305      	movs	r3, #5
 8009482:	75fb      	strb	r3, [r7, #23]
 8009484:	e019      	b.n	80094ba <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	695b      	ldr	r3, [r3, #20]
 8009490:	68fa      	ldr	r2, [r7, #12]
 8009492:	8992      	ldrh	r2, [r2, #12]
 8009494:	fbb3 f0f2 	udiv	r0, r3, r2
 8009498:	fb00 f202 	mul.w	r2, r0, r2
 800949c:	1a9b      	subs	r3, r3, r2
 800949e:	440b      	add	r3, r1
 80094a0:	4619      	mov	r1, r3
 80094a2:	68f8      	ldr	r0, [r7, #12]
 80094a4:	f7ff f90c 	bl	80086c0 <ld_clust>
 80094a8:	4602      	mov	r2, r0
 80094aa:	693b      	ldr	r3, [r7, #16]
 80094ac:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80094ae:	e7bb      	b.n	8009428 <follow_path+0x50>
			if (res != FR_OK) break;
 80094b0:	bf00      	nop
 80094b2:	e002      	b.n	80094ba <follow_path+0xe2>
				break;
 80094b4:	bf00      	nop
 80094b6:	e000      	b.n	80094ba <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80094b8:	bf00      	nop
			}
		}
	}

	return res;
 80094ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80094bc:	4618      	mov	r0, r3
 80094be:	3718      	adds	r7, #24
 80094c0:	46bd      	mov	sp, r7
 80094c2:	bd80      	pop	{r7, pc}

080094c4 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80094c4:	b480      	push	{r7}
 80094c6:	b087      	sub	sp, #28
 80094c8:	af00      	add	r7, sp, #0
 80094ca:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80094cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80094d0:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d031      	beq.n	800953e <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	617b      	str	r3, [r7, #20]
 80094e0:	e002      	b.n	80094e8 <get_ldnumber+0x24>
 80094e2:	697b      	ldr	r3, [r7, #20]
 80094e4:	3301      	adds	r3, #1
 80094e6:	617b      	str	r3, [r7, #20]
 80094e8:	697b      	ldr	r3, [r7, #20]
 80094ea:	781b      	ldrb	r3, [r3, #0]
 80094ec:	2b1f      	cmp	r3, #31
 80094ee:	d903      	bls.n	80094f8 <get_ldnumber+0x34>
 80094f0:	697b      	ldr	r3, [r7, #20]
 80094f2:	781b      	ldrb	r3, [r3, #0]
 80094f4:	2b3a      	cmp	r3, #58	; 0x3a
 80094f6:	d1f4      	bne.n	80094e2 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80094f8:	697b      	ldr	r3, [r7, #20]
 80094fa:	781b      	ldrb	r3, [r3, #0]
 80094fc:	2b3a      	cmp	r3, #58	; 0x3a
 80094fe:	d11c      	bne.n	800953a <get_ldnumber+0x76>
			tp = *path;
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	1c5a      	adds	r2, r3, #1
 800950a:	60fa      	str	r2, [r7, #12]
 800950c:	781b      	ldrb	r3, [r3, #0]
 800950e:	3b30      	subs	r3, #48	; 0x30
 8009510:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8009512:	68bb      	ldr	r3, [r7, #8]
 8009514:	2b09      	cmp	r3, #9
 8009516:	d80e      	bhi.n	8009536 <get_ldnumber+0x72>
 8009518:	68fa      	ldr	r2, [r7, #12]
 800951a:	697b      	ldr	r3, [r7, #20]
 800951c:	429a      	cmp	r2, r3
 800951e:	d10a      	bne.n	8009536 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8009520:	68bb      	ldr	r3, [r7, #8]
 8009522:	2b00      	cmp	r3, #0
 8009524:	d107      	bne.n	8009536 <get_ldnumber+0x72>
					vol = (int)i;
 8009526:	68bb      	ldr	r3, [r7, #8]
 8009528:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800952a:	697b      	ldr	r3, [r7, #20]
 800952c:	3301      	adds	r3, #1
 800952e:	617b      	str	r3, [r7, #20]
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	697a      	ldr	r2, [r7, #20]
 8009534:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8009536:	693b      	ldr	r3, [r7, #16]
 8009538:	e002      	b.n	8009540 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800953a:	2300      	movs	r3, #0
 800953c:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800953e:	693b      	ldr	r3, [r7, #16]
}
 8009540:	4618      	mov	r0, r3
 8009542:	371c      	adds	r7, #28
 8009544:	46bd      	mov	sp, r7
 8009546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800954a:	4770      	bx	lr

0800954c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800954c:	b580      	push	{r7, lr}
 800954e:	b082      	sub	sp, #8
 8009550:	af00      	add	r7, sp, #0
 8009552:	6078      	str	r0, [r7, #4]
 8009554:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	2200      	movs	r2, #0
 800955a:	70da      	strb	r2, [r3, #3]
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009562:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8009564:	6839      	ldr	r1, [r7, #0]
 8009566:	6878      	ldr	r0, [r7, #4]
 8009568:	f7fe fb22 	bl	8007bb0 <move_window>
 800956c:	4603      	mov	r3, r0
 800956e:	2b00      	cmp	r3, #0
 8009570:	d001      	beq.n	8009576 <check_fs+0x2a>
 8009572:	2304      	movs	r3, #4
 8009574:	e038      	b.n	80095e8 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	3338      	adds	r3, #56	; 0x38
 800957a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800957e:	4618      	mov	r0, r3
 8009580:	f7fe f866 	bl	8007650 <ld_word>
 8009584:	4603      	mov	r3, r0
 8009586:	461a      	mov	r2, r3
 8009588:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800958c:	429a      	cmp	r2, r3
 800958e:	d001      	beq.n	8009594 <check_fs+0x48>
 8009590:	2303      	movs	r3, #3
 8009592:	e029      	b.n	80095e8 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800959a:	2be9      	cmp	r3, #233	; 0xe9
 800959c:	d009      	beq.n	80095b2 <check_fs+0x66>
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80095a4:	2beb      	cmp	r3, #235	; 0xeb
 80095a6:	d11e      	bne.n	80095e6 <check_fs+0x9a>
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80095ae:	2b90      	cmp	r3, #144	; 0x90
 80095b0:	d119      	bne.n	80095e6 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	3338      	adds	r3, #56	; 0x38
 80095b6:	3336      	adds	r3, #54	; 0x36
 80095b8:	4618      	mov	r0, r3
 80095ba:	f7fe f861 	bl	8007680 <ld_dword>
 80095be:	4603      	mov	r3, r0
 80095c0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80095c4:	4a0a      	ldr	r2, [pc, #40]	; (80095f0 <check_fs+0xa4>)
 80095c6:	4293      	cmp	r3, r2
 80095c8:	d101      	bne.n	80095ce <check_fs+0x82>
 80095ca:	2300      	movs	r3, #0
 80095cc:	e00c      	b.n	80095e8 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	3338      	adds	r3, #56	; 0x38
 80095d2:	3352      	adds	r3, #82	; 0x52
 80095d4:	4618      	mov	r0, r3
 80095d6:	f7fe f853 	bl	8007680 <ld_dword>
 80095da:	4603      	mov	r3, r0
 80095dc:	4a05      	ldr	r2, [pc, #20]	; (80095f4 <check_fs+0xa8>)
 80095de:	4293      	cmp	r3, r2
 80095e0:	d101      	bne.n	80095e6 <check_fs+0x9a>
 80095e2:	2300      	movs	r3, #0
 80095e4:	e000      	b.n	80095e8 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80095e6:	2302      	movs	r3, #2
}
 80095e8:	4618      	mov	r0, r3
 80095ea:	3708      	adds	r7, #8
 80095ec:	46bd      	mov	sp, r7
 80095ee:	bd80      	pop	{r7, pc}
 80095f0:	00544146 	.word	0x00544146
 80095f4:	33544146 	.word	0x33544146

080095f8 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80095f8:	b580      	push	{r7, lr}
 80095fa:	b096      	sub	sp, #88	; 0x58
 80095fc:	af00      	add	r7, sp, #0
 80095fe:	60f8      	str	r0, [r7, #12]
 8009600:	60b9      	str	r1, [r7, #8]
 8009602:	4613      	mov	r3, r2
 8009604:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8009606:	68bb      	ldr	r3, [r7, #8]
 8009608:	2200      	movs	r2, #0
 800960a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800960c:	68f8      	ldr	r0, [r7, #12]
 800960e:	f7ff ff59 	bl	80094c4 <get_ldnumber>
 8009612:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8009614:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009616:	2b00      	cmp	r3, #0
 8009618:	da01      	bge.n	800961e <find_volume+0x26>
 800961a:	230b      	movs	r3, #11
 800961c:	e265      	b.n	8009aea <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800961e:	4a9f      	ldr	r2, [pc, #636]	; (800989c <find_volume+0x2a4>)
 8009620:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009622:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009626:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8009628:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800962a:	2b00      	cmp	r3, #0
 800962c:	d101      	bne.n	8009632 <find_volume+0x3a>
 800962e:	230c      	movs	r3, #12
 8009630:	e25b      	b.n	8009aea <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8009632:	68bb      	ldr	r3, [r7, #8]
 8009634:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009636:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8009638:	79fb      	ldrb	r3, [r7, #7]
 800963a:	f023 0301 	bic.w	r3, r3, #1
 800963e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8009640:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009642:	781b      	ldrb	r3, [r3, #0]
 8009644:	2b00      	cmp	r3, #0
 8009646:	d01a      	beq.n	800967e <find_volume+0x86>
		stat = disk_status(fs->drv);
 8009648:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800964a:	785b      	ldrb	r3, [r3, #1]
 800964c:	4618      	mov	r0, r3
 800964e:	f7fd ff61 	bl	8007514 <disk_status>
 8009652:	4603      	mov	r3, r0
 8009654:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8009658:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800965c:	f003 0301 	and.w	r3, r3, #1
 8009660:	2b00      	cmp	r3, #0
 8009662:	d10c      	bne.n	800967e <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8009664:	79fb      	ldrb	r3, [r7, #7]
 8009666:	2b00      	cmp	r3, #0
 8009668:	d007      	beq.n	800967a <find_volume+0x82>
 800966a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800966e:	f003 0304 	and.w	r3, r3, #4
 8009672:	2b00      	cmp	r3, #0
 8009674:	d001      	beq.n	800967a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8009676:	230a      	movs	r3, #10
 8009678:	e237      	b.n	8009aea <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 800967a:	2300      	movs	r3, #0
 800967c:	e235      	b.n	8009aea <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800967e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009680:	2200      	movs	r2, #0
 8009682:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8009684:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009686:	b2da      	uxtb	r2, r3
 8009688:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800968a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800968c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800968e:	785b      	ldrb	r3, [r3, #1]
 8009690:	4618      	mov	r0, r3
 8009692:	f7fd ff59 	bl	8007548 <disk_initialize>
 8009696:	4603      	mov	r3, r0
 8009698:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800969c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80096a0:	f003 0301 	and.w	r3, r3, #1
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d001      	beq.n	80096ac <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80096a8:	2303      	movs	r3, #3
 80096aa:	e21e      	b.n	8009aea <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80096ac:	79fb      	ldrb	r3, [r7, #7]
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d007      	beq.n	80096c2 <find_volume+0xca>
 80096b2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80096b6:	f003 0304 	and.w	r3, r3, #4
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d001      	beq.n	80096c2 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 80096be:	230a      	movs	r3, #10
 80096c0:	e213      	b.n	8009aea <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 80096c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096c4:	7858      	ldrb	r0, [r3, #1]
 80096c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096c8:	330c      	adds	r3, #12
 80096ca:	461a      	mov	r2, r3
 80096cc:	2102      	movs	r1, #2
 80096ce:	f7fd ffa1 	bl	8007614 <disk_ioctl>
 80096d2:	4603      	mov	r3, r0
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d001      	beq.n	80096dc <find_volume+0xe4>
 80096d8:	2301      	movs	r3, #1
 80096da:	e206      	b.n	8009aea <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 80096dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096de:	899b      	ldrh	r3, [r3, #12]
 80096e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80096e4:	d80d      	bhi.n	8009702 <find_volume+0x10a>
 80096e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096e8:	899b      	ldrh	r3, [r3, #12]
 80096ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80096ee:	d308      	bcc.n	8009702 <find_volume+0x10a>
 80096f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096f2:	899b      	ldrh	r3, [r3, #12]
 80096f4:	461a      	mov	r2, r3
 80096f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096f8:	899b      	ldrh	r3, [r3, #12]
 80096fa:	3b01      	subs	r3, #1
 80096fc:	4013      	ands	r3, r2
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d001      	beq.n	8009706 <find_volume+0x10e>
 8009702:	2301      	movs	r3, #1
 8009704:	e1f1      	b.n	8009aea <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8009706:	2300      	movs	r3, #0
 8009708:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800970a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800970c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800970e:	f7ff ff1d 	bl	800954c <check_fs>
 8009712:	4603      	mov	r3, r0
 8009714:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8009718:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800971c:	2b02      	cmp	r3, #2
 800971e:	d149      	bne.n	80097b4 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8009720:	2300      	movs	r3, #0
 8009722:	643b      	str	r3, [r7, #64]	; 0x40
 8009724:	e01e      	b.n	8009764 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8009726:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009728:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800972c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800972e:	011b      	lsls	r3, r3, #4
 8009730:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8009734:	4413      	add	r3, r2
 8009736:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8009738:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800973a:	3304      	adds	r3, #4
 800973c:	781b      	ldrb	r3, [r3, #0]
 800973e:	2b00      	cmp	r3, #0
 8009740:	d006      	beq.n	8009750 <find_volume+0x158>
 8009742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009744:	3308      	adds	r3, #8
 8009746:	4618      	mov	r0, r3
 8009748:	f7fd ff9a 	bl	8007680 <ld_dword>
 800974c:	4602      	mov	r2, r0
 800974e:	e000      	b.n	8009752 <find_volume+0x15a>
 8009750:	2200      	movs	r2, #0
 8009752:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009754:	009b      	lsls	r3, r3, #2
 8009756:	3358      	adds	r3, #88	; 0x58
 8009758:	443b      	add	r3, r7
 800975a:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800975e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009760:	3301      	adds	r3, #1
 8009762:	643b      	str	r3, [r7, #64]	; 0x40
 8009764:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009766:	2b03      	cmp	r3, #3
 8009768:	d9dd      	bls.n	8009726 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800976a:	2300      	movs	r3, #0
 800976c:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800976e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009770:	2b00      	cmp	r3, #0
 8009772:	d002      	beq.n	800977a <find_volume+0x182>
 8009774:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009776:	3b01      	subs	r3, #1
 8009778:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800977a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800977c:	009b      	lsls	r3, r3, #2
 800977e:	3358      	adds	r3, #88	; 0x58
 8009780:	443b      	add	r3, r7
 8009782:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8009786:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8009788:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800978a:	2b00      	cmp	r3, #0
 800978c:	d005      	beq.n	800979a <find_volume+0x1a2>
 800978e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009790:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009792:	f7ff fedb 	bl	800954c <check_fs>
 8009796:	4603      	mov	r3, r0
 8009798:	e000      	b.n	800979c <find_volume+0x1a4>
 800979a:	2303      	movs	r3, #3
 800979c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80097a0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80097a4:	2b01      	cmp	r3, #1
 80097a6:	d905      	bls.n	80097b4 <find_volume+0x1bc>
 80097a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80097aa:	3301      	adds	r3, #1
 80097ac:	643b      	str	r3, [r7, #64]	; 0x40
 80097ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80097b0:	2b03      	cmp	r3, #3
 80097b2:	d9e2      	bls.n	800977a <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80097b4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80097b8:	2b04      	cmp	r3, #4
 80097ba:	d101      	bne.n	80097c0 <find_volume+0x1c8>
 80097bc:	2301      	movs	r3, #1
 80097be:	e194      	b.n	8009aea <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80097c0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80097c4:	2b01      	cmp	r3, #1
 80097c6:	d901      	bls.n	80097cc <find_volume+0x1d4>
 80097c8:	230d      	movs	r3, #13
 80097ca:	e18e      	b.n	8009aea <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80097cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097ce:	3338      	adds	r3, #56	; 0x38
 80097d0:	330b      	adds	r3, #11
 80097d2:	4618      	mov	r0, r3
 80097d4:	f7fd ff3c 	bl	8007650 <ld_word>
 80097d8:	4603      	mov	r3, r0
 80097da:	461a      	mov	r2, r3
 80097dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097de:	899b      	ldrh	r3, [r3, #12]
 80097e0:	429a      	cmp	r2, r3
 80097e2:	d001      	beq.n	80097e8 <find_volume+0x1f0>
 80097e4:	230d      	movs	r3, #13
 80097e6:	e180      	b.n	8009aea <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80097e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097ea:	3338      	adds	r3, #56	; 0x38
 80097ec:	3316      	adds	r3, #22
 80097ee:	4618      	mov	r0, r3
 80097f0:	f7fd ff2e 	bl	8007650 <ld_word>
 80097f4:	4603      	mov	r3, r0
 80097f6:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80097f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d106      	bne.n	800980c <find_volume+0x214>
 80097fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009800:	3338      	adds	r3, #56	; 0x38
 8009802:	3324      	adds	r3, #36	; 0x24
 8009804:	4618      	mov	r0, r3
 8009806:	f7fd ff3b 	bl	8007680 <ld_dword>
 800980a:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800980c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800980e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009810:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8009812:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009814:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8009818:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800981a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800981c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800981e:	789b      	ldrb	r3, [r3, #2]
 8009820:	2b01      	cmp	r3, #1
 8009822:	d005      	beq.n	8009830 <find_volume+0x238>
 8009824:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009826:	789b      	ldrb	r3, [r3, #2]
 8009828:	2b02      	cmp	r3, #2
 800982a:	d001      	beq.n	8009830 <find_volume+0x238>
 800982c:	230d      	movs	r3, #13
 800982e:	e15c      	b.n	8009aea <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8009830:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009832:	789b      	ldrb	r3, [r3, #2]
 8009834:	461a      	mov	r2, r3
 8009836:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009838:	fb02 f303 	mul.w	r3, r2, r3
 800983c:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800983e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009840:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009844:	b29a      	uxth	r2, r3
 8009846:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009848:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800984a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800984c:	895b      	ldrh	r3, [r3, #10]
 800984e:	2b00      	cmp	r3, #0
 8009850:	d008      	beq.n	8009864 <find_volume+0x26c>
 8009852:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009854:	895b      	ldrh	r3, [r3, #10]
 8009856:	461a      	mov	r2, r3
 8009858:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800985a:	895b      	ldrh	r3, [r3, #10]
 800985c:	3b01      	subs	r3, #1
 800985e:	4013      	ands	r3, r2
 8009860:	2b00      	cmp	r3, #0
 8009862:	d001      	beq.n	8009868 <find_volume+0x270>
 8009864:	230d      	movs	r3, #13
 8009866:	e140      	b.n	8009aea <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8009868:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800986a:	3338      	adds	r3, #56	; 0x38
 800986c:	3311      	adds	r3, #17
 800986e:	4618      	mov	r0, r3
 8009870:	f7fd feee 	bl	8007650 <ld_word>
 8009874:	4603      	mov	r3, r0
 8009876:	461a      	mov	r2, r3
 8009878:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800987a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800987c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800987e:	891b      	ldrh	r3, [r3, #8]
 8009880:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009882:	8992      	ldrh	r2, [r2, #12]
 8009884:	0952      	lsrs	r2, r2, #5
 8009886:	b292      	uxth	r2, r2
 8009888:	fbb3 f1f2 	udiv	r1, r3, r2
 800988c:	fb01 f202 	mul.w	r2, r1, r2
 8009890:	1a9b      	subs	r3, r3, r2
 8009892:	b29b      	uxth	r3, r3
 8009894:	2b00      	cmp	r3, #0
 8009896:	d003      	beq.n	80098a0 <find_volume+0x2a8>
 8009898:	230d      	movs	r3, #13
 800989a:	e126      	b.n	8009aea <find_volume+0x4f2>
 800989c:	20003d44 	.word	0x20003d44

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80098a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098a2:	3338      	adds	r3, #56	; 0x38
 80098a4:	3313      	adds	r3, #19
 80098a6:	4618      	mov	r0, r3
 80098a8:	f7fd fed2 	bl	8007650 <ld_word>
 80098ac:	4603      	mov	r3, r0
 80098ae:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80098b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d106      	bne.n	80098c4 <find_volume+0x2cc>
 80098b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098b8:	3338      	adds	r3, #56	; 0x38
 80098ba:	3320      	adds	r3, #32
 80098bc:	4618      	mov	r0, r3
 80098be:	f7fd fedf 	bl	8007680 <ld_dword>
 80098c2:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80098c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098c6:	3338      	adds	r3, #56	; 0x38
 80098c8:	330e      	adds	r3, #14
 80098ca:	4618      	mov	r0, r3
 80098cc:	f7fd fec0 	bl	8007650 <ld_word>
 80098d0:	4603      	mov	r3, r0
 80098d2:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80098d4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d101      	bne.n	80098de <find_volume+0x2e6>
 80098da:	230d      	movs	r3, #13
 80098dc:	e105      	b.n	8009aea <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80098de:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80098e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80098e2:	4413      	add	r3, r2
 80098e4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80098e6:	8911      	ldrh	r1, [r2, #8]
 80098e8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80098ea:	8992      	ldrh	r2, [r2, #12]
 80098ec:	0952      	lsrs	r2, r2, #5
 80098ee:	b292      	uxth	r2, r2
 80098f0:	fbb1 f2f2 	udiv	r2, r1, r2
 80098f4:	b292      	uxth	r2, r2
 80098f6:	4413      	add	r3, r2
 80098f8:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80098fa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80098fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098fe:	429a      	cmp	r2, r3
 8009900:	d201      	bcs.n	8009906 <find_volume+0x30e>
 8009902:	230d      	movs	r3, #13
 8009904:	e0f1      	b.n	8009aea <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8009906:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009908:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800990a:	1ad3      	subs	r3, r2, r3
 800990c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800990e:	8952      	ldrh	r2, [r2, #10]
 8009910:	fbb3 f3f2 	udiv	r3, r3, r2
 8009914:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8009916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009918:	2b00      	cmp	r3, #0
 800991a:	d101      	bne.n	8009920 <find_volume+0x328>
 800991c:	230d      	movs	r3, #13
 800991e:	e0e4      	b.n	8009aea <find_volume+0x4f2>
		fmt = FS_FAT32;
 8009920:	2303      	movs	r3, #3
 8009922:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8009926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009928:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800992c:	4293      	cmp	r3, r2
 800992e:	d802      	bhi.n	8009936 <find_volume+0x33e>
 8009930:	2302      	movs	r3, #2
 8009932:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8009936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009938:	f640 72f5 	movw	r2, #4085	; 0xff5
 800993c:	4293      	cmp	r3, r2
 800993e:	d802      	bhi.n	8009946 <find_volume+0x34e>
 8009940:	2301      	movs	r3, #1
 8009942:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8009946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009948:	1c9a      	adds	r2, r3, #2
 800994a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800994c:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 800994e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009950:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009952:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8009954:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8009956:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009958:	441a      	add	r2, r3
 800995a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800995c:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 800995e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009962:	441a      	add	r2, r3
 8009964:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009966:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 8009968:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800996c:	2b03      	cmp	r3, #3
 800996e:	d11e      	bne.n	80099ae <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8009970:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009972:	3338      	adds	r3, #56	; 0x38
 8009974:	332a      	adds	r3, #42	; 0x2a
 8009976:	4618      	mov	r0, r3
 8009978:	f7fd fe6a 	bl	8007650 <ld_word>
 800997c:	4603      	mov	r3, r0
 800997e:	2b00      	cmp	r3, #0
 8009980:	d001      	beq.n	8009986 <find_volume+0x38e>
 8009982:	230d      	movs	r3, #13
 8009984:	e0b1      	b.n	8009aea <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8009986:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009988:	891b      	ldrh	r3, [r3, #8]
 800998a:	2b00      	cmp	r3, #0
 800998c:	d001      	beq.n	8009992 <find_volume+0x39a>
 800998e:	230d      	movs	r3, #13
 8009990:	e0ab      	b.n	8009aea <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8009992:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009994:	3338      	adds	r3, #56	; 0x38
 8009996:	332c      	adds	r3, #44	; 0x2c
 8009998:	4618      	mov	r0, r3
 800999a:	f7fd fe71 	bl	8007680 <ld_dword>
 800999e:	4602      	mov	r2, r0
 80099a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099a2:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80099a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099a6:	69db      	ldr	r3, [r3, #28]
 80099a8:	009b      	lsls	r3, r3, #2
 80099aa:	647b      	str	r3, [r7, #68]	; 0x44
 80099ac:	e01f      	b.n	80099ee <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80099ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099b0:	891b      	ldrh	r3, [r3, #8]
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d101      	bne.n	80099ba <find_volume+0x3c2>
 80099b6:	230d      	movs	r3, #13
 80099b8:	e097      	b.n	8009aea <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80099ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80099be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80099c0:	441a      	add	r2, r3
 80099c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099c4:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80099c6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80099ca:	2b02      	cmp	r3, #2
 80099cc:	d103      	bne.n	80099d6 <find_volume+0x3de>
 80099ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099d0:	69db      	ldr	r3, [r3, #28]
 80099d2:	005b      	lsls	r3, r3, #1
 80099d4:	e00a      	b.n	80099ec <find_volume+0x3f4>
 80099d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099d8:	69da      	ldr	r2, [r3, #28]
 80099da:	4613      	mov	r3, r2
 80099dc:	005b      	lsls	r3, r3, #1
 80099de:	4413      	add	r3, r2
 80099e0:	085a      	lsrs	r2, r3, #1
 80099e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099e4:	69db      	ldr	r3, [r3, #28]
 80099e6:	f003 0301 	and.w	r3, r3, #1
 80099ea:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80099ec:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80099ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099f0:	6a1a      	ldr	r2, [r3, #32]
 80099f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099f4:	899b      	ldrh	r3, [r3, #12]
 80099f6:	4619      	mov	r1, r3
 80099f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80099fa:	440b      	add	r3, r1
 80099fc:	3b01      	subs	r3, #1
 80099fe:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009a00:	8989      	ldrh	r1, [r1, #12]
 8009a02:	fbb3 f3f1 	udiv	r3, r3, r1
 8009a06:	429a      	cmp	r2, r3
 8009a08:	d201      	bcs.n	8009a0e <find_volume+0x416>
 8009a0a:	230d      	movs	r3, #13
 8009a0c:	e06d      	b.n	8009aea <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8009a0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a10:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009a14:	619a      	str	r2, [r3, #24]
 8009a16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a18:	699a      	ldr	r2, [r3, #24]
 8009a1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a1c:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 8009a1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a20:	2280      	movs	r2, #128	; 0x80
 8009a22:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8009a24:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009a28:	2b03      	cmp	r3, #3
 8009a2a:	d149      	bne.n	8009ac0 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8009a2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a2e:	3338      	adds	r3, #56	; 0x38
 8009a30:	3330      	adds	r3, #48	; 0x30
 8009a32:	4618      	mov	r0, r3
 8009a34:	f7fd fe0c 	bl	8007650 <ld_word>
 8009a38:	4603      	mov	r3, r0
 8009a3a:	2b01      	cmp	r3, #1
 8009a3c:	d140      	bne.n	8009ac0 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 8009a3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009a40:	3301      	adds	r3, #1
 8009a42:	4619      	mov	r1, r3
 8009a44:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009a46:	f7fe f8b3 	bl	8007bb0 <move_window>
 8009a4a:	4603      	mov	r3, r0
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d137      	bne.n	8009ac0 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 8009a50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a52:	2200      	movs	r2, #0
 8009a54:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8009a56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a58:	3338      	adds	r3, #56	; 0x38
 8009a5a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009a5e:	4618      	mov	r0, r3
 8009a60:	f7fd fdf6 	bl	8007650 <ld_word>
 8009a64:	4603      	mov	r3, r0
 8009a66:	461a      	mov	r2, r3
 8009a68:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8009a6c:	429a      	cmp	r2, r3
 8009a6e:	d127      	bne.n	8009ac0 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8009a70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a72:	3338      	adds	r3, #56	; 0x38
 8009a74:	4618      	mov	r0, r3
 8009a76:	f7fd fe03 	bl	8007680 <ld_dword>
 8009a7a:	4603      	mov	r3, r0
 8009a7c:	4a1d      	ldr	r2, [pc, #116]	; (8009af4 <find_volume+0x4fc>)
 8009a7e:	4293      	cmp	r3, r2
 8009a80:	d11e      	bne.n	8009ac0 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8009a82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a84:	3338      	adds	r3, #56	; 0x38
 8009a86:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8009a8a:	4618      	mov	r0, r3
 8009a8c:	f7fd fdf8 	bl	8007680 <ld_dword>
 8009a90:	4603      	mov	r3, r0
 8009a92:	4a19      	ldr	r2, [pc, #100]	; (8009af8 <find_volume+0x500>)
 8009a94:	4293      	cmp	r3, r2
 8009a96:	d113      	bne.n	8009ac0 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8009a98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a9a:	3338      	adds	r3, #56	; 0x38
 8009a9c:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8009aa0:	4618      	mov	r0, r3
 8009aa2:	f7fd fded 	bl	8007680 <ld_dword>
 8009aa6:	4602      	mov	r2, r0
 8009aa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009aaa:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8009aac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009aae:	3338      	adds	r3, #56	; 0x38
 8009ab0:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8009ab4:	4618      	mov	r0, r3
 8009ab6:	f7fd fde3 	bl	8007680 <ld_dword>
 8009aba:	4602      	mov	r2, r0
 8009abc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009abe:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8009ac0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ac2:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8009ac6:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8009ac8:	4b0c      	ldr	r3, [pc, #48]	; (8009afc <find_volume+0x504>)
 8009aca:	881b      	ldrh	r3, [r3, #0]
 8009acc:	3301      	adds	r3, #1
 8009ace:	b29a      	uxth	r2, r3
 8009ad0:	4b0a      	ldr	r3, [pc, #40]	; (8009afc <find_volume+0x504>)
 8009ad2:	801a      	strh	r2, [r3, #0]
 8009ad4:	4b09      	ldr	r3, [pc, #36]	; (8009afc <find_volume+0x504>)
 8009ad6:	881a      	ldrh	r2, [r3, #0]
 8009ad8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ada:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8009adc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ade:	4a08      	ldr	r2, [pc, #32]	; (8009b00 <find_volume+0x508>)
 8009ae0:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8009ae2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009ae4:	f7fd fffc 	bl	8007ae0 <clear_lock>
#endif
	return FR_OK;
 8009ae8:	2300      	movs	r3, #0
}
 8009aea:	4618      	mov	r0, r3
 8009aec:	3758      	adds	r7, #88	; 0x58
 8009aee:	46bd      	mov	sp, r7
 8009af0:	bd80      	pop	{r7, pc}
 8009af2:	bf00      	nop
 8009af4:	41615252 	.word	0x41615252
 8009af8:	61417272 	.word	0x61417272
 8009afc:	20003d48 	.word	0x20003d48
 8009b00:	20003d6c 	.word	0x20003d6c

08009b04 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8009b04:	b580      	push	{r7, lr}
 8009b06:	b084      	sub	sp, #16
 8009b08:	af00      	add	r7, sp, #0
 8009b0a:	6078      	str	r0, [r7, #4]
 8009b0c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8009b0e:	2309      	movs	r3, #9
 8009b10:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d01c      	beq.n	8009b52 <validate+0x4e>
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d018      	beq.n	8009b52 <validate+0x4e>
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	781b      	ldrb	r3, [r3, #0]
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d013      	beq.n	8009b52 <validate+0x4e>
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	889a      	ldrh	r2, [r3, #4]
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	88db      	ldrh	r3, [r3, #6]
 8009b34:	429a      	cmp	r2, r3
 8009b36:	d10c      	bne.n	8009b52 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	785b      	ldrb	r3, [r3, #1]
 8009b3e:	4618      	mov	r0, r3
 8009b40:	f7fd fce8 	bl	8007514 <disk_status>
 8009b44:	4603      	mov	r3, r0
 8009b46:	f003 0301 	and.w	r3, r3, #1
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d101      	bne.n	8009b52 <validate+0x4e>
			res = FR_OK;
 8009b4e:	2300      	movs	r3, #0
 8009b50:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8009b52:	7bfb      	ldrb	r3, [r7, #15]
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d102      	bne.n	8009b5e <validate+0x5a>
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	e000      	b.n	8009b60 <validate+0x5c>
 8009b5e:	2300      	movs	r3, #0
 8009b60:	683a      	ldr	r2, [r7, #0]
 8009b62:	6013      	str	r3, [r2, #0]
	return res;
 8009b64:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b66:	4618      	mov	r0, r3
 8009b68:	3710      	adds	r7, #16
 8009b6a:	46bd      	mov	sp, r7
 8009b6c:	bd80      	pop	{r7, pc}
	...

08009b70 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8009b70:	b580      	push	{r7, lr}
 8009b72:	b088      	sub	sp, #32
 8009b74:	af00      	add	r7, sp, #0
 8009b76:	60f8      	str	r0, [r7, #12]
 8009b78:	60b9      	str	r1, [r7, #8]
 8009b7a:	4613      	mov	r3, r2
 8009b7c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8009b7e:	68bb      	ldr	r3, [r7, #8]
 8009b80:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8009b82:	f107 0310 	add.w	r3, r7, #16
 8009b86:	4618      	mov	r0, r3
 8009b88:	f7ff fc9c 	bl	80094c4 <get_ldnumber>
 8009b8c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8009b8e:	69fb      	ldr	r3, [r7, #28]
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	da01      	bge.n	8009b98 <f_mount+0x28>
 8009b94:	230b      	movs	r3, #11
 8009b96:	e02b      	b.n	8009bf0 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8009b98:	4a17      	ldr	r2, [pc, #92]	; (8009bf8 <f_mount+0x88>)
 8009b9a:	69fb      	ldr	r3, [r7, #28]
 8009b9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009ba0:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8009ba2:	69bb      	ldr	r3, [r7, #24]
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d005      	beq.n	8009bb4 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8009ba8:	69b8      	ldr	r0, [r7, #24]
 8009baa:	f7fd ff99 	bl	8007ae0 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8009bae:	69bb      	ldr	r3, [r7, #24]
 8009bb0:	2200      	movs	r2, #0
 8009bb2:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d002      	beq.n	8009bc0 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	2200      	movs	r2, #0
 8009bbe:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8009bc0:	68fa      	ldr	r2, [r7, #12]
 8009bc2:	490d      	ldr	r1, [pc, #52]	; (8009bf8 <f_mount+0x88>)
 8009bc4:	69fb      	ldr	r3, [r7, #28]
 8009bc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d002      	beq.n	8009bd6 <f_mount+0x66>
 8009bd0:	79fb      	ldrb	r3, [r7, #7]
 8009bd2:	2b01      	cmp	r3, #1
 8009bd4:	d001      	beq.n	8009bda <f_mount+0x6a>
 8009bd6:	2300      	movs	r3, #0
 8009bd8:	e00a      	b.n	8009bf0 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8009bda:	f107 010c 	add.w	r1, r7, #12
 8009bde:	f107 0308 	add.w	r3, r7, #8
 8009be2:	2200      	movs	r2, #0
 8009be4:	4618      	mov	r0, r3
 8009be6:	f7ff fd07 	bl	80095f8 <find_volume>
 8009bea:	4603      	mov	r3, r0
 8009bec:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8009bee:	7dfb      	ldrb	r3, [r7, #23]
}
 8009bf0:	4618      	mov	r0, r3
 8009bf2:	3720      	adds	r7, #32
 8009bf4:	46bd      	mov	sp, r7
 8009bf6:	bd80      	pop	{r7, pc}
 8009bf8:	20003d44 	.word	0x20003d44

08009bfc <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8009bfc:	b580      	push	{r7, lr}
 8009bfe:	b09a      	sub	sp, #104	; 0x68
 8009c00:	af00      	add	r7, sp, #0
 8009c02:	60f8      	str	r0, [r7, #12]
 8009c04:	60b9      	str	r1, [r7, #8]
 8009c06:	4613      	mov	r3, r2
 8009c08:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d101      	bne.n	8009c14 <f_open+0x18>
 8009c10:	2309      	movs	r3, #9
 8009c12:	e1bb      	b.n	8009f8c <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8009c14:	79fb      	ldrb	r3, [r7, #7]
 8009c16:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009c1a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8009c1c:	79fa      	ldrb	r2, [r7, #7]
 8009c1e:	f107 0114 	add.w	r1, r7, #20
 8009c22:	f107 0308 	add.w	r3, r7, #8
 8009c26:	4618      	mov	r0, r3
 8009c28:	f7ff fce6 	bl	80095f8 <find_volume>
 8009c2c:	4603      	mov	r3, r0
 8009c2e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 8009c32:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	f040 819f 	bne.w	8009f7a <f_open+0x37e>
		dj.obj.fs = fs;
 8009c3c:	697b      	ldr	r3, [r7, #20]
 8009c3e:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8009c40:	68ba      	ldr	r2, [r7, #8]
 8009c42:	f107 0318 	add.w	r3, r7, #24
 8009c46:	4611      	mov	r1, r2
 8009c48:	4618      	mov	r0, r3
 8009c4a:	f7ff fbc5 	bl	80093d8 <follow_path>
 8009c4e:	4603      	mov	r3, r0
 8009c50:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8009c54:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d11a      	bne.n	8009c92 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8009c5c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8009c60:	b25b      	sxtb	r3, r3
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	da03      	bge.n	8009c6e <f_open+0x72>
				res = FR_INVALID_NAME;
 8009c66:	2306      	movs	r3, #6
 8009c68:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8009c6c:	e011      	b.n	8009c92 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8009c6e:	79fb      	ldrb	r3, [r7, #7]
 8009c70:	f023 0301 	bic.w	r3, r3, #1
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	bf14      	ite	ne
 8009c78:	2301      	movne	r3, #1
 8009c7a:	2300      	moveq	r3, #0
 8009c7c:	b2db      	uxtb	r3, r3
 8009c7e:	461a      	mov	r2, r3
 8009c80:	f107 0318 	add.w	r3, r7, #24
 8009c84:	4611      	mov	r1, r2
 8009c86:	4618      	mov	r0, r3
 8009c88:	f7fd fde2 	bl	8007850 <chk_lock>
 8009c8c:	4603      	mov	r3, r0
 8009c8e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8009c92:	79fb      	ldrb	r3, [r7, #7]
 8009c94:	f003 031c 	and.w	r3, r3, #28
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d07f      	beq.n	8009d9c <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8009c9c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d017      	beq.n	8009cd4 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8009ca4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8009ca8:	2b04      	cmp	r3, #4
 8009caa:	d10e      	bne.n	8009cca <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8009cac:	f7fd fe2c 	bl	8007908 <enq_lock>
 8009cb0:	4603      	mov	r3, r0
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d006      	beq.n	8009cc4 <f_open+0xc8>
 8009cb6:	f107 0318 	add.w	r3, r7, #24
 8009cba:	4618      	mov	r0, r3
 8009cbc:	f7ff f892 	bl	8008de4 <dir_register>
 8009cc0:	4603      	mov	r3, r0
 8009cc2:	e000      	b.n	8009cc6 <f_open+0xca>
 8009cc4:	2312      	movs	r3, #18
 8009cc6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8009cca:	79fb      	ldrb	r3, [r7, #7]
 8009ccc:	f043 0308 	orr.w	r3, r3, #8
 8009cd0:	71fb      	strb	r3, [r7, #7]
 8009cd2:	e010      	b.n	8009cf6 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8009cd4:	7fbb      	ldrb	r3, [r7, #30]
 8009cd6:	f003 0311 	and.w	r3, r3, #17
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d003      	beq.n	8009ce6 <f_open+0xea>
					res = FR_DENIED;
 8009cde:	2307      	movs	r3, #7
 8009ce0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8009ce4:	e007      	b.n	8009cf6 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8009ce6:	79fb      	ldrb	r3, [r7, #7]
 8009ce8:	f003 0304 	and.w	r3, r3, #4
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d002      	beq.n	8009cf6 <f_open+0xfa>
 8009cf0:	2308      	movs	r3, #8
 8009cf2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8009cf6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d168      	bne.n	8009dd0 <f_open+0x1d4>
 8009cfe:	79fb      	ldrb	r3, [r7, #7]
 8009d00:	f003 0308 	and.w	r3, r3, #8
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d063      	beq.n	8009dd0 <f_open+0x1d4>
				dw = GET_FATTIME();
 8009d08:	f7fd fba6 	bl	8007458 <get_fattime>
 8009d0c:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8009d0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d10:	330e      	adds	r3, #14
 8009d12:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009d14:	4618      	mov	r0, r3
 8009d16:	f7fd fcf1 	bl	80076fc <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8009d1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d1c:	3316      	adds	r3, #22
 8009d1e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009d20:	4618      	mov	r0, r3
 8009d22:	f7fd fceb 	bl	80076fc <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8009d26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d28:	330b      	adds	r3, #11
 8009d2a:	2220      	movs	r2, #32
 8009d2c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8009d2e:	697b      	ldr	r3, [r7, #20]
 8009d30:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009d32:	4611      	mov	r1, r2
 8009d34:	4618      	mov	r0, r3
 8009d36:	f7fe fcc3 	bl	80086c0 <ld_clust>
 8009d3a:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8009d3c:	697b      	ldr	r3, [r7, #20]
 8009d3e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009d40:	2200      	movs	r2, #0
 8009d42:	4618      	mov	r0, r3
 8009d44:	f7fe fcdb 	bl	80086fe <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8009d48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d4a:	331c      	adds	r3, #28
 8009d4c:	2100      	movs	r1, #0
 8009d4e:	4618      	mov	r0, r3
 8009d50:	f7fd fcd4 	bl	80076fc <st_dword>
					fs->wflag = 1;
 8009d54:	697b      	ldr	r3, [r7, #20]
 8009d56:	2201      	movs	r2, #1
 8009d58:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8009d5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d037      	beq.n	8009dd0 <f_open+0x1d4>
						dw = fs->winsect;
 8009d60:	697b      	ldr	r3, [r7, #20]
 8009d62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d64:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 8009d66:	f107 0318 	add.w	r3, r7, #24
 8009d6a:	2200      	movs	r2, #0
 8009d6c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009d6e:	4618      	mov	r0, r3
 8009d70:	f7fe f9cb 	bl	800810a <remove_chain>
 8009d74:	4603      	mov	r3, r0
 8009d76:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 8009d7a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d126      	bne.n	8009dd0 <f_open+0x1d4>
							res = move_window(fs, dw);
 8009d82:	697b      	ldr	r3, [r7, #20]
 8009d84:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009d86:	4618      	mov	r0, r3
 8009d88:	f7fd ff12 	bl	8007bb0 <move_window>
 8009d8c:	4603      	mov	r3, r0
 8009d8e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8009d92:	697b      	ldr	r3, [r7, #20]
 8009d94:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009d96:	3a01      	subs	r2, #1
 8009d98:	615a      	str	r2, [r3, #20]
 8009d9a:	e019      	b.n	8009dd0 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8009d9c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d115      	bne.n	8009dd0 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8009da4:	7fbb      	ldrb	r3, [r7, #30]
 8009da6:	f003 0310 	and.w	r3, r3, #16
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d003      	beq.n	8009db6 <f_open+0x1ba>
					res = FR_NO_FILE;
 8009dae:	2304      	movs	r3, #4
 8009db0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8009db4:	e00c      	b.n	8009dd0 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8009db6:	79fb      	ldrb	r3, [r7, #7]
 8009db8:	f003 0302 	and.w	r3, r3, #2
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d007      	beq.n	8009dd0 <f_open+0x1d4>
 8009dc0:	7fbb      	ldrb	r3, [r7, #30]
 8009dc2:	f003 0301 	and.w	r3, r3, #1
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d002      	beq.n	8009dd0 <f_open+0x1d4>
						res = FR_DENIED;
 8009dca:	2307      	movs	r3, #7
 8009dcc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 8009dd0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d128      	bne.n	8009e2a <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8009dd8:	79fb      	ldrb	r3, [r7, #7]
 8009dda:	f003 0308 	and.w	r3, r3, #8
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d003      	beq.n	8009dea <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8009de2:	79fb      	ldrb	r3, [r7, #7]
 8009de4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009de8:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8009dea:	697b      	ldr	r3, [r7, #20]
 8009dec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8009df2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8009df8:	79fb      	ldrb	r3, [r7, #7]
 8009dfa:	f023 0301 	bic.w	r3, r3, #1
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	bf14      	ite	ne
 8009e02:	2301      	movne	r3, #1
 8009e04:	2300      	moveq	r3, #0
 8009e06:	b2db      	uxtb	r3, r3
 8009e08:	461a      	mov	r2, r3
 8009e0a:	f107 0318 	add.w	r3, r7, #24
 8009e0e:	4611      	mov	r1, r2
 8009e10:	4618      	mov	r0, r3
 8009e12:	f7fd fd9b 	bl	800794c <inc_lock>
 8009e16:	4602      	mov	r2, r0
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	691b      	ldr	r3, [r3, #16]
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d102      	bne.n	8009e2a <f_open+0x22e>
 8009e24:	2302      	movs	r3, #2
 8009e26:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 8009e2a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	f040 80a3 	bne.w	8009f7a <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8009e34:	697b      	ldr	r3, [r7, #20]
 8009e36:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009e38:	4611      	mov	r1, r2
 8009e3a:	4618      	mov	r0, r3
 8009e3c:	f7fe fc40 	bl	80086c0 <ld_clust>
 8009e40:	4602      	mov	r2, r0
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8009e46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e48:	331c      	adds	r3, #28
 8009e4a:	4618      	mov	r0, r3
 8009e4c:	f7fd fc18 	bl	8007680 <ld_dword>
 8009e50:	4602      	mov	r2, r0
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	2200      	movs	r2, #0
 8009e5a:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8009e5c:	697a      	ldr	r2, [r7, #20]
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8009e62:	697b      	ldr	r3, [r7, #20]
 8009e64:	88da      	ldrh	r2, [r3, #6]
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	79fa      	ldrb	r2, [r7, #7]
 8009e6e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	2200      	movs	r2, #0
 8009e74:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	2200      	movs	r2, #0
 8009e7a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	2200      	movs	r2, #0
 8009e80:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	3330      	adds	r3, #48	; 0x30
 8009e86:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8009e8a:	2100      	movs	r1, #0
 8009e8c:	4618      	mov	r0, r3
 8009e8e:	f7fd fc82 	bl	8007796 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8009e92:	79fb      	ldrb	r3, [r7, #7]
 8009e94:	f003 0320 	and.w	r3, r3, #32
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d06e      	beq.n	8009f7a <f_open+0x37e>
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	68db      	ldr	r3, [r3, #12]
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d06a      	beq.n	8009f7a <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	68da      	ldr	r2, [r3, #12]
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8009eac:	697b      	ldr	r3, [r7, #20]
 8009eae:	895b      	ldrh	r3, [r3, #10]
 8009eb0:	461a      	mov	r2, r3
 8009eb2:	697b      	ldr	r3, [r7, #20]
 8009eb4:	899b      	ldrh	r3, [r3, #12]
 8009eb6:	fb02 f303 	mul.w	r3, r2, r3
 8009eba:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	689b      	ldr	r3, [r3, #8]
 8009ec0:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	68db      	ldr	r3, [r3, #12]
 8009ec6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009ec8:	e016      	b.n	8009ef8 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8009ece:	4618      	mov	r0, r3
 8009ed0:	f7fd ff2b 	bl	8007d2a <get_fat>
 8009ed4:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 8009ed6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009ed8:	2b01      	cmp	r3, #1
 8009eda:	d802      	bhi.n	8009ee2 <f_open+0x2e6>
 8009edc:	2302      	movs	r3, #2
 8009ede:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8009ee2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009ee4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009ee8:	d102      	bne.n	8009ef0 <f_open+0x2f4>
 8009eea:	2301      	movs	r3, #1
 8009eec:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8009ef0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009ef2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009ef4:	1ad3      	subs	r3, r2, r3
 8009ef6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009ef8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d103      	bne.n	8009f08 <f_open+0x30c>
 8009f00:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009f02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009f04:	429a      	cmp	r2, r3
 8009f06:	d8e0      	bhi.n	8009eca <f_open+0x2ce>
				}
				fp->clust = clst;
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009f0c:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8009f0e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d131      	bne.n	8009f7a <f_open+0x37e>
 8009f16:	697b      	ldr	r3, [r7, #20]
 8009f18:	899b      	ldrh	r3, [r3, #12]
 8009f1a:	461a      	mov	r2, r3
 8009f1c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009f1e:	fbb3 f1f2 	udiv	r1, r3, r2
 8009f22:	fb01 f202 	mul.w	r2, r1, r2
 8009f26:	1a9b      	subs	r3, r3, r2
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d026      	beq.n	8009f7a <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8009f2c:	697b      	ldr	r3, [r7, #20]
 8009f2e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8009f30:	4618      	mov	r0, r3
 8009f32:	f7fd fedb 	bl	8007cec <clust2sect>
 8009f36:	64f8      	str	r0, [r7, #76]	; 0x4c
 8009f38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d103      	bne.n	8009f46 <f_open+0x34a>
						res = FR_INT_ERR;
 8009f3e:	2302      	movs	r3, #2
 8009f40:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8009f44:	e019      	b.n	8009f7a <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8009f46:	697b      	ldr	r3, [r7, #20]
 8009f48:	899b      	ldrh	r3, [r3, #12]
 8009f4a:	461a      	mov	r2, r3
 8009f4c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009f4e:	fbb3 f2f2 	udiv	r2, r3, r2
 8009f52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009f54:	441a      	add	r2, r3
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8009f5a:	697b      	ldr	r3, [r7, #20]
 8009f5c:	7858      	ldrb	r0, [r3, #1]
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	6a1a      	ldr	r2, [r3, #32]
 8009f68:	2301      	movs	r3, #1
 8009f6a:	f7fd fb13 	bl	8007594 <disk_read>
 8009f6e:	4603      	mov	r3, r0
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d002      	beq.n	8009f7a <f_open+0x37e>
 8009f74:	2301      	movs	r3, #1
 8009f76:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8009f7a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d002      	beq.n	8009f88 <f_open+0x38c>
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	2200      	movs	r2, #0
 8009f86:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8009f88:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8009f8c:	4618      	mov	r0, r3
 8009f8e:	3768      	adds	r7, #104	; 0x68
 8009f90:	46bd      	mov	sp, r7
 8009f92:	bd80      	pop	{r7, pc}

08009f94 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8009f94:	b580      	push	{r7, lr}
 8009f96:	b08c      	sub	sp, #48	; 0x30
 8009f98:	af00      	add	r7, sp, #0
 8009f9a:	60f8      	str	r0, [r7, #12]
 8009f9c:	60b9      	str	r1, [r7, #8]
 8009f9e:	607a      	str	r2, [r7, #4]
 8009fa0:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8009fa2:	68bb      	ldr	r3, [r7, #8]
 8009fa4:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8009fa6:	683b      	ldr	r3, [r7, #0]
 8009fa8:	2200      	movs	r2, #0
 8009faa:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	f107 0210 	add.w	r2, r7, #16
 8009fb2:	4611      	mov	r1, r2
 8009fb4:	4618      	mov	r0, r3
 8009fb6:	f7ff fda5 	bl	8009b04 <validate>
 8009fba:	4603      	mov	r3, r0
 8009fbc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8009fc0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d107      	bne.n	8009fd8 <f_write+0x44>
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	7d5b      	ldrb	r3, [r3, #21]
 8009fcc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8009fd0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d002      	beq.n	8009fde <f_write+0x4a>
 8009fd8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009fdc:	e16a      	b.n	800a2b4 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	7d1b      	ldrb	r3, [r3, #20]
 8009fe2:	f003 0302 	and.w	r3, r3, #2
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d101      	bne.n	8009fee <f_write+0x5a>
 8009fea:	2307      	movs	r3, #7
 8009fec:	e162      	b.n	800a2b4 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	699a      	ldr	r2, [r3, #24]
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	441a      	add	r2, r3
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	699b      	ldr	r3, [r3, #24]
 8009ffa:	429a      	cmp	r2, r3
 8009ffc:	f080 814c 	bcs.w	800a298 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	699b      	ldr	r3, [r3, #24]
 800a004:	43db      	mvns	r3, r3
 800a006:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800a008:	e146      	b.n	800a298 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	699b      	ldr	r3, [r3, #24]
 800a00e:	693a      	ldr	r2, [r7, #16]
 800a010:	8992      	ldrh	r2, [r2, #12]
 800a012:	fbb3 f1f2 	udiv	r1, r3, r2
 800a016:	fb01 f202 	mul.w	r2, r1, r2
 800a01a:	1a9b      	subs	r3, r3, r2
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	f040 80f1 	bne.w	800a204 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	699b      	ldr	r3, [r3, #24]
 800a026:	693a      	ldr	r2, [r7, #16]
 800a028:	8992      	ldrh	r2, [r2, #12]
 800a02a:	fbb3 f3f2 	udiv	r3, r3, r2
 800a02e:	693a      	ldr	r2, [r7, #16]
 800a030:	8952      	ldrh	r2, [r2, #10]
 800a032:	3a01      	subs	r2, #1
 800a034:	4013      	ands	r3, r2
 800a036:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800a038:	69bb      	ldr	r3, [r7, #24]
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d143      	bne.n	800a0c6 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	699b      	ldr	r3, [r3, #24]
 800a042:	2b00      	cmp	r3, #0
 800a044:	d10c      	bne.n	800a060 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	689b      	ldr	r3, [r3, #8]
 800a04a:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800a04c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d11a      	bne.n	800a088 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	2100      	movs	r1, #0
 800a056:	4618      	mov	r0, r3
 800a058:	f7fe f8bc 	bl	80081d4 <create_chain>
 800a05c:	62b8      	str	r0, [r7, #40]	; 0x28
 800a05e:	e013      	b.n	800a088 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a064:	2b00      	cmp	r3, #0
 800a066:	d007      	beq.n	800a078 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	699b      	ldr	r3, [r3, #24]
 800a06c:	4619      	mov	r1, r3
 800a06e:	68f8      	ldr	r0, [r7, #12]
 800a070:	f7fe f948 	bl	8008304 <clmt_clust>
 800a074:	62b8      	str	r0, [r7, #40]	; 0x28
 800a076:	e007      	b.n	800a088 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800a078:	68fa      	ldr	r2, [r7, #12]
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	69db      	ldr	r3, [r3, #28]
 800a07e:	4619      	mov	r1, r3
 800a080:	4610      	mov	r0, r2
 800a082:	f7fe f8a7 	bl	80081d4 <create_chain>
 800a086:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800a088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	f000 8109 	beq.w	800a2a2 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800a090:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a092:	2b01      	cmp	r3, #1
 800a094:	d104      	bne.n	800a0a0 <f_write+0x10c>
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	2202      	movs	r2, #2
 800a09a:	755a      	strb	r2, [r3, #21]
 800a09c:	2302      	movs	r3, #2
 800a09e:	e109      	b.n	800a2b4 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800a0a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0a2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a0a6:	d104      	bne.n	800a0b2 <f_write+0x11e>
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	2201      	movs	r2, #1
 800a0ac:	755a      	strb	r2, [r3, #21]
 800a0ae:	2301      	movs	r3, #1
 800a0b0:	e100      	b.n	800a2b4 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a0b6:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	689b      	ldr	r3, [r3, #8]
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d102      	bne.n	800a0c6 <f_write+0x132>
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a0c4:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	7d1b      	ldrb	r3, [r3, #20]
 800a0ca:	b25b      	sxtb	r3, r3
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	da18      	bge.n	800a102 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a0d0:	693b      	ldr	r3, [r7, #16]
 800a0d2:	7858      	ldrb	r0, [r3, #1]
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	6a1a      	ldr	r2, [r3, #32]
 800a0de:	2301      	movs	r3, #1
 800a0e0:	f7fd fa78 	bl	80075d4 <disk_write>
 800a0e4:	4603      	mov	r3, r0
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d004      	beq.n	800a0f4 <f_write+0x160>
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	2201      	movs	r2, #1
 800a0ee:	755a      	strb	r2, [r3, #21]
 800a0f0:	2301      	movs	r3, #1
 800a0f2:	e0df      	b.n	800a2b4 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	7d1b      	ldrb	r3, [r3, #20]
 800a0f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a0fc:	b2da      	uxtb	r2, r3
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800a102:	693a      	ldr	r2, [r7, #16]
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	69db      	ldr	r3, [r3, #28]
 800a108:	4619      	mov	r1, r3
 800a10a:	4610      	mov	r0, r2
 800a10c:	f7fd fdee 	bl	8007cec <clust2sect>
 800a110:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800a112:	697b      	ldr	r3, [r7, #20]
 800a114:	2b00      	cmp	r3, #0
 800a116:	d104      	bne.n	800a122 <f_write+0x18e>
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	2202      	movs	r2, #2
 800a11c:	755a      	strb	r2, [r3, #21]
 800a11e:	2302      	movs	r3, #2
 800a120:	e0c8      	b.n	800a2b4 <f_write+0x320>
			sect += csect;
 800a122:	697a      	ldr	r2, [r7, #20]
 800a124:	69bb      	ldr	r3, [r7, #24]
 800a126:	4413      	add	r3, r2
 800a128:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800a12a:	693b      	ldr	r3, [r7, #16]
 800a12c:	899b      	ldrh	r3, [r3, #12]
 800a12e:	461a      	mov	r2, r3
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	fbb3 f3f2 	udiv	r3, r3, r2
 800a136:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800a138:	6a3b      	ldr	r3, [r7, #32]
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d043      	beq.n	800a1c6 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800a13e:	69ba      	ldr	r2, [r7, #24]
 800a140:	6a3b      	ldr	r3, [r7, #32]
 800a142:	4413      	add	r3, r2
 800a144:	693a      	ldr	r2, [r7, #16]
 800a146:	8952      	ldrh	r2, [r2, #10]
 800a148:	4293      	cmp	r3, r2
 800a14a:	d905      	bls.n	800a158 <f_write+0x1c4>
					cc = fs->csize - csect;
 800a14c:	693b      	ldr	r3, [r7, #16]
 800a14e:	895b      	ldrh	r3, [r3, #10]
 800a150:	461a      	mov	r2, r3
 800a152:	69bb      	ldr	r3, [r7, #24]
 800a154:	1ad3      	subs	r3, r2, r3
 800a156:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a158:	693b      	ldr	r3, [r7, #16]
 800a15a:	7858      	ldrb	r0, [r3, #1]
 800a15c:	6a3b      	ldr	r3, [r7, #32]
 800a15e:	697a      	ldr	r2, [r7, #20]
 800a160:	69f9      	ldr	r1, [r7, #28]
 800a162:	f7fd fa37 	bl	80075d4 <disk_write>
 800a166:	4603      	mov	r3, r0
 800a168:	2b00      	cmp	r3, #0
 800a16a:	d004      	beq.n	800a176 <f_write+0x1e2>
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	2201      	movs	r2, #1
 800a170:	755a      	strb	r2, [r3, #21]
 800a172:	2301      	movs	r3, #1
 800a174:	e09e      	b.n	800a2b4 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	6a1a      	ldr	r2, [r3, #32]
 800a17a:	697b      	ldr	r3, [r7, #20]
 800a17c:	1ad3      	subs	r3, r2, r3
 800a17e:	6a3a      	ldr	r2, [r7, #32]
 800a180:	429a      	cmp	r2, r3
 800a182:	d918      	bls.n	800a1b6 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	6a1a      	ldr	r2, [r3, #32]
 800a18e:	697b      	ldr	r3, [r7, #20]
 800a190:	1ad3      	subs	r3, r2, r3
 800a192:	693a      	ldr	r2, [r7, #16]
 800a194:	8992      	ldrh	r2, [r2, #12]
 800a196:	fb02 f303 	mul.w	r3, r2, r3
 800a19a:	69fa      	ldr	r2, [r7, #28]
 800a19c:	18d1      	adds	r1, r2, r3
 800a19e:	693b      	ldr	r3, [r7, #16]
 800a1a0:	899b      	ldrh	r3, [r3, #12]
 800a1a2:	461a      	mov	r2, r3
 800a1a4:	f7fd fad6 	bl	8007754 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	7d1b      	ldrb	r3, [r3, #20]
 800a1ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a1b0:	b2da      	uxtb	r2, r3
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800a1b6:	693b      	ldr	r3, [r7, #16]
 800a1b8:	899b      	ldrh	r3, [r3, #12]
 800a1ba:	461a      	mov	r2, r3
 800a1bc:	6a3b      	ldr	r3, [r7, #32]
 800a1be:	fb02 f303 	mul.w	r3, r2, r3
 800a1c2:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800a1c4:	e04b      	b.n	800a25e <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	6a1b      	ldr	r3, [r3, #32]
 800a1ca:	697a      	ldr	r2, [r7, #20]
 800a1cc:	429a      	cmp	r2, r3
 800a1ce:	d016      	beq.n	800a1fe <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	699a      	ldr	r2, [r3, #24]
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800a1d8:	429a      	cmp	r2, r3
 800a1da:	d210      	bcs.n	800a1fe <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800a1dc:	693b      	ldr	r3, [r7, #16]
 800a1de:	7858      	ldrb	r0, [r3, #1]
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a1e6:	2301      	movs	r3, #1
 800a1e8:	697a      	ldr	r2, [r7, #20]
 800a1ea:	f7fd f9d3 	bl	8007594 <disk_read>
 800a1ee:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d004      	beq.n	800a1fe <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	2201      	movs	r2, #1
 800a1f8:	755a      	strb	r2, [r3, #21]
 800a1fa:	2301      	movs	r3, #1
 800a1fc:	e05a      	b.n	800a2b4 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	697a      	ldr	r2, [r7, #20]
 800a202:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800a204:	693b      	ldr	r3, [r7, #16]
 800a206:	899b      	ldrh	r3, [r3, #12]
 800a208:	4618      	mov	r0, r3
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	699b      	ldr	r3, [r3, #24]
 800a20e:	693a      	ldr	r2, [r7, #16]
 800a210:	8992      	ldrh	r2, [r2, #12]
 800a212:	fbb3 f1f2 	udiv	r1, r3, r2
 800a216:	fb01 f202 	mul.w	r2, r1, r2
 800a21a:	1a9b      	subs	r3, r3, r2
 800a21c:	1ac3      	subs	r3, r0, r3
 800a21e:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800a220:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	429a      	cmp	r2, r3
 800a226:	d901      	bls.n	800a22c <f_write+0x298>
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	699b      	ldr	r3, [r3, #24]
 800a236:	693a      	ldr	r2, [r7, #16]
 800a238:	8992      	ldrh	r2, [r2, #12]
 800a23a:	fbb3 f0f2 	udiv	r0, r3, r2
 800a23e:	fb00 f202 	mul.w	r2, r0, r2
 800a242:	1a9b      	subs	r3, r3, r2
 800a244:	440b      	add	r3, r1
 800a246:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a248:	69f9      	ldr	r1, [r7, #28]
 800a24a:	4618      	mov	r0, r3
 800a24c:	f7fd fa82 	bl	8007754 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	7d1b      	ldrb	r3, [r3, #20]
 800a254:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a258:	b2da      	uxtb	r2, r3
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800a25e:	69fa      	ldr	r2, [r7, #28]
 800a260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a262:	4413      	add	r3, r2
 800a264:	61fb      	str	r3, [r7, #28]
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	699a      	ldr	r2, [r3, #24]
 800a26a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a26c:	441a      	add	r2, r3
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	619a      	str	r2, [r3, #24]
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	68da      	ldr	r2, [r3, #12]
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	699b      	ldr	r3, [r3, #24]
 800a27a:	429a      	cmp	r2, r3
 800a27c:	bf38      	it	cc
 800a27e:	461a      	movcc	r2, r3
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	60da      	str	r2, [r3, #12]
 800a284:	683b      	ldr	r3, [r7, #0]
 800a286:	681a      	ldr	r2, [r3, #0]
 800a288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a28a:	441a      	add	r2, r3
 800a28c:	683b      	ldr	r3, [r7, #0]
 800a28e:	601a      	str	r2, [r3, #0]
 800a290:	687a      	ldr	r2, [r7, #4]
 800a292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a294:	1ad3      	subs	r3, r2, r3
 800a296:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	f47f aeb5 	bne.w	800a00a <f_write+0x76>
 800a2a0:	e000      	b.n	800a2a4 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800a2a2:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	7d1b      	ldrb	r3, [r3, #20]
 800a2a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a2ac:	b2da      	uxtb	r2, r3
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800a2b2:	2300      	movs	r3, #0
}
 800a2b4:	4618      	mov	r0, r3
 800a2b6:	3730      	adds	r7, #48	; 0x30
 800a2b8:	46bd      	mov	sp, r7
 800a2ba:	bd80      	pop	{r7, pc}

0800a2bc <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800a2bc:	b580      	push	{r7, lr}
 800a2be:	b086      	sub	sp, #24
 800a2c0:	af00      	add	r7, sp, #0
 800a2c2:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	f107 0208 	add.w	r2, r7, #8
 800a2ca:	4611      	mov	r1, r2
 800a2cc:	4618      	mov	r0, r3
 800a2ce:	f7ff fc19 	bl	8009b04 <validate>
 800a2d2:	4603      	mov	r3, r0
 800a2d4:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800a2d6:	7dfb      	ldrb	r3, [r7, #23]
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	d168      	bne.n	800a3ae <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	7d1b      	ldrb	r3, [r3, #20]
 800a2e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d062      	beq.n	800a3ae <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	7d1b      	ldrb	r3, [r3, #20]
 800a2ec:	b25b      	sxtb	r3, r3
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	da15      	bge.n	800a31e <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800a2f2:	68bb      	ldr	r3, [r7, #8]
 800a2f4:	7858      	ldrb	r0, [r3, #1]
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	6a1a      	ldr	r2, [r3, #32]
 800a300:	2301      	movs	r3, #1
 800a302:	f7fd f967 	bl	80075d4 <disk_write>
 800a306:	4603      	mov	r3, r0
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d001      	beq.n	800a310 <f_sync+0x54>
 800a30c:	2301      	movs	r3, #1
 800a30e:	e04f      	b.n	800a3b0 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	7d1b      	ldrb	r3, [r3, #20]
 800a314:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a318:	b2da      	uxtb	r2, r3
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800a31e:	f7fd f89b 	bl	8007458 <get_fattime>
 800a322:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800a324:	68ba      	ldr	r2, [r7, #8]
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a32a:	4619      	mov	r1, r3
 800a32c:	4610      	mov	r0, r2
 800a32e:	f7fd fc3f 	bl	8007bb0 <move_window>
 800a332:	4603      	mov	r3, r0
 800a334:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800a336:	7dfb      	ldrb	r3, [r7, #23]
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d138      	bne.n	800a3ae <f_sync+0xf2>
					dir = fp->dir_ptr;
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a340:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	330b      	adds	r3, #11
 800a346:	781a      	ldrb	r2, [r3, #0]
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	330b      	adds	r3, #11
 800a34c:	f042 0220 	orr.w	r2, r2, #32
 800a350:	b2d2      	uxtb	r2, r2
 800a352:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	6818      	ldr	r0, [r3, #0]
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	689b      	ldr	r3, [r3, #8]
 800a35c:	461a      	mov	r2, r3
 800a35e:	68f9      	ldr	r1, [r7, #12]
 800a360:	f7fe f9cd 	bl	80086fe <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	f103 021c 	add.w	r2, r3, #28
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	68db      	ldr	r3, [r3, #12]
 800a36e:	4619      	mov	r1, r3
 800a370:	4610      	mov	r0, r2
 800a372:	f7fd f9c3 	bl	80076fc <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	3316      	adds	r3, #22
 800a37a:	6939      	ldr	r1, [r7, #16]
 800a37c:	4618      	mov	r0, r3
 800a37e:	f7fd f9bd 	bl	80076fc <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	3312      	adds	r3, #18
 800a386:	2100      	movs	r1, #0
 800a388:	4618      	mov	r0, r3
 800a38a:	f7fd f99c 	bl	80076c6 <st_word>
					fs->wflag = 1;
 800a38e:	68bb      	ldr	r3, [r7, #8]
 800a390:	2201      	movs	r2, #1
 800a392:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800a394:	68bb      	ldr	r3, [r7, #8]
 800a396:	4618      	mov	r0, r3
 800a398:	f7fd fc38 	bl	8007c0c <sync_fs>
 800a39c:	4603      	mov	r3, r0
 800a39e:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	7d1b      	ldrb	r3, [r3, #20]
 800a3a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a3a8:	b2da      	uxtb	r2, r3
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800a3ae:	7dfb      	ldrb	r3, [r7, #23]
}
 800a3b0:	4618      	mov	r0, r3
 800a3b2:	3718      	adds	r7, #24
 800a3b4:	46bd      	mov	sp, r7
 800a3b6:	bd80      	pop	{r7, pc}

0800a3b8 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800a3b8:	b580      	push	{r7, lr}
 800a3ba:	b084      	sub	sp, #16
 800a3bc:	af00      	add	r7, sp, #0
 800a3be:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800a3c0:	6878      	ldr	r0, [r7, #4]
 800a3c2:	f7ff ff7b 	bl	800a2bc <f_sync>
 800a3c6:	4603      	mov	r3, r0
 800a3c8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800a3ca:	7bfb      	ldrb	r3, [r7, #15]
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d118      	bne.n	800a402 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	f107 0208 	add.w	r2, r7, #8
 800a3d6:	4611      	mov	r1, r2
 800a3d8:	4618      	mov	r0, r3
 800a3da:	f7ff fb93 	bl	8009b04 <validate>
 800a3de:	4603      	mov	r3, r0
 800a3e0:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800a3e2:	7bfb      	ldrb	r3, [r7, #15]
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d10c      	bne.n	800a402 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	691b      	ldr	r3, [r3, #16]
 800a3ec:	4618      	mov	r0, r3
 800a3ee:	f7fd fb3b 	bl	8007a68 <dec_lock>
 800a3f2:	4603      	mov	r3, r0
 800a3f4:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800a3f6:	7bfb      	ldrb	r3, [r7, #15]
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d102      	bne.n	800a402 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	2200      	movs	r2, #0
 800a400:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800a402:	7bfb      	ldrb	r3, [r7, #15]
}
 800a404:	4618      	mov	r0, r3
 800a406:	3710      	adds	r7, #16
 800a408:	46bd      	mov	sp, r7
 800a40a:	bd80      	pop	{r7, pc}

0800a40c <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800a40c:	b580      	push	{r7, lr}
 800a40e:	b090      	sub	sp, #64	; 0x40
 800a410:	af00      	add	r7, sp, #0
 800a412:	6078      	str	r0, [r7, #4]
 800a414:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	f107 0208 	add.w	r2, r7, #8
 800a41c:	4611      	mov	r1, r2
 800a41e:	4618      	mov	r0, r3
 800a420:	f7ff fb70 	bl	8009b04 <validate>
 800a424:	4603      	mov	r3, r0
 800a426:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800a42a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d103      	bne.n	800a43a <f_lseek+0x2e>
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	7d5b      	ldrb	r3, [r3, #21]
 800a436:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800a43a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d002      	beq.n	800a448 <f_lseek+0x3c>
 800a442:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800a446:	e201      	b.n	800a84c <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	f000 80d9 	beq.w	800a604 <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800a452:	683b      	ldr	r3, [r7, #0]
 800a454:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a458:	d15a      	bne.n	800a510 <f_lseek+0x104>
			tbl = fp->cltbl;
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a45e:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800a460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a462:	1d1a      	adds	r2, r3, #4
 800a464:	627a      	str	r2, [r7, #36]	; 0x24
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	617b      	str	r3, [r7, #20]
 800a46a:	2302      	movs	r3, #2
 800a46c:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	689b      	ldr	r3, [r3, #8]
 800a472:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 800a474:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a476:	2b00      	cmp	r3, #0
 800a478:	d03a      	beq.n	800a4f0 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800a47a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a47c:	613b      	str	r3, [r7, #16]
 800a47e:	2300      	movs	r3, #0
 800a480:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a482:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a484:	3302      	adds	r3, #2
 800a486:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 800a488:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a48a:	60fb      	str	r3, [r7, #12]
 800a48c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a48e:	3301      	adds	r3, #1
 800a490:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a496:	4618      	mov	r0, r3
 800a498:	f7fd fc47 	bl	8007d2a <get_fat>
 800a49c:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800a49e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4a0:	2b01      	cmp	r3, #1
 800a4a2:	d804      	bhi.n	800a4ae <f_lseek+0xa2>
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	2202      	movs	r2, #2
 800a4a8:	755a      	strb	r2, [r3, #21]
 800a4aa:	2302      	movs	r3, #2
 800a4ac:	e1ce      	b.n	800a84c <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800a4ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a4b4:	d104      	bne.n	800a4c0 <f_lseek+0xb4>
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	2201      	movs	r2, #1
 800a4ba:	755a      	strb	r2, [r3, #21]
 800a4bc:	2301      	movs	r3, #1
 800a4be:	e1c5      	b.n	800a84c <f_lseek+0x440>
					} while (cl == pcl + 1);
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	3301      	adds	r3, #1
 800a4c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a4c6:	429a      	cmp	r2, r3
 800a4c8:	d0de      	beq.n	800a488 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800a4ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a4cc:	697b      	ldr	r3, [r7, #20]
 800a4ce:	429a      	cmp	r2, r3
 800a4d0:	d809      	bhi.n	800a4e6 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800a4d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4d4:	1d1a      	adds	r2, r3, #4
 800a4d6:	627a      	str	r2, [r7, #36]	; 0x24
 800a4d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a4da:	601a      	str	r2, [r3, #0]
 800a4dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4de:	1d1a      	adds	r2, r3, #4
 800a4e0:	627a      	str	r2, [r7, #36]	; 0x24
 800a4e2:	693a      	ldr	r2, [r7, #16]
 800a4e4:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800a4e6:	68bb      	ldr	r3, [r7, #8]
 800a4e8:	69db      	ldr	r3, [r3, #28]
 800a4ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a4ec:	429a      	cmp	r2, r3
 800a4ee:	d3c4      	bcc.n	800a47a <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a4f6:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800a4f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a4fa:	697b      	ldr	r3, [r7, #20]
 800a4fc:	429a      	cmp	r2, r3
 800a4fe:	d803      	bhi.n	800a508 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800a500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a502:	2200      	movs	r2, #0
 800a504:	601a      	str	r2, [r3, #0]
 800a506:	e19f      	b.n	800a848 <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800a508:	2311      	movs	r3, #17
 800a50a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800a50e:	e19b      	b.n	800a848 <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	68db      	ldr	r3, [r3, #12]
 800a514:	683a      	ldr	r2, [r7, #0]
 800a516:	429a      	cmp	r2, r3
 800a518:	d902      	bls.n	800a520 <f_lseek+0x114>
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	68db      	ldr	r3, [r3, #12]
 800a51e:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	683a      	ldr	r2, [r7, #0]
 800a524:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800a526:	683b      	ldr	r3, [r7, #0]
 800a528:	2b00      	cmp	r3, #0
 800a52a:	f000 818d 	beq.w	800a848 <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 800a52e:	683b      	ldr	r3, [r7, #0]
 800a530:	3b01      	subs	r3, #1
 800a532:	4619      	mov	r1, r3
 800a534:	6878      	ldr	r0, [r7, #4]
 800a536:	f7fd fee5 	bl	8008304 <clmt_clust>
 800a53a:	4602      	mov	r2, r0
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800a540:	68ba      	ldr	r2, [r7, #8]
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	69db      	ldr	r3, [r3, #28]
 800a546:	4619      	mov	r1, r3
 800a548:	4610      	mov	r0, r2
 800a54a:	f7fd fbcf 	bl	8007cec <clust2sect>
 800a54e:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800a550:	69bb      	ldr	r3, [r7, #24]
 800a552:	2b00      	cmp	r3, #0
 800a554:	d104      	bne.n	800a560 <f_lseek+0x154>
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	2202      	movs	r2, #2
 800a55a:	755a      	strb	r2, [r3, #21]
 800a55c:	2302      	movs	r3, #2
 800a55e:	e175      	b.n	800a84c <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800a560:	683b      	ldr	r3, [r7, #0]
 800a562:	3b01      	subs	r3, #1
 800a564:	68ba      	ldr	r2, [r7, #8]
 800a566:	8992      	ldrh	r2, [r2, #12]
 800a568:	fbb3 f3f2 	udiv	r3, r3, r2
 800a56c:	68ba      	ldr	r2, [r7, #8]
 800a56e:	8952      	ldrh	r2, [r2, #10]
 800a570:	3a01      	subs	r2, #1
 800a572:	4013      	ands	r3, r2
 800a574:	69ba      	ldr	r2, [r7, #24]
 800a576:	4413      	add	r3, r2
 800a578:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	699b      	ldr	r3, [r3, #24]
 800a57e:	68ba      	ldr	r2, [r7, #8]
 800a580:	8992      	ldrh	r2, [r2, #12]
 800a582:	fbb3 f1f2 	udiv	r1, r3, r2
 800a586:	fb01 f202 	mul.w	r2, r1, r2
 800a58a:	1a9b      	subs	r3, r3, r2
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	f000 815b 	beq.w	800a848 <f_lseek+0x43c>
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	6a1b      	ldr	r3, [r3, #32]
 800a596:	69ba      	ldr	r2, [r7, #24]
 800a598:	429a      	cmp	r2, r3
 800a59a:	f000 8155 	beq.w	800a848 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	7d1b      	ldrb	r3, [r3, #20]
 800a5a2:	b25b      	sxtb	r3, r3
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	da18      	bge.n	800a5da <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a5a8:	68bb      	ldr	r3, [r7, #8]
 800a5aa:	7858      	ldrb	r0, [r3, #1]
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	6a1a      	ldr	r2, [r3, #32]
 800a5b6:	2301      	movs	r3, #1
 800a5b8:	f7fd f80c 	bl	80075d4 <disk_write>
 800a5bc:	4603      	mov	r3, r0
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d004      	beq.n	800a5cc <f_lseek+0x1c0>
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	2201      	movs	r2, #1
 800a5c6:	755a      	strb	r2, [r3, #21]
 800a5c8:	2301      	movs	r3, #1
 800a5ca:	e13f      	b.n	800a84c <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	7d1b      	ldrb	r3, [r3, #20]
 800a5d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a5d4:	b2da      	uxtb	r2, r3
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800a5da:	68bb      	ldr	r3, [r7, #8]
 800a5dc:	7858      	ldrb	r0, [r3, #1]
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a5e4:	2301      	movs	r3, #1
 800a5e6:	69ba      	ldr	r2, [r7, #24]
 800a5e8:	f7fc ffd4 	bl	8007594 <disk_read>
 800a5ec:	4603      	mov	r3, r0
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d004      	beq.n	800a5fc <f_lseek+0x1f0>
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	2201      	movs	r2, #1
 800a5f6:	755a      	strb	r2, [r3, #21]
 800a5f8:	2301      	movs	r3, #1
 800a5fa:	e127      	b.n	800a84c <f_lseek+0x440>
#endif
					fp->sect = dsc;
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	69ba      	ldr	r2, [r7, #24]
 800a600:	621a      	str	r2, [r3, #32]
 800a602:	e121      	b.n	800a848 <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	68db      	ldr	r3, [r3, #12]
 800a608:	683a      	ldr	r2, [r7, #0]
 800a60a:	429a      	cmp	r2, r3
 800a60c:	d908      	bls.n	800a620 <f_lseek+0x214>
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	7d1b      	ldrb	r3, [r3, #20]
 800a612:	f003 0302 	and.w	r3, r3, #2
 800a616:	2b00      	cmp	r3, #0
 800a618:	d102      	bne.n	800a620 <f_lseek+0x214>
			ofs = fp->obj.objsize;
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	68db      	ldr	r3, [r3, #12]
 800a61e:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	699b      	ldr	r3, [r3, #24]
 800a624:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800a626:	2300      	movs	r3, #0
 800a628:	637b      	str	r3, [r7, #52]	; 0x34
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a62e:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800a630:	683b      	ldr	r3, [r7, #0]
 800a632:	2b00      	cmp	r3, #0
 800a634:	f000 80b5 	beq.w	800a7a2 <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800a638:	68bb      	ldr	r3, [r7, #8]
 800a63a:	895b      	ldrh	r3, [r3, #10]
 800a63c:	461a      	mov	r2, r3
 800a63e:	68bb      	ldr	r3, [r7, #8]
 800a640:	899b      	ldrh	r3, [r3, #12]
 800a642:	fb02 f303 	mul.w	r3, r2, r3
 800a646:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800a648:	6a3b      	ldr	r3, [r7, #32]
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d01b      	beq.n	800a686 <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800a64e:	683b      	ldr	r3, [r7, #0]
 800a650:	1e5a      	subs	r2, r3, #1
 800a652:	69fb      	ldr	r3, [r7, #28]
 800a654:	fbb2 f2f3 	udiv	r2, r2, r3
 800a658:	6a3b      	ldr	r3, [r7, #32]
 800a65a:	1e59      	subs	r1, r3, #1
 800a65c:	69fb      	ldr	r3, [r7, #28]
 800a65e:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800a662:	429a      	cmp	r2, r3
 800a664:	d30f      	bcc.n	800a686 <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800a666:	6a3b      	ldr	r3, [r7, #32]
 800a668:	1e5a      	subs	r2, r3, #1
 800a66a:	69fb      	ldr	r3, [r7, #28]
 800a66c:	425b      	negs	r3, r3
 800a66e:	401a      	ands	r2, r3
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	699b      	ldr	r3, [r3, #24]
 800a678:	683a      	ldr	r2, [r7, #0]
 800a67a:	1ad3      	subs	r3, r2, r3
 800a67c:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	69db      	ldr	r3, [r3, #28]
 800a682:	63bb      	str	r3, [r7, #56]	; 0x38
 800a684:	e022      	b.n	800a6cc <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	689b      	ldr	r3, [r3, #8]
 800a68a:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800a68c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d119      	bne.n	800a6c6 <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	2100      	movs	r1, #0
 800a696:	4618      	mov	r0, r3
 800a698:	f7fd fd9c 	bl	80081d4 <create_chain>
 800a69c:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800a69e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6a0:	2b01      	cmp	r3, #1
 800a6a2:	d104      	bne.n	800a6ae <f_lseek+0x2a2>
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	2202      	movs	r2, #2
 800a6a8:	755a      	strb	r2, [r3, #21]
 800a6aa:	2302      	movs	r3, #2
 800a6ac:	e0ce      	b.n	800a84c <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800a6ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a6b4:	d104      	bne.n	800a6c0 <f_lseek+0x2b4>
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	2201      	movs	r2, #1
 800a6ba:	755a      	strb	r2, [r3, #21]
 800a6bc:	2301      	movs	r3, #1
 800a6be:	e0c5      	b.n	800a84c <f_lseek+0x440>
					fp->obj.sclust = clst;
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a6c4:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a6ca:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800a6cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	d067      	beq.n	800a7a2 <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 800a6d2:	e03a      	b.n	800a74a <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 800a6d4:	683a      	ldr	r2, [r7, #0]
 800a6d6:	69fb      	ldr	r3, [r7, #28]
 800a6d8:	1ad3      	subs	r3, r2, r3
 800a6da:	603b      	str	r3, [r7, #0]
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	699a      	ldr	r2, [r3, #24]
 800a6e0:	69fb      	ldr	r3, [r7, #28]
 800a6e2:	441a      	add	r2, r3
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	7d1b      	ldrb	r3, [r3, #20]
 800a6ec:	f003 0302 	and.w	r3, r3, #2
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d00b      	beq.n	800a70c <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a6f8:	4618      	mov	r0, r3
 800a6fa:	f7fd fd6b 	bl	80081d4 <create_chain>
 800a6fe:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800a700:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a702:	2b00      	cmp	r3, #0
 800a704:	d108      	bne.n	800a718 <f_lseek+0x30c>
							ofs = 0; break;
 800a706:	2300      	movs	r3, #0
 800a708:	603b      	str	r3, [r7, #0]
 800a70a:	e022      	b.n	800a752 <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a710:	4618      	mov	r0, r3
 800a712:	f7fd fb0a 	bl	8007d2a <get_fat>
 800a716:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800a718:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a71a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a71e:	d104      	bne.n	800a72a <f_lseek+0x31e>
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	2201      	movs	r2, #1
 800a724:	755a      	strb	r2, [r3, #21]
 800a726:	2301      	movs	r3, #1
 800a728:	e090      	b.n	800a84c <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800a72a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a72c:	2b01      	cmp	r3, #1
 800a72e:	d904      	bls.n	800a73a <f_lseek+0x32e>
 800a730:	68bb      	ldr	r3, [r7, #8]
 800a732:	69db      	ldr	r3, [r3, #28]
 800a734:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a736:	429a      	cmp	r2, r3
 800a738:	d304      	bcc.n	800a744 <f_lseek+0x338>
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	2202      	movs	r2, #2
 800a73e:	755a      	strb	r2, [r3, #21]
 800a740:	2302      	movs	r3, #2
 800a742:	e083      	b.n	800a84c <f_lseek+0x440>
					fp->clust = clst;
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a748:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800a74a:	683a      	ldr	r2, [r7, #0]
 800a74c:	69fb      	ldr	r3, [r7, #28]
 800a74e:	429a      	cmp	r2, r3
 800a750:	d8c0      	bhi.n	800a6d4 <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	699a      	ldr	r2, [r3, #24]
 800a756:	683b      	ldr	r3, [r7, #0]
 800a758:	441a      	add	r2, r3
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800a75e:	68bb      	ldr	r3, [r7, #8]
 800a760:	899b      	ldrh	r3, [r3, #12]
 800a762:	461a      	mov	r2, r3
 800a764:	683b      	ldr	r3, [r7, #0]
 800a766:	fbb3 f1f2 	udiv	r1, r3, r2
 800a76a:	fb01 f202 	mul.w	r2, r1, r2
 800a76e:	1a9b      	subs	r3, r3, r2
 800a770:	2b00      	cmp	r3, #0
 800a772:	d016      	beq.n	800a7a2 <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800a774:	68bb      	ldr	r3, [r7, #8]
 800a776:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a778:	4618      	mov	r0, r3
 800a77a:	f7fd fab7 	bl	8007cec <clust2sect>
 800a77e:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800a780:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a782:	2b00      	cmp	r3, #0
 800a784:	d104      	bne.n	800a790 <f_lseek+0x384>
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	2202      	movs	r2, #2
 800a78a:	755a      	strb	r2, [r3, #21]
 800a78c:	2302      	movs	r3, #2
 800a78e:	e05d      	b.n	800a84c <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 800a790:	68bb      	ldr	r3, [r7, #8]
 800a792:	899b      	ldrh	r3, [r3, #12]
 800a794:	461a      	mov	r2, r3
 800a796:	683b      	ldr	r3, [r7, #0]
 800a798:	fbb3 f3f2 	udiv	r3, r3, r2
 800a79c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a79e:	4413      	add	r3, r2
 800a7a0:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	699a      	ldr	r2, [r3, #24]
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	68db      	ldr	r3, [r3, #12]
 800a7aa:	429a      	cmp	r2, r3
 800a7ac:	d90a      	bls.n	800a7c4 <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	699a      	ldr	r2, [r3, #24]
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	7d1b      	ldrb	r3, [r3, #20]
 800a7ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a7be:	b2da      	uxtb	r2, r3
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	699b      	ldr	r3, [r3, #24]
 800a7c8:	68ba      	ldr	r2, [r7, #8]
 800a7ca:	8992      	ldrh	r2, [r2, #12]
 800a7cc:	fbb3 f1f2 	udiv	r1, r3, r2
 800a7d0:	fb01 f202 	mul.w	r2, r1, r2
 800a7d4:	1a9b      	subs	r3, r3, r2
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d036      	beq.n	800a848 <f_lseek+0x43c>
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	6a1b      	ldr	r3, [r3, #32]
 800a7de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a7e0:	429a      	cmp	r2, r3
 800a7e2:	d031      	beq.n	800a848 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	7d1b      	ldrb	r3, [r3, #20]
 800a7e8:	b25b      	sxtb	r3, r3
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	da18      	bge.n	800a820 <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a7ee:	68bb      	ldr	r3, [r7, #8]
 800a7f0:	7858      	ldrb	r0, [r3, #1]
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	6a1a      	ldr	r2, [r3, #32]
 800a7fc:	2301      	movs	r3, #1
 800a7fe:	f7fc fee9 	bl	80075d4 <disk_write>
 800a802:	4603      	mov	r3, r0
 800a804:	2b00      	cmp	r3, #0
 800a806:	d004      	beq.n	800a812 <f_lseek+0x406>
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	2201      	movs	r2, #1
 800a80c:	755a      	strb	r2, [r3, #21]
 800a80e:	2301      	movs	r3, #1
 800a810:	e01c      	b.n	800a84c <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	7d1b      	ldrb	r3, [r3, #20]
 800a816:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a81a:	b2da      	uxtb	r2, r3
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800a820:	68bb      	ldr	r3, [r7, #8]
 800a822:	7858      	ldrb	r0, [r3, #1]
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a82a:	2301      	movs	r3, #1
 800a82c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a82e:	f7fc feb1 	bl	8007594 <disk_read>
 800a832:	4603      	mov	r3, r0
 800a834:	2b00      	cmp	r3, #0
 800a836:	d004      	beq.n	800a842 <f_lseek+0x436>
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	2201      	movs	r2, #1
 800a83c:	755a      	strb	r2, [r3, #21]
 800a83e:	2301      	movs	r3, #1
 800a840:	e004      	b.n	800a84c <f_lseek+0x440>
#endif
			fp->sect = nsect;
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a846:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800a848:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800a84c:	4618      	mov	r0, r3
 800a84e:	3740      	adds	r7, #64	; 0x40
 800a850:	46bd      	mov	sp, r7
 800a852:	bd80      	pop	{r7, pc}

0800a854 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 800a854:	b580      	push	{r7, lr}
 800a856:	b0a0      	sub	sp, #128	; 0x80
 800a858:	af00      	add	r7, sp, #0
 800a85a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 800a85c:	2300      	movs	r3, #0
 800a85e:	67bb      	str	r3, [r7, #120]	; 0x78
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 800a860:	f107 010c 	add.w	r1, r7, #12
 800a864:	1d3b      	adds	r3, r7, #4
 800a866:	2202      	movs	r2, #2
 800a868:	4618      	mov	r0, r3
 800a86a:	f7fe fec5 	bl	80095f8 <find_volume>
 800a86e:	4603      	mov	r3, r0
 800a870:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	dj.obj.fs = fs;
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	647b      	str	r3, [r7, #68]	; 0x44
	if (res == FR_OK) {
 800a878:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	f040 808e 	bne.w	800a99e <f_unlink+0x14a>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 800a882:	687a      	ldr	r2, [r7, #4]
 800a884:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800a888:	4611      	mov	r1, r2
 800a88a:	4618      	mov	r0, r3
 800a88c:	f7fe fda4 	bl	80093d8 <follow_path>
 800a890:	4603      	mov	r3, r0
 800a892:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 800a896:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d108      	bne.n	800a8b0 <f_unlink+0x5c>
 800a89e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800a8a2:	2102      	movs	r1, #2
 800a8a4:	4618      	mov	r0, r3
 800a8a6:	f7fc ffd3 	bl	8007850 <chk_lock>
 800a8aa:	4603      	mov	r3, r0
 800a8ac:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
#endif
		if (res == FR_OK) {					/* The object is accessible */
 800a8b0:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d172      	bne.n	800a99e <f_unlink+0x14a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 800a8b8:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 800a8bc:	b25b      	sxtb	r3, r3
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	da03      	bge.n	800a8ca <f_unlink+0x76>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 800a8c2:	2306      	movs	r3, #6
 800a8c4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800a8c8:	e008      	b.n	800a8dc <f_unlink+0x88>
			} else {
				if (dj.obj.attr & AM_RDO) {
 800a8ca:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 800a8ce:	f003 0301 	and.w	r3, r3, #1
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	d002      	beq.n	800a8dc <f_unlink+0x88>
					res = FR_DENIED;		/* Cannot remove R/O object */
 800a8d6:	2307      	movs	r3, #7
 800a8d8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
				}
			}
			if (res == FR_OK) {
 800a8dc:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d134      	bne.n	800a94e <f_unlink+0xfa>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 800a8e4:	68fb      	ldr	r3, [r7, #12]
 800a8e6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800a8e8:	4611      	mov	r1, r2
 800a8ea:	4618      	mov	r0, r3
 800a8ec:	f7fd fee8 	bl	80086c0 <ld_clust>
 800a8f0:	67b8      	str	r0, [r7, #120]	; 0x78
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 800a8f2:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 800a8f6:	f003 0310 	and.w	r3, r3, #16
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d027      	beq.n	800a94e <f_unlink+0xfa>
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
						res = FR_DENIED;
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 800a902:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a904:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 800a906:	f107 0310 	add.w	r3, r7, #16
 800a90a:	2100      	movs	r1, #0
 800a90c:	4618      	mov	r0, r3
 800a90e:	f7fd fd31 	bl	8008374 <dir_sdi>
 800a912:	4603      	mov	r3, r0
 800a914:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
						if (res == FR_OK) {
 800a918:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d116      	bne.n	800a94e <f_unlink+0xfa>
							res = dir_read(&sdj, 0);			/* Read an item */
 800a920:	f107 0310 	add.w	r3, r7, #16
 800a924:	2100      	movs	r1, #0
 800a926:	4618      	mov	r0, r3
 800a928:	f7fe f8f5 	bl	8008b16 <dir_read>
 800a92c:	4603      	mov	r3, r0
 800a92e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 800a932:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800a936:	2b00      	cmp	r3, #0
 800a938:	d102      	bne.n	800a940 <f_unlink+0xec>
 800a93a:	2307      	movs	r3, #7
 800a93c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 800a940:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800a944:	2b04      	cmp	r3, #4
 800a946:	d102      	bne.n	800a94e <f_unlink+0xfa>
 800a948:	2300      	movs	r3, #0
 800a94a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
						}
					}
				}
			}
			if (res == FR_OK) {
 800a94e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800a952:	2b00      	cmp	r3, #0
 800a954:	d123      	bne.n	800a99e <f_unlink+0x14a>
				res = dir_remove(&dj);			/* Remove the directory entry */
 800a956:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800a95a:	4618      	mov	r0, r3
 800a95c:	f7fe fb3a 	bl	8008fd4 <dir_remove>
 800a960:	4603      	mov	r3, r0
 800a962:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 800a966:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d10c      	bne.n	800a988 <f_unlink+0x134>
 800a96e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a970:	2b00      	cmp	r3, #0
 800a972:	d009      	beq.n	800a988 <f_unlink+0x134>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 800a974:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800a978:	2200      	movs	r2, #0
 800a97a:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800a97c:	4618      	mov	r0, r3
 800a97e:	f7fd fbc4 	bl	800810a <remove_chain>
 800a982:	4603      	mov	r3, r0
 800a984:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 800a988:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	d106      	bne.n	800a99e <f_unlink+0x14a>
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	4618      	mov	r0, r3
 800a994:	f7fd f93a 	bl	8007c0c <sync_fs>
 800a998:	4603      	mov	r3, r0
 800a99a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 800a99e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800a9a2:	4618      	mov	r0, r3
 800a9a4:	3780      	adds	r7, #128	; 0x80
 800a9a6:	46bd      	mov	sp, r7
 800a9a8:	bd80      	pop	{r7, pc}
	...

0800a9ac <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800a9ac:	b480      	push	{r7}
 800a9ae:	b087      	sub	sp, #28
 800a9b0:	af00      	add	r7, sp, #0
 800a9b2:	60f8      	str	r0, [r7, #12]
 800a9b4:	60b9      	str	r1, [r7, #8]
 800a9b6:	4613      	mov	r3, r2
 800a9b8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800a9ba:	2301      	movs	r3, #1
 800a9bc:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800a9be:	2300      	movs	r3, #0
 800a9c0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800a9c2:	4b1f      	ldr	r3, [pc, #124]	; (800aa40 <FATFS_LinkDriverEx+0x94>)
 800a9c4:	7a5b      	ldrb	r3, [r3, #9]
 800a9c6:	b2db      	uxtb	r3, r3
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d131      	bne.n	800aa30 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800a9cc:	4b1c      	ldr	r3, [pc, #112]	; (800aa40 <FATFS_LinkDriverEx+0x94>)
 800a9ce:	7a5b      	ldrb	r3, [r3, #9]
 800a9d0:	b2db      	uxtb	r3, r3
 800a9d2:	461a      	mov	r2, r3
 800a9d4:	4b1a      	ldr	r3, [pc, #104]	; (800aa40 <FATFS_LinkDriverEx+0x94>)
 800a9d6:	2100      	movs	r1, #0
 800a9d8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800a9da:	4b19      	ldr	r3, [pc, #100]	; (800aa40 <FATFS_LinkDriverEx+0x94>)
 800a9dc:	7a5b      	ldrb	r3, [r3, #9]
 800a9de:	b2db      	uxtb	r3, r3
 800a9e0:	4a17      	ldr	r2, [pc, #92]	; (800aa40 <FATFS_LinkDriverEx+0x94>)
 800a9e2:	009b      	lsls	r3, r3, #2
 800a9e4:	4413      	add	r3, r2
 800a9e6:	68fa      	ldr	r2, [r7, #12]
 800a9e8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800a9ea:	4b15      	ldr	r3, [pc, #84]	; (800aa40 <FATFS_LinkDriverEx+0x94>)
 800a9ec:	7a5b      	ldrb	r3, [r3, #9]
 800a9ee:	b2db      	uxtb	r3, r3
 800a9f0:	461a      	mov	r2, r3
 800a9f2:	4b13      	ldr	r3, [pc, #76]	; (800aa40 <FATFS_LinkDriverEx+0x94>)
 800a9f4:	4413      	add	r3, r2
 800a9f6:	79fa      	ldrb	r2, [r7, #7]
 800a9f8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800a9fa:	4b11      	ldr	r3, [pc, #68]	; (800aa40 <FATFS_LinkDriverEx+0x94>)
 800a9fc:	7a5b      	ldrb	r3, [r3, #9]
 800a9fe:	b2db      	uxtb	r3, r3
 800aa00:	1c5a      	adds	r2, r3, #1
 800aa02:	b2d1      	uxtb	r1, r2
 800aa04:	4a0e      	ldr	r2, [pc, #56]	; (800aa40 <FATFS_LinkDriverEx+0x94>)
 800aa06:	7251      	strb	r1, [r2, #9]
 800aa08:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800aa0a:	7dbb      	ldrb	r3, [r7, #22]
 800aa0c:	3330      	adds	r3, #48	; 0x30
 800aa0e:	b2da      	uxtb	r2, r3
 800aa10:	68bb      	ldr	r3, [r7, #8]
 800aa12:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800aa14:	68bb      	ldr	r3, [r7, #8]
 800aa16:	3301      	adds	r3, #1
 800aa18:	223a      	movs	r2, #58	; 0x3a
 800aa1a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800aa1c:	68bb      	ldr	r3, [r7, #8]
 800aa1e:	3302      	adds	r3, #2
 800aa20:	222f      	movs	r2, #47	; 0x2f
 800aa22:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800aa24:	68bb      	ldr	r3, [r7, #8]
 800aa26:	3303      	adds	r3, #3
 800aa28:	2200      	movs	r2, #0
 800aa2a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800aa2c:	2300      	movs	r3, #0
 800aa2e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800aa30:	7dfb      	ldrb	r3, [r7, #23]
}
 800aa32:	4618      	mov	r0, r3
 800aa34:	371c      	adds	r7, #28
 800aa36:	46bd      	mov	sp, r7
 800aa38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa3c:	4770      	bx	lr
 800aa3e:	bf00      	nop
 800aa40:	20003f6c 	.word	0x20003f6c

0800aa44 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800aa44:	b580      	push	{r7, lr}
 800aa46:	b082      	sub	sp, #8
 800aa48:	af00      	add	r7, sp, #0
 800aa4a:	6078      	str	r0, [r7, #4]
 800aa4c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800aa4e:	2200      	movs	r2, #0
 800aa50:	6839      	ldr	r1, [r7, #0]
 800aa52:	6878      	ldr	r0, [r7, #4]
 800aa54:	f7ff ffaa 	bl	800a9ac <FATFS_LinkDriverEx>
 800aa58:	4603      	mov	r3, r0
}
 800aa5a:	4618      	mov	r0, r3
 800aa5c:	3708      	adds	r7, #8
 800aa5e:	46bd      	mov	sp, r7
 800aa60:	bd80      	pop	{r7, pc}
	...

0800aa64 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800aa64:	b480      	push	{r7}
 800aa66:	b085      	sub	sp, #20
 800aa68:	af00      	add	r7, sp, #0
 800aa6a:	4603      	mov	r3, r0
 800aa6c:	6039      	str	r1, [r7, #0]
 800aa6e:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800aa70:	88fb      	ldrh	r3, [r7, #6]
 800aa72:	2b7f      	cmp	r3, #127	; 0x7f
 800aa74:	d802      	bhi.n	800aa7c <ff_convert+0x18>
		c = chr;
 800aa76:	88fb      	ldrh	r3, [r7, #6]
 800aa78:	81fb      	strh	r3, [r7, #14]
 800aa7a:	e025      	b.n	800aac8 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800aa7c:	683b      	ldr	r3, [r7, #0]
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d00b      	beq.n	800aa9a <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800aa82:	88fb      	ldrh	r3, [r7, #6]
 800aa84:	2bff      	cmp	r3, #255	; 0xff
 800aa86:	d805      	bhi.n	800aa94 <ff_convert+0x30>
 800aa88:	88fb      	ldrh	r3, [r7, #6]
 800aa8a:	3b80      	subs	r3, #128	; 0x80
 800aa8c:	4a12      	ldr	r2, [pc, #72]	; (800aad8 <ff_convert+0x74>)
 800aa8e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800aa92:	e000      	b.n	800aa96 <ff_convert+0x32>
 800aa94:	2300      	movs	r3, #0
 800aa96:	81fb      	strh	r3, [r7, #14]
 800aa98:	e016      	b.n	800aac8 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800aa9a:	2300      	movs	r3, #0
 800aa9c:	81fb      	strh	r3, [r7, #14]
 800aa9e:	e009      	b.n	800aab4 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800aaa0:	89fb      	ldrh	r3, [r7, #14]
 800aaa2:	4a0d      	ldr	r2, [pc, #52]	; (800aad8 <ff_convert+0x74>)
 800aaa4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800aaa8:	88fa      	ldrh	r2, [r7, #6]
 800aaaa:	429a      	cmp	r2, r3
 800aaac:	d006      	beq.n	800aabc <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800aaae:	89fb      	ldrh	r3, [r7, #14]
 800aab0:	3301      	adds	r3, #1
 800aab2:	81fb      	strh	r3, [r7, #14]
 800aab4:	89fb      	ldrh	r3, [r7, #14]
 800aab6:	2b7f      	cmp	r3, #127	; 0x7f
 800aab8:	d9f2      	bls.n	800aaa0 <ff_convert+0x3c>
 800aaba:	e000      	b.n	800aabe <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800aabc:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800aabe:	89fb      	ldrh	r3, [r7, #14]
 800aac0:	3380      	adds	r3, #128	; 0x80
 800aac2:	b29b      	uxth	r3, r3
 800aac4:	b2db      	uxtb	r3, r3
 800aac6:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800aac8:	89fb      	ldrh	r3, [r7, #14]
}
 800aaca:	4618      	mov	r0, r3
 800aacc:	3714      	adds	r7, #20
 800aace:	46bd      	mov	sp, r7
 800aad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aad4:	4770      	bx	lr
 800aad6:	bf00      	nop
 800aad8:	0800dd30 	.word	0x0800dd30

0800aadc <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800aadc:	b480      	push	{r7}
 800aade:	b087      	sub	sp, #28
 800aae0:	af00      	add	r7, sp, #0
 800aae2:	4603      	mov	r3, r0
 800aae4:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800aae6:	88fb      	ldrh	r3, [r7, #6]
 800aae8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aaec:	d201      	bcs.n	800aaf2 <ff_wtoupper+0x16>
 800aaee:	4b3e      	ldr	r3, [pc, #248]	; (800abe8 <ff_wtoupper+0x10c>)
 800aaf0:	e000      	b.n	800aaf4 <ff_wtoupper+0x18>
 800aaf2:	4b3e      	ldr	r3, [pc, #248]	; (800abec <ff_wtoupper+0x110>)
 800aaf4:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800aaf6:	697b      	ldr	r3, [r7, #20]
 800aaf8:	1c9a      	adds	r2, r3, #2
 800aafa:	617a      	str	r2, [r7, #20]
 800aafc:	881b      	ldrh	r3, [r3, #0]
 800aafe:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800ab00:	8a7b      	ldrh	r3, [r7, #18]
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	d068      	beq.n	800abd8 <ff_wtoupper+0xfc>
 800ab06:	88fa      	ldrh	r2, [r7, #6]
 800ab08:	8a7b      	ldrh	r3, [r7, #18]
 800ab0a:	429a      	cmp	r2, r3
 800ab0c:	d364      	bcc.n	800abd8 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800ab0e:	697b      	ldr	r3, [r7, #20]
 800ab10:	1c9a      	adds	r2, r3, #2
 800ab12:	617a      	str	r2, [r7, #20]
 800ab14:	881b      	ldrh	r3, [r3, #0]
 800ab16:	823b      	strh	r3, [r7, #16]
 800ab18:	8a3b      	ldrh	r3, [r7, #16]
 800ab1a:	0a1b      	lsrs	r3, r3, #8
 800ab1c:	81fb      	strh	r3, [r7, #14]
 800ab1e:	8a3b      	ldrh	r3, [r7, #16]
 800ab20:	b2db      	uxtb	r3, r3
 800ab22:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800ab24:	88fa      	ldrh	r2, [r7, #6]
 800ab26:	8a79      	ldrh	r1, [r7, #18]
 800ab28:	8a3b      	ldrh	r3, [r7, #16]
 800ab2a:	440b      	add	r3, r1
 800ab2c:	429a      	cmp	r2, r3
 800ab2e:	da49      	bge.n	800abc4 <ff_wtoupper+0xe8>
			switch (cmd) {
 800ab30:	89fb      	ldrh	r3, [r7, #14]
 800ab32:	2b08      	cmp	r3, #8
 800ab34:	d84f      	bhi.n	800abd6 <ff_wtoupper+0xfa>
 800ab36:	a201      	add	r2, pc, #4	; (adr r2, 800ab3c <ff_wtoupper+0x60>)
 800ab38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab3c:	0800ab61 	.word	0x0800ab61
 800ab40:	0800ab73 	.word	0x0800ab73
 800ab44:	0800ab89 	.word	0x0800ab89
 800ab48:	0800ab91 	.word	0x0800ab91
 800ab4c:	0800ab99 	.word	0x0800ab99
 800ab50:	0800aba1 	.word	0x0800aba1
 800ab54:	0800aba9 	.word	0x0800aba9
 800ab58:	0800abb1 	.word	0x0800abb1
 800ab5c:	0800abb9 	.word	0x0800abb9
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800ab60:	88fa      	ldrh	r2, [r7, #6]
 800ab62:	8a7b      	ldrh	r3, [r7, #18]
 800ab64:	1ad3      	subs	r3, r2, r3
 800ab66:	005b      	lsls	r3, r3, #1
 800ab68:	697a      	ldr	r2, [r7, #20]
 800ab6a:	4413      	add	r3, r2
 800ab6c:	881b      	ldrh	r3, [r3, #0]
 800ab6e:	80fb      	strh	r3, [r7, #6]
 800ab70:	e027      	b.n	800abc2 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800ab72:	88fa      	ldrh	r2, [r7, #6]
 800ab74:	8a7b      	ldrh	r3, [r7, #18]
 800ab76:	1ad3      	subs	r3, r2, r3
 800ab78:	b29b      	uxth	r3, r3
 800ab7a:	f003 0301 	and.w	r3, r3, #1
 800ab7e:	b29b      	uxth	r3, r3
 800ab80:	88fa      	ldrh	r2, [r7, #6]
 800ab82:	1ad3      	subs	r3, r2, r3
 800ab84:	80fb      	strh	r3, [r7, #6]
 800ab86:	e01c      	b.n	800abc2 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800ab88:	88fb      	ldrh	r3, [r7, #6]
 800ab8a:	3b10      	subs	r3, #16
 800ab8c:	80fb      	strh	r3, [r7, #6]
 800ab8e:	e018      	b.n	800abc2 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800ab90:	88fb      	ldrh	r3, [r7, #6]
 800ab92:	3b20      	subs	r3, #32
 800ab94:	80fb      	strh	r3, [r7, #6]
 800ab96:	e014      	b.n	800abc2 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800ab98:	88fb      	ldrh	r3, [r7, #6]
 800ab9a:	3b30      	subs	r3, #48	; 0x30
 800ab9c:	80fb      	strh	r3, [r7, #6]
 800ab9e:	e010      	b.n	800abc2 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800aba0:	88fb      	ldrh	r3, [r7, #6]
 800aba2:	3b1a      	subs	r3, #26
 800aba4:	80fb      	strh	r3, [r7, #6]
 800aba6:	e00c      	b.n	800abc2 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800aba8:	88fb      	ldrh	r3, [r7, #6]
 800abaa:	3308      	adds	r3, #8
 800abac:	80fb      	strh	r3, [r7, #6]
 800abae:	e008      	b.n	800abc2 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800abb0:	88fb      	ldrh	r3, [r7, #6]
 800abb2:	3b50      	subs	r3, #80	; 0x50
 800abb4:	80fb      	strh	r3, [r7, #6]
 800abb6:	e004      	b.n	800abc2 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800abb8:	88fb      	ldrh	r3, [r7, #6]
 800abba:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800abbe:	80fb      	strh	r3, [r7, #6]
 800abc0:	bf00      	nop
			}
			break;
 800abc2:	e008      	b.n	800abd6 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800abc4:	89fb      	ldrh	r3, [r7, #14]
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d195      	bne.n	800aaf6 <ff_wtoupper+0x1a>
 800abca:	8a3b      	ldrh	r3, [r7, #16]
 800abcc:	005b      	lsls	r3, r3, #1
 800abce:	697a      	ldr	r2, [r7, #20]
 800abd0:	4413      	add	r3, r2
 800abd2:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800abd4:	e78f      	b.n	800aaf6 <ff_wtoupper+0x1a>
			break;
 800abd6:	bf00      	nop
	}

	return chr;
 800abd8:	88fb      	ldrh	r3, [r7, #6]
}
 800abda:	4618      	mov	r0, r3
 800abdc:	371c      	adds	r7, #28
 800abde:	46bd      	mov	sp, r7
 800abe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abe4:	4770      	bx	lr
 800abe6:	bf00      	nop
 800abe8:	0800de30 	.word	0x0800de30
 800abec:	0800e024 	.word	0x0800e024

0800abf0 <__errno>:
 800abf0:	4b01      	ldr	r3, [pc, #4]	; (800abf8 <__errno+0x8>)
 800abf2:	6818      	ldr	r0, [r3, #0]
 800abf4:	4770      	bx	lr
 800abf6:	bf00      	nop
 800abf8:	200000d4 	.word	0x200000d4

0800abfc <__libc_init_array>:
 800abfc:	b570      	push	{r4, r5, r6, lr}
 800abfe:	4d0d      	ldr	r5, [pc, #52]	; (800ac34 <__libc_init_array+0x38>)
 800ac00:	4c0d      	ldr	r4, [pc, #52]	; (800ac38 <__libc_init_array+0x3c>)
 800ac02:	1b64      	subs	r4, r4, r5
 800ac04:	10a4      	asrs	r4, r4, #2
 800ac06:	2600      	movs	r6, #0
 800ac08:	42a6      	cmp	r6, r4
 800ac0a:	d109      	bne.n	800ac20 <__libc_init_array+0x24>
 800ac0c:	4d0b      	ldr	r5, [pc, #44]	; (800ac3c <__libc_init_array+0x40>)
 800ac0e:	4c0c      	ldr	r4, [pc, #48]	; (800ac40 <__libc_init_array+0x44>)
 800ac10:	f000 fc8e 	bl	800b530 <_init>
 800ac14:	1b64      	subs	r4, r4, r5
 800ac16:	10a4      	asrs	r4, r4, #2
 800ac18:	2600      	movs	r6, #0
 800ac1a:	42a6      	cmp	r6, r4
 800ac1c:	d105      	bne.n	800ac2a <__libc_init_array+0x2e>
 800ac1e:	bd70      	pop	{r4, r5, r6, pc}
 800ac20:	f855 3b04 	ldr.w	r3, [r5], #4
 800ac24:	4798      	blx	r3
 800ac26:	3601      	adds	r6, #1
 800ac28:	e7ee      	b.n	800ac08 <__libc_init_array+0xc>
 800ac2a:	f855 3b04 	ldr.w	r3, [r5], #4
 800ac2e:	4798      	blx	r3
 800ac30:	3601      	adds	r6, #1
 800ac32:	e7f2      	b.n	800ac1a <__libc_init_array+0x1e>
 800ac34:	0800e17c 	.word	0x0800e17c
 800ac38:	0800e17c 	.word	0x0800e17c
 800ac3c:	0800e17c 	.word	0x0800e17c
 800ac40:	0800e180 	.word	0x0800e180

0800ac44 <memset>:
 800ac44:	4402      	add	r2, r0
 800ac46:	4603      	mov	r3, r0
 800ac48:	4293      	cmp	r3, r2
 800ac4a:	d100      	bne.n	800ac4e <memset+0xa>
 800ac4c:	4770      	bx	lr
 800ac4e:	f803 1b01 	strb.w	r1, [r3], #1
 800ac52:	e7f9      	b.n	800ac48 <memset+0x4>

0800ac54 <siprintf>:
 800ac54:	b40e      	push	{r1, r2, r3}
 800ac56:	b500      	push	{lr}
 800ac58:	b09c      	sub	sp, #112	; 0x70
 800ac5a:	ab1d      	add	r3, sp, #116	; 0x74
 800ac5c:	9002      	str	r0, [sp, #8]
 800ac5e:	9006      	str	r0, [sp, #24]
 800ac60:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ac64:	4809      	ldr	r0, [pc, #36]	; (800ac8c <siprintf+0x38>)
 800ac66:	9107      	str	r1, [sp, #28]
 800ac68:	9104      	str	r1, [sp, #16]
 800ac6a:	4909      	ldr	r1, [pc, #36]	; (800ac90 <siprintf+0x3c>)
 800ac6c:	f853 2b04 	ldr.w	r2, [r3], #4
 800ac70:	9105      	str	r1, [sp, #20]
 800ac72:	6800      	ldr	r0, [r0, #0]
 800ac74:	9301      	str	r3, [sp, #4]
 800ac76:	a902      	add	r1, sp, #8
 800ac78:	f000 f94a 	bl	800af10 <_svfiprintf_r>
 800ac7c:	9b02      	ldr	r3, [sp, #8]
 800ac7e:	2200      	movs	r2, #0
 800ac80:	701a      	strb	r2, [r3, #0]
 800ac82:	b01c      	add	sp, #112	; 0x70
 800ac84:	f85d eb04 	ldr.w	lr, [sp], #4
 800ac88:	b003      	add	sp, #12
 800ac8a:	4770      	bx	lr
 800ac8c:	200000d4 	.word	0x200000d4
 800ac90:	ffff0208 	.word	0xffff0208

0800ac94 <__retarget_lock_acquire_recursive>:
 800ac94:	4770      	bx	lr

0800ac96 <__retarget_lock_release_recursive>:
 800ac96:	4770      	bx	lr

0800ac98 <_free_r>:
 800ac98:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ac9a:	2900      	cmp	r1, #0
 800ac9c:	d044      	beq.n	800ad28 <_free_r+0x90>
 800ac9e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aca2:	9001      	str	r0, [sp, #4]
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	f1a1 0404 	sub.w	r4, r1, #4
 800acaa:	bfb8      	it	lt
 800acac:	18e4      	addlt	r4, r4, r3
 800acae:	f000 fbfb 	bl	800b4a8 <__malloc_lock>
 800acb2:	4a1e      	ldr	r2, [pc, #120]	; (800ad2c <_free_r+0x94>)
 800acb4:	9801      	ldr	r0, [sp, #4]
 800acb6:	6813      	ldr	r3, [r2, #0]
 800acb8:	b933      	cbnz	r3, 800acc8 <_free_r+0x30>
 800acba:	6063      	str	r3, [r4, #4]
 800acbc:	6014      	str	r4, [r2, #0]
 800acbe:	b003      	add	sp, #12
 800acc0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800acc4:	f000 bbf6 	b.w	800b4b4 <__malloc_unlock>
 800acc8:	42a3      	cmp	r3, r4
 800acca:	d908      	bls.n	800acde <_free_r+0x46>
 800accc:	6825      	ldr	r5, [r4, #0]
 800acce:	1961      	adds	r1, r4, r5
 800acd0:	428b      	cmp	r3, r1
 800acd2:	bf01      	itttt	eq
 800acd4:	6819      	ldreq	r1, [r3, #0]
 800acd6:	685b      	ldreq	r3, [r3, #4]
 800acd8:	1949      	addeq	r1, r1, r5
 800acda:	6021      	streq	r1, [r4, #0]
 800acdc:	e7ed      	b.n	800acba <_free_r+0x22>
 800acde:	461a      	mov	r2, r3
 800ace0:	685b      	ldr	r3, [r3, #4]
 800ace2:	b10b      	cbz	r3, 800ace8 <_free_r+0x50>
 800ace4:	42a3      	cmp	r3, r4
 800ace6:	d9fa      	bls.n	800acde <_free_r+0x46>
 800ace8:	6811      	ldr	r1, [r2, #0]
 800acea:	1855      	adds	r5, r2, r1
 800acec:	42a5      	cmp	r5, r4
 800acee:	d10b      	bne.n	800ad08 <_free_r+0x70>
 800acf0:	6824      	ldr	r4, [r4, #0]
 800acf2:	4421      	add	r1, r4
 800acf4:	1854      	adds	r4, r2, r1
 800acf6:	42a3      	cmp	r3, r4
 800acf8:	6011      	str	r1, [r2, #0]
 800acfa:	d1e0      	bne.n	800acbe <_free_r+0x26>
 800acfc:	681c      	ldr	r4, [r3, #0]
 800acfe:	685b      	ldr	r3, [r3, #4]
 800ad00:	6053      	str	r3, [r2, #4]
 800ad02:	4421      	add	r1, r4
 800ad04:	6011      	str	r1, [r2, #0]
 800ad06:	e7da      	b.n	800acbe <_free_r+0x26>
 800ad08:	d902      	bls.n	800ad10 <_free_r+0x78>
 800ad0a:	230c      	movs	r3, #12
 800ad0c:	6003      	str	r3, [r0, #0]
 800ad0e:	e7d6      	b.n	800acbe <_free_r+0x26>
 800ad10:	6825      	ldr	r5, [r4, #0]
 800ad12:	1961      	adds	r1, r4, r5
 800ad14:	428b      	cmp	r3, r1
 800ad16:	bf04      	itt	eq
 800ad18:	6819      	ldreq	r1, [r3, #0]
 800ad1a:	685b      	ldreq	r3, [r3, #4]
 800ad1c:	6063      	str	r3, [r4, #4]
 800ad1e:	bf04      	itt	eq
 800ad20:	1949      	addeq	r1, r1, r5
 800ad22:	6021      	streq	r1, [r4, #0]
 800ad24:	6054      	str	r4, [r2, #4]
 800ad26:	e7ca      	b.n	800acbe <_free_r+0x26>
 800ad28:	b003      	add	sp, #12
 800ad2a:	bd30      	pop	{r4, r5, pc}
 800ad2c:	20003f7c 	.word	0x20003f7c

0800ad30 <sbrk_aligned>:
 800ad30:	b570      	push	{r4, r5, r6, lr}
 800ad32:	4e0e      	ldr	r6, [pc, #56]	; (800ad6c <sbrk_aligned+0x3c>)
 800ad34:	460c      	mov	r4, r1
 800ad36:	6831      	ldr	r1, [r6, #0]
 800ad38:	4605      	mov	r5, r0
 800ad3a:	b911      	cbnz	r1, 800ad42 <sbrk_aligned+0x12>
 800ad3c:	f000 fb7c 	bl	800b438 <_sbrk_r>
 800ad40:	6030      	str	r0, [r6, #0]
 800ad42:	4621      	mov	r1, r4
 800ad44:	4628      	mov	r0, r5
 800ad46:	f000 fb77 	bl	800b438 <_sbrk_r>
 800ad4a:	1c43      	adds	r3, r0, #1
 800ad4c:	d00a      	beq.n	800ad64 <sbrk_aligned+0x34>
 800ad4e:	1cc4      	adds	r4, r0, #3
 800ad50:	f024 0403 	bic.w	r4, r4, #3
 800ad54:	42a0      	cmp	r0, r4
 800ad56:	d007      	beq.n	800ad68 <sbrk_aligned+0x38>
 800ad58:	1a21      	subs	r1, r4, r0
 800ad5a:	4628      	mov	r0, r5
 800ad5c:	f000 fb6c 	bl	800b438 <_sbrk_r>
 800ad60:	3001      	adds	r0, #1
 800ad62:	d101      	bne.n	800ad68 <sbrk_aligned+0x38>
 800ad64:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800ad68:	4620      	mov	r0, r4
 800ad6a:	bd70      	pop	{r4, r5, r6, pc}
 800ad6c:	20003f80 	.word	0x20003f80

0800ad70 <_malloc_r>:
 800ad70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad74:	1ccd      	adds	r5, r1, #3
 800ad76:	f025 0503 	bic.w	r5, r5, #3
 800ad7a:	3508      	adds	r5, #8
 800ad7c:	2d0c      	cmp	r5, #12
 800ad7e:	bf38      	it	cc
 800ad80:	250c      	movcc	r5, #12
 800ad82:	2d00      	cmp	r5, #0
 800ad84:	4607      	mov	r7, r0
 800ad86:	db01      	blt.n	800ad8c <_malloc_r+0x1c>
 800ad88:	42a9      	cmp	r1, r5
 800ad8a:	d905      	bls.n	800ad98 <_malloc_r+0x28>
 800ad8c:	230c      	movs	r3, #12
 800ad8e:	603b      	str	r3, [r7, #0]
 800ad90:	2600      	movs	r6, #0
 800ad92:	4630      	mov	r0, r6
 800ad94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad98:	4e2e      	ldr	r6, [pc, #184]	; (800ae54 <_malloc_r+0xe4>)
 800ad9a:	f000 fb85 	bl	800b4a8 <__malloc_lock>
 800ad9e:	6833      	ldr	r3, [r6, #0]
 800ada0:	461c      	mov	r4, r3
 800ada2:	bb34      	cbnz	r4, 800adf2 <_malloc_r+0x82>
 800ada4:	4629      	mov	r1, r5
 800ada6:	4638      	mov	r0, r7
 800ada8:	f7ff ffc2 	bl	800ad30 <sbrk_aligned>
 800adac:	1c43      	adds	r3, r0, #1
 800adae:	4604      	mov	r4, r0
 800adb0:	d14d      	bne.n	800ae4e <_malloc_r+0xde>
 800adb2:	6834      	ldr	r4, [r6, #0]
 800adb4:	4626      	mov	r6, r4
 800adb6:	2e00      	cmp	r6, #0
 800adb8:	d140      	bne.n	800ae3c <_malloc_r+0xcc>
 800adba:	6823      	ldr	r3, [r4, #0]
 800adbc:	4631      	mov	r1, r6
 800adbe:	4638      	mov	r0, r7
 800adc0:	eb04 0803 	add.w	r8, r4, r3
 800adc4:	f000 fb38 	bl	800b438 <_sbrk_r>
 800adc8:	4580      	cmp	r8, r0
 800adca:	d13a      	bne.n	800ae42 <_malloc_r+0xd2>
 800adcc:	6821      	ldr	r1, [r4, #0]
 800adce:	3503      	adds	r5, #3
 800add0:	1a6d      	subs	r5, r5, r1
 800add2:	f025 0503 	bic.w	r5, r5, #3
 800add6:	3508      	adds	r5, #8
 800add8:	2d0c      	cmp	r5, #12
 800adda:	bf38      	it	cc
 800addc:	250c      	movcc	r5, #12
 800adde:	4629      	mov	r1, r5
 800ade0:	4638      	mov	r0, r7
 800ade2:	f7ff ffa5 	bl	800ad30 <sbrk_aligned>
 800ade6:	3001      	adds	r0, #1
 800ade8:	d02b      	beq.n	800ae42 <_malloc_r+0xd2>
 800adea:	6823      	ldr	r3, [r4, #0]
 800adec:	442b      	add	r3, r5
 800adee:	6023      	str	r3, [r4, #0]
 800adf0:	e00e      	b.n	800ae10 <_malloc_r+0xa0>
 800adf2:	6822      	ldr	r2, [r4, #0]
 800adf4:	1b52      	subs	r2, r2, r5
 800adf6:	d41e      	bmi.n	800ae36 <_malloc_r+0xc6>
 800adf8:	2a0b      	cmp	r2, #11
 800adfa:	d916      	bls.n	800ae2a <_malloc_r+0xba>
 800adfc:	1961      	adds	r1, r4, r5
 800adfe:	42a3      	cmp	r3, r4
 800ae00:	6025      	str	r5, [r4, #0]
 800ae02:	bf18      	it	ne
 800ae04:	6059      	strne	r1, [r3, #4]
 800ae06:	6863      	ldr	r3, [r4, #4]
 800ae08:	bf08      	it	eq
 800ae0a:	6031      	streq	r1, [r6, #0]
 800ae0c:	5162      	str	r2, [r4, r5]
 800ae0e:	604b      	str	r3, [r1, #4]
 800ae10:	4638      	mov	r0, r7
 800ae12:	f104 060b 	add.w	r6, r4, #11
 800ae16:	f000 fb4d 	bl	800b4b4 <__malloc_unlock>
 800ae1a:	f026 0607 	bic.w	r6, r6, #7
 800ae1e:	1d23      	adds	r3, r4, #4
 800ae20:	1af2      	subs	r2, r6, r3
 800ae22:	d0b6      	beq.n	800ad92 <_malloc_r+0x22>
 800ae24:	1b9b      	subs	r3, r3, r6
 800ae26:	50a3      	str	r3, [r4, r2]
 800ae28:	e7b3      	b.n	800ad92 <_malloc_r+0x22>
 800ae2a:	6862      	ldr	r2, [r4, #4]
 800ae2c:	42a3      	cmp	r3, r4
 800ae2e:	bf0c      	ite	eq
 800ae30:	6032      	streq	r2, [r6, #0]
 800ae32:	605a      	strne	r2, [r3, #4]
 800ae34:	e7ec      	b.n	800ae10 <_malloc_r+0xa0>
 800ae36:	4623      	mov	r3, r4
 800ae38:	6864      	ldr	r4, [r4, #4]
 800ae3a:	e7b2      	b.n	800ada2 <_malloc_r+0x32>
 800ae3c:	4634      	mov	r4, r6
 800ae3e:	6876      	ldr	r6, [r6, #4]
 800ae40:	e7b9      	b.n	800adb6 <_malloc_r+0x46>
 800ae42:	230c      	movs	r3, #12
 800ae44:	603b      	str	r3, [r7, #0]
 800ae46:	4638      	mov	r0, r7
 800ae48:	f000 fb34 	bl	800b4b4 <__malloc_unlock>
 800ae4c:	e7a1      	b.n	800ad92 <_malloc_r+0x22>
 800ae4e:	6025      	str	r5, [r4, #0]
 800ae50:	e7de      	b.n	800ae10 <_malloc_r+0xa0>
 800ae52:	bf00      	nop
 800ae54:	20003f7c 	.word	0x20003f7c

0800ae58 <__ssputs_r>:
 800ae58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ae5c:	688e      	ldr	r6, [r1, #8]
 800ae5e:	429e      	cmp	r6, r3
 800ae60:	4682      	mov	sl, r0
 800ae62:	460c      	mov	r4, r1
 800ae64:	4690      	mov	r8, r2
 800ae66:	461f      	mov	r7, r3
 800ae68:	d838      	bhi.n	800aedc <__ssputs_r+0x84>
 800ae6a:	898a      	ldrh	r2, [r1, #12]
 800ae6c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ae70:	d032      	beq.n	800aed8 <__ssputs_r+0x80>
 800ae72:	6825      	ldr	r5, [r4, #0]
 800ae74:	6909      	ldr	r1, [r1, #16]
 800ae76:	eba5 0901 	sub.w	r9, r5, r1
 800ae7a:	6965      	ldr	r5, [r4, #20]
 800ae7c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ae80:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ae84:	3301      	adds	r3, #1
 800ae86:	444b      	add	r3, r9
 800ae88:	106d      	asrs	r5, r5, #1
 800ae8a:	429d      	cmp	r5, r3
 800ae8c:	bf38      	it	cc
 800ae8e:	461d      	movcc	r5, r3
 800ae90:	0553      	lsls	r3, r2, #21
 800ae92:	d531      	bpl.n	800aef8 <__ssputs_r+0xa0>
 800ae94:	4629      	mov	r1, r5
 800ae96:	f7ff ff6b 	bl	800ad70 <_malloc_r>
 800ae9a:	4606      	mov	r6, r0
 800ae9c:	b950      	cbnz	r0, 800aeb4 <__ssputs_r+0x5c>
 800ae9e:	230c      	movs	r3, #12
 800aea0:	f8ca 3000 	str.w	r3, [sl]
 800aea4:	89a3      	ldrh	r3, [r4, #12]
 800aea6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aeaa:	81a3      	strh	r3, [r4, #12]
 800aeac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800aeb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aeb4:	6921      	ldr	r1, [r4, #16]
 800aeb6:	464a      	mov	r2, r9
 800aeb8:	f000 face 	bl	800b458 <memcpy>
 800aebc:	89a3      	ldrh	r3, [r4, #12]
 800aebe:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800aec2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aec6:	81a3      	strh	r3, [r4, #12]
 800aec8:	6126      	str	r6, [r4, #16]
 800aeca:	6165      	str	r5, [r4, #20]
 800aecc:	444e      	add	r6, r9
 800aece:	eba5 0509 	sub.w	r5, r5, r9
 800aed2:	6026      	str	r6, [r4, #0]
 800aed4:	60a5      	str	r5, [r4, #8]
 800aed6:	463e      	mov	r6, r7
 800aed8:	42be      	cmp	r6, r7
 800aeda:	d900      	bls.n	800aede <__ssputs_r+0x86>
 800aedc:	463e      	mov	r6, r7
 800aede:	6820      	ldr	r0, [r4, #0]
 800aee0:	4632      	mov	r2, r6
 800aee2:	4641      	mov	r1, r8
 800aee4:	f000 fac6 	bl	800b474 <memmove>
 800aee8:	68a3      	ldr	r3, [r4, #8]
 800aeea:	1b9b      	subs	r3, r3, r6
 800aeec:	60a3      	str	r3, [r4, #8]
 800aeee:	6823      	ldr	r3, [r4, #0]
 800aef0:	4433      	add	r3, r6
 800aef2:	6023      	str	r3, [r4, #0]
 800aef4:	2000      	movs	r0, #0
 800aef6:	e7db      	b.n	800aeb0 <__ssputs_r+0x58>
 800aef8:	462a      	mov	r2, r5
 800aefa:	f000 fae1 	bl	800b4c0 <_realloc_r>
 800aefe:	4606      	mov	r6, r0
 800af00:	2800      	cmp	r0, #0
 800af02:	d1e1      	bne.n	800aec8 <__ssputs_r+0x70>
 800af04:	6921      	ldr	r1, [r4, #16]
 800af06:	4650      	mov	r0, sl
 800af08:	f7ff fec6 	bl	800ac98 <_free_r>
 800af0c:	e7c7      	b.n	800ae9e <__ssputs_r+0x46>
	...

0800af10 <_svfiprintf_r>:
 800af10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af14:	4698      	mov	r8, r3
 800af16:	898b      	ldrh	r3, [r1, #12]
 800af18:	061b      	lsls	r3, r3, #24
 800af1a:	b09d      	sub	sp, #116	; 0x74
 800af1c:	4607      	mov	r7, r0
 800af1e:	460d      	mov	r5, r1
 800af20:	4614      	mov	r4, r2
 800af22:	d50e      	bpl.n	800af42 <_svfiprintf_r+0x32>
 800af24:	690b      	ldr	r3, [r1, #16]
 800af26:	b963      	cbnz	r3, 800af42 <_svfiprintf_r+0x32>
 800af28:	2140      	movs	r1, #64	; 0x40
 800af2a:	f7ff ff21 	bl	800ad70 <_malloc_r>
 800af2e:	6028      	str	r0, [r5, #0]
 800af30:	6128      	str	r0, [r5, #16]
 800af32:	b920      	cbnz	r0, 800af3e <_svfiprintf_r+0x2e>
 800af34:	230c      	movs	r3, #12
 800af36:	603b      	str	r3, [r7, #0]
 800af38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800af3c:	e0d1      	b.n	800b0e2 <_svfiprintf_r+0x1d2>
 800af3e:	2340      	movs	r3, #64	; 0x40
 800af40:	616b      	str	r3, [r5, #20]
 800af42:	2300      	movs	r3, #0
 800af44:	9309      	str	r3, [sp, #36]	; 0x24
 800af46:	2320      	movs	r3, #32
 800af48:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800af4c:	f8cd 800c 	str.w	r8, [sp, #12]
 800af50:	2330      	movs	r3, #48	; 0x30
 800af52:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b0fc <_svfiprintf_r+0x1ec>
 800af56:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800af5a:	f04f 0901 	mov.w	r9, #1
 800af5e:	4623      	mov	r3, r4
 800af60:	469a      	mov	sl, r3
 800af62:	f813 2b01 	ldrb.w	r2, [r3], #1
 800af66:	b10a      	cbz	r2, 800af6c <_svfiprintf_r+0x5c>
 800af68:	2a25      	cmp	r2, #37	; 0x25
 800af6a:	d1f9      	bne.n	800af60 <_svfiprintf_r+0x50>
 800af6c:	ebba 0b04 	subs.w	fp, sl, r4
 800af70:	d00b      	beq.n	800af8a <_svfiprintf_r+0x7a>
 800af72:	465b      	mov	r3, fp
 800af74:	4622      	mov	r2, r4
 800af76:	4629      	mov	r1, r5
 800af78:	4638      	mov	r0, r7
 800af7a:	f7ff ff6d 	bl	800ae58 <__ssputs_r>
 800af7e:	3001      	adds	r0, #1
 800af80:	f000 80aa 	beq.w	800b0d8 <_svfiprintf_r+0x1c8>
 800af84:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800af86:	445a      	add	r2, fp
 800af88:	9209      	str	r2, [sp, #36]	; 0x24
 800af8a:	f89a 3000 	ldrb.w	r3, [sl]
 800af8e:	2b00      	cmp	r3, #0
 800af90:	f000 80a2 	beq.w	800b0d8 <_svfiprintf_r+0x1c8>
 800af94:	2300      	movs	r3, #0
 800af96:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800af9a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800af9e:	f10a 0a01 	add.w	sl, sl, #1
 800afa2:	9304      	str	r3, [sp, #16]
 800afa4:	9307      	str	r3, [sp, #28]
 800afa6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800afaa:	931a      	str	r3, [sp, #104]	; 0x68
 800afac:	4654      	mov	r4, sl
 800afae:	2205      	movs	r2, #5
 800afb0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800afb4:	4851      	ldr	r0, [pc, #324]	; (800b0fc <_svfiprintf_r+0x1ec>)
 800afb6:	f7f5 f913 	bl	80001e0 <memchr>
 800afba:	9a04      	ldr	r2, [sp, #16]
 800afbc:	b9d8      	cbnz	r0, 800aff6 <_svfiprintf_r+0xe6>
 800afbe:	06d0      	lsls	r0, r2, #27
 800afc0:	bf44      	itt	mi
 800afc2:	2320      	movmi	r3, #32
 800afc4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800afc8:	0711      	lsls	r1, r2, #28
 800afca:	bf44      	itt	mi
 800afcc:	232b      	movmi	r3, #43	; 0x2b
 800afce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800afd2:	f89a 3000 	ldrb.w	r3, [sl]
 800afd6:	2b2a      	cmp	r3, #42	; 0x2a
 800afd8:	d015      	beq.n	800b006 <_svfiprintf_r+0xf6>
 800afda:	9a07      	ldr	r2, [sp, #28]
 800afdc:	4654      	mov	r4, sl
 800afde:	2000      	movs	r0, #0
 800afe0:	f04f 0c0a 	mov.w	ip, #10
 800afe4:	4621      	mov	r1, r4
 800afe6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800afea:	3b30      	subs	r3, #48	; 0x30
 800afec:	2b09      	cmp	r3, #9
 800afee:	d94e      	bls.n	800b08e <_svfiprintf_r+0x17e>
 800aff0:	b1b0      	cbz	r0, 800b020 <_svfiprintf_r+0x110>
 800aff2:	9207      	str	r2, [sp, #28]
 800aff4:	e014      	b.n	800b020 <_svfiprintf_r+0x110>
 800aff6:	eba0 0308 	sub.w	r3, r0, r8
 800affa:	fa09 f303 	lsl.w	r3, r9, r3
 800affe:	4313      	orrs	r3, r2
 800b000:	9304      	str	r3, [sp, #16]
 800b002:	46a2      	mov	sl, r4
 800b004:	e7d2      	b.n	800afac <_svfiprintf_r+0x9c>
 800b006:	9b03      	ldr	r3, [sp, #12]
 800b008:	1d19      	adds	r1, r3, #4
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	9103      	str	r1, [sp, #12]
 800b00e:	2b00      	cmp	r3, #0
 800b010:	bfbb      	ittet	lt
 800b012:	425b      	neglt	r3, r3
 800b014:	f042 0202 	orrlt.w	r2, r2, #2
 800b018:	9307      	strge	r3, [sp, #28]
 800b01a:	9307      	strlt	r3, [sp, #28]
 800b01c:	bfb8      	it	lt
 800b01e:	9204      	strlt	r2, [sp, #16]
 800b020:	7823      	ldrb	r3, [r4, #0]
 800b022:	2b2e      	cmp	r3, #46	; 0x2e
 800b024:	d10c      	bne.n	800b040 <_svfiprintf_r+0x130>
 800b026:	7863      	ldrb	r3, [r4, #1]
 800b028:	2b2a      	cmp	r3, #42	; 0x2a
 800b02a:	d135      	bne.n	800b098 <_svfiprintf_r+0x188>
 800b02c:	9b03      	ldr	r3, [sp, #12]
 800b02e:	1d1a      	adds	r2, r3, #4
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	9203      	str	r2, [sp, #12]
 800b034:	2b00      	cmp	r3, #0
 800b036:	bfb8      	it	lt
 800b038:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800b03c:	3402      	adds	r4, #2
 800b03e:	9305      	str	r3, [sp, #20]
 800b040:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b10c <_svfiprintf_r+0x1fc>
 800b044:	7821      	ldrb	r1, [r4, #0]
 800b046:	2203      	movs	r2, #3
 800b048:	4650      	mov	r0, sl
 800b04a:	f7f5 f8c9 	bl	80001e0 <memchr>
 800b04e:	b140      	cbz	r0, 800b062 <_svfiprintf_r+0x152>
 800b050:	2340      	movs	r3, #64	; 0x40
 800b052:	eba0 000a 	sub.w	r0, r0, sl
 800b056:	fa03 f000 	lsl.w	r0, r3, r0
 800b05a:	9b04      	ldr	r3, [sp, #16]
 800b05c:	4303      	orrs	r3, r0
 800b05e:	3401      	adds	r4, #1
 800b060:	9304      	str	r3, [sp, #16]
 800b062:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b066:	4826      	ldr	r0, [pc, #152]	; (800b100 <_svfiprintf_r+0x1f0>)
 800b068:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b06c:	2206      	movs	r2, #6
 800b06e:	f7f5 f8b7 	bl	80001e0 <memchr>
 800b072:	2800      	cmp	r0, #0
 800b074:	d038      	beq.n	800b0e8 <_svfiprintf_r+0x1d8>
 800b076:	4b23      	ldr	r3, [pc, #140]	; (800b104 <_svfiprintf_r+0x1f4>)
 800b078:	bb1b      	cbnz	r3, 800b0c2 <_svfiprintf_r+0x1b2>
 800b07a:	9b03      	ldr	r3, [sp, #12]
 800b07c:	3307      	adds	r3, #7
 800b07e:	f023 0307 	bic.w	r3, r3, #7
 800b082:	3308      	adds	r3, #8
 800b084:	9303      	str	r3, [sp, #12]
 800b086:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b088:	4433      	add	r3, r6
 800b08a:	9309      	str	r3, [sp, #36]	; 0x24
 800b08c:	e767      	b.n	800af5e <_svfiprintf_r+0x4e>
 800b08e:	fb0c 3202 	mla	r2, ip, r2, r3
 800b092:	460c      	mov	r4, r1
 800b094:	2001      	movs	r0, #1
 800b096:	e7a5      	b.n	800afe4 <_svfiprintf_r+0xd4>
 800b098:	2300      	movs	r3, #0
 800b09a:	3401      	adds	r4, #1
 800b09c:	9305      	str	r3, [sp, #20]
 800b09e:	4619      	mov	r1, r3
 800b0a0:	f04f 0c0a 	mov.w	ip, #10
 800b0a4:	4620      	mov	r0, r4
 800b0a6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b0aa:	3a30      	subs	r2, #48	; 0x30
 800b0ac:	2a09      	cmp	r2, #9
 800b0ae:	d903      	bls.n	800b0b8 <_svfiprintf_r+0x1a8>
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	d0c5      	beq.n	800b040 <_svfiprintf_r+0x130>
 800b0b4:	9105      	str	r1, [sp, #20]
 800b0b6:	e7c3      	b.n	800b040 <_svfiprintf_r+0x130>
 800b0b8:	fb0c 2101 	mla	r1, ip, r1, r2
 800b0bc:	4604      	mov	r4, r0
 800b0be:	2301      	movs	r3, #1
 800b0c0:	e7f0      	b.n	800b0a4 <_svfiprintf_r+0x194>
 800b0c2:	ab03      	add	r3, sp, #12
 800b0c4:	9300      	str	r3, [sp, #0]
 800b0c6:	462a      	mov	r2, r5
 800b0c8:	4b0f      	ldr	r3, [pc, #60]	; (800b108 <_svfiprintf_r+0x1f8>)
 800b0ca:	a904      	add	r1, sp, #16
 800b0cc:	4638      	mov	r0, r7
 800b0ce:	f3af 8000 	nop.w
 800b0d2:	1c42      	adds	r2, r0, #1
 800b0d4:	4606      	mov	r6, r0
 800b0d6:	d1d6      	bne.n	800b086 <_svfiprintf_r+0x176>
 800b0d8:	89ab      	ldrh	r3, [r5, #12]
 800b0da:	065b      	lsls	r3, r3, #25
 800b0dc:	f53f af2c 	bmi.w	800af38 <_svfiprintf_r+0x28>
 800b0e0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b0e2:	b01d      	add	sp, #116	; 0x74
 800b0e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0e8:	ab03      	add	r3, sp, #12
 800b0ea:	9300      	str	r3, [sp, #0]
 800b0ec:	462a      	mov	r2, r5
 800b0ee:	4b06      	ldr	r3, [pc, #24]	; (800b108 <_svfiprintf_r+0x1f8>)
 800b0f0:	a904      	add	r1, sp, #16
 800b0f2:	4638      	mov	r0, r7
 800b0f4:	f000 f87a 	bl	800b1ec <_printf_i>
 800b0f8:	e7eb      	b.n	800b0d2 <_svfiprintf_r+0x1c2>
 800b0fa:	bf00      	nop
 800b0fc:	0800e140 	.word	0x0800e140
 800b100:	0800e14a 	.word	0x0800e14a
 800b104:	00000000 	.word	0x00000000
 800b108:	0800ae59 	.word	0x0800ae59
 800b10c:	0800e146 	.word	0x0800e146

0800b110 <_printf_common>:
 800b110:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b114:	4616      	mov	r6, r2
 800b116:	4699      	mov	r9, r3
 800b118:	688a      	ldr	r2, [r1, #8]
 800b11a:	690b      	ldr	r3, [r1, #16]
 800b11c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b120:	4293      	cmp	r3, r2
 800b122:	bfb8      	it	lt
 800b124:	4613      	movlt	r3, r2
 800b126:	6033      	str	r3, [r6, #0]
 800b128:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b12c:	4607      	mov	r7, r0
 800b12e:	460c      	mov	r4, r1
 800b130:	b10a      	cbz	r2, 800b136 <_printf_common+0x26>
 800b132:	3301      	adds	r3, #1
 800b134:	6033      	str	r3, [r6, #0]
 800b136:	6823      	ldr	r3, [r4, #0]
 800b138:	0699      	lsls	r1, r3, #26
 800b13a:	bf42      	ittt	mi
 800b13c:	6833      	ldrmi	r3, [r6, #0]
 800b13e:	3302      	addmi	r3, #2
 800b140:	6033      	strmi	r3, [r6, #0]
 800b142:	6825      	ldr	r5, [r4, #0]
 800b144:	f015 0506 	ands.w	r5, r5, #6
 800b148:	d106      	bne.n	800b158 <_printf_common+0x48>
 800b14a:	f104 0a19 	add.w	sl, r4, #25
 800b14e:	68e3      	ldr	r3, [r4, #12]
 800b150:	6832      	ldr	r2, [r6, #0]
 800b152:	1a9b      	subs	r3, r3, r2
 800b154:	42ab      	cmp	r3, r5
 800b156:	dc26      	bgt.n	800b1a6 <_printf_common+0x96>
 800b158:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b15c:	1e13      	subs	r3, r2, #0
 800b15e:	6822      	ldr	r2, [r4, #0]
 800b160:	bf18      	it	ne
 800b162:	2301      	movne	r3, #1
 800b164:	0692      	lsls	r2, r2, #26
 800b166:	d42b      	bmi.n	800b1c0 <_printf_common+0xb0>
 800b168:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b16c:	4649      	mov	r1, r9
 800b16e:	4638      	mov	r0, r7
 800b170:	47c0      	blx	r8
 800b172:	3001      	adds	r0, #1
 800b174:	d01e      	beq.n	800b1b4 <_printf_common+0xa4>
 800b176:	6823      	ldr	r3, [r4, #0]
 800b178:	68e5      	ldr	r5, [r4, #12]
 800b17a:	6832      	ldr	r2, [r6, #0]
 800b17c:	f003 0306 	and.w	r3, r3, #6
 800b180:	2b04      	cmp	r3, #4
 800b182:	bf08      	it	eq
 800b184:	1aad      	subeq	r5, r5, r2
 800b186:	68a3      	ldr	r3, [r4, #8]
 800b188:	6922      	ldr	r2, [r4, #16]
 800b18a:	bf0c      	ite	eq
 800b18c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b190:	2500      	movne	r5, #0
 800b192:	4293      	cmp	r3, r2
 800b194:	bfc4      	itt	gt
 800b196:	1a9b      	subgt	r3, r3, r2
 800b198:	18ed      	addgt	r5, r5, r3
 800b19a:	2600      	movs	r6, #0
 800b19c:	341a      	adds	r4, #26
 800b19e:	42b5      	cmp	r5, r6
 800b1a0:	d11a      	bne.n	800b1d8 <_printf_common+0xc8>
 800b1a2:	2000      	movs	r0, #0
 800b1a4:	e008      	b.n	800b1b8 <_printf_common+0xa8>
 800b1a6:	2301      	movs	r3, #1
 800b1a8:	4652      	mov	r2, sl
 800b1aa:	4649      	mov	r1, r9
 800b1ac:	4638      	mov	r0, r7
 800b1ae:	47c0      	blx	r8
 800b1b0:	3001      	adds	r0, #1
 800b1b2:	d103      	bne.n	800b1bc <_printf_common+0xac>
 800b1b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b1b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b1bc:	3501      	adds	r5, #1
 800b1be:	e7c6      	b.n	800b14e <_printf_common+0x3e>
 800b1c0:	18e1      	adds	r1, r4, r3
 800b1c2:	1c5a      	adds	r2, r3, #1
 800b1c4:	2030      	movs	r0, #48	; 0x30
 800b1c6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b1ca:	4422      	add	r2, r4
 800b1cc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b1d0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b1d4:	3302      	adds	r3, #2
 800b1d6:	e7c7      	b.n	800b168 <_printf_common+0x58>
 800b1d8:	2301      	movs	r3, #1
 800b1da:	4622      	mov	r2, r4
 800b1dc:	4649      	mov	r1, r9
 800b1de:	4638      	mov	r0, r7
 800b1e0:	47c0      	blx	r8
 800b1e2:	3001      	adds	r0, #1
 800b1e4:	d0e6      	beq.n	800b1b4 <_printf_common+0xa4>
 800b1e6:	3601      	adds	r6, #1
 800b1e8:	e7d9      	b.n	800b19e <_printf_common+0x8e>
	...

0800b1ec <_printf_i>:
 800b1ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b1f0:	7e0f      	ldrb	r7, [r1, #24]
 800b1f2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b1f4:	2f78      	cmp	r7, #120	; 0x78
 800b1f6:	4691      	mov	r9, r2
 800b1f8:	4680      	mov	r8, r0
 800b1fa:	460c      	mov	r4, r1
 800b1fc:	469a      	mov	sl, r3
 800b1fe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b202:	d807      	bhi.n	800b214 <_printf_i+0x28>
 800b204:	2f62      	cmp	r7, #98	; 0x62
 800b206:	d80a      	bhi.n	800b21e <_printf_i+0x32>
 800b208:	2f00      	cmp	r7, #0
 800b20a:	f000 80d8 	beq.w	800b3be <_printf_i+0x1d2>
 800b20e:	2f58      	cmp	r7, #88	; 0x58
 800b210:	f000 80a3 	beq.w	800b35a <_printf_i+0x16e>
 800b214:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b218:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b21c:	e03a      	b.n	800b294 <_printf_i+0xa8>
 800b21e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b222:	2b15      	cmp	r3, #21
 800b224:	d8f6      	bhi.n	800b214 <_printf_i+0x28>
 800b226:	a101      	add	r1, pc, #4	; (adr r1, 800b22c <_printf_i+0x40>)
 800b228:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b22c:	0800b285 	.word	0x0800b285
 800b230:	0800b299 	.word	0x0800b299
 800b234:	0800b215 	.word	0x0800b215
 800b238:	0800b215 	.word	0x0800b215
 800b23c:	0800b215 	.word	0x0800b215
 800b240:	0800b215 	.word	0x0800b215
 800b244:	0800b299 	.word	0x0800b299
 800b248:	0800b215 	.word	0x0800b215
 800b24c:	0800b215 	.word	0x0800b215
 800b250:	0800b215 	.word	0x0800b215
 800b254:	0800b215 	.word	0x0800b215
 800b258:	0800b3a5 	.word	0x0800b3a5
 800b25c:	0800b2c9 	.word	0x0800b2c9
 800b260:	0800b387 	.word	0x0800b387
 800b264:	0800b215 	.word	0x0800b215
 800b268:	0800b215 	.word	0x0800b215
 800b26c:	0800b3c7 	.word	0x0800b3c7
 800b270:	0800b215 	.word	0x0800b215
 800b274:	0800b2c9 	.word	0x0800b2c9
 800b278:	0800b215 	.word	0x0800b215
 800b27c:	0800b215 	.word	0x0800b215
 800b280:	0800b38f 	.word	0x0800b38f
 800b284:	682b      	ldr	r3, [r5, #0]
 800b286:	1d1a      	adds	r2, r3, #4
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	602a      	str	r2, [r5, #0]
 800b28c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b290:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b294:	2301      	movs	r3, #1
 800b296:	e0a3      	b.n	800b3e0 <_printf_i+0x1f4>
 800b298:	6820      	ldr	r0, [r4, #0]
 800b29a:	6829      	ldr	r1, [r5, #0]
 800b29c:	0606      	lsls	r6, r0, #24
 800b29e:	f101 0304 	add.w	r3, r1, #4
 800b2a2:	d50a      	bpl.n	800b2ba <_printf_i+0xce>
 800b2a4:	680e      	ldr	r6, [r1, #0]
 800b2a6:	602b      	str	r3, [r5, #0]
 800b2a8:	2e00      	cmp	r6, #0
 800b2aa:	da03      	bge.n	800b2b4 <_printf_i+0xc8>
 800b2ac:	232d      	movs	r3, #45	; 0x2d
 800b2ae:	4276      	negs	r6, r6
 800b2b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b2b4:	485e      	ldr	r0, [pc, #376]	; (800b430 <_printf_i+0x244>)
 800b2b6:	230a      	movs	r3, #10
 800b2b8:	e019      	b.n	800b2ee <_printf_i+0x102>
 800b2ba:	680e      	ldr	r6, [r1, #0]
 800b2bc:	602b      	str	r3, [r5, #0]
 800b2be:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b2c2:	bf18      	it	ne
 800b2c4:	b236      	sxthne	r6, r6
 800b2c6:	e7ef      	b.n	800b2a8 <_printf_i+0xbc>
 800b2c8:	682b      	ldr	r3, [r5, #0]
 800b2ca:	6820      	ldr	r0, [r4, #0]
 800b2cc:	1d19      	adds	r1, r3, #4
 800b2ce:	6029      	str	r1, [r5, #0]
 800b2d0:	0601      	lsls	r1, r0, #24
 800b2d2:	d501      	bpl.n	800b2d8 <_printf_i+0xec>
 800b2d4:	681e      	ldr	r6, [r3, #0]
 800b2d6:	e002      	b.n	800b2de <_printf_i+0xf2>
 800b2d8:	0646      	lsls	r6, r0, #25
 800b2da:	d5fb      	bpl.n	800b2d4 <_printf_i+0xe8>
 800b2dc:	881e      	ldrh	r6, [r3, #0]
 800b2de:	4854      	ldr	r0, [pc, #336]	; (800b430 <_printf_i+0x244>)
 800b2e0:	2f6f      	cmp	r7, #111	; 0x6f
 800b2e2:	bf0c      	ite	eq
 800b2e4:	2308      	moveq	r3, #8
 800b2e6:	230a      	movne	r3, #10
 800b2e8:	2100      	movs	r1, #0
 800b2ea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b2ee:	6865      	ldr	r5, [r4, #4]
 800b2f0:	60a5      	str	r5, [r4, #8]
 800b2f2:	2d00      	cmp	r5, #0
 800b2f4:	bfa2      	ittt	ge
 800b2f6:	6821      	ldrge	r1, [r4, #0]
 800b2f8:	f021 0104 	bicge.w	r1, r1, #4
 800b2fc:	6021      	strge	r1, [r4, #0]
 800b2fe:	b90e      	cbnz	r6, 800b304 <_printf_i+0x118>
 800b300:	2d00      	cmp	r5, #0
 800b302:	d04d      	beq.n	800b3a0 <_printf_i+0x1b4>
 800b304:	4615      	mov	r5, r2
 800b306:	fbb6 f1f3 	udiv	r1, r6, r3
 800b30a:	fb03 6711 	mls	r7, r3, r1, r6
 800b30e:	5dc7      	ldrb	r7, [r0, r7]
 800b310:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b314:	4637      	mov	r7, r6
 800b316:	42bb      	cmp	r3, r7
 800b318:	460e      	mov	r6, r1
 800b31a:	d9f4      	bls.n	800b306 <_printf_i+0x11a>
 800b31c:	2b08      	cmp	r3, #8
 800b31e:	d10b      	bne.n	800b338 <_printf_i+0x14c>
 800b320:	6823      	ldr	r3, [r4, #0]
 800b322:	07de      	lsls	r6, r3, #31
 800b324:	d508      	bpl.n	800b338 <_printf_i+0x14c>
 800b326:	6923      	ldr	r3, [r4, #16]
 800b328:	6861      	ldr	r1, [r4, #4]
 800b32a:	4299      	cmp	r1, r3
 800b32c:	bfde      	ittt	le
 800b32e:	2330      	movle	r3, #48	; 0x30
 800b330:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b334:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800b338:	1b52      	subs	r2, r2, r5
 800b33a:	6122      	str	r2, [r4, #16]
 800b33c:	f8cd a000 	str.w	sl, [sp]
 800b340:	464b      	mov	r3, r9
 800b342:	aa03      	add	r2, sp, #12
 800b344:	4621      	mov	r1, r4
 800b346:	4640      	mov	r0, r8
 800b348:	f7ff fee2 	bl	800b110 <_printf_common>
 800b34c:	3001      	adds	r0, #1
 800b34e:	d14c      	bne.n	800b3ea <_printf_i+0x1fe>
 800b350:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b354:	b004      	add	sp, #16
 800b356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b35a:	4835      	ldr	r0, [pc, #212]	; (800b430 <_printf_i+0x244>)
 800b35c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800b360:	6829      	ldr	r1, [r5, #0]
 800b362:	6823      	ldr	r3, [r4, #0]
 800b364:	f851 6b04 	ldr.w	r6, [r1], #4
 800b368:	6029      	str	r1, [r5, #0]
 800b36a:	061d      	lsls	r5, r3, #24
 800b36c:	d514      	bpl.n	800b398 <_printf_i+0x1ac>
 800b36e:	07df      	lsls	r7, r3, #31
 800b370:	bf44      	itt	mi
 800b372:	f043 0320 	orrmi.w	r3, r3, #32
 800b376:	6023      	strmi	r3, [r4, #0]
 800b378:	b91e      	cbnz	r6, 800b382 <_printf_i+0x196>
 800b37a:	6823      	ldr	r3, [r4, #0]
 800b37c:	f023 0320 	bic.w	r3, r3, #32
 800b380:	6023      	str	r3, [r4, #0]
 800b382:	2310      	movs	r3, #16
 800b384:	e7b0      	b.n	800b2e8 <_printf_i+0xfc>
 800b386:	6823      	ldr	r3, [r4, #0]
 800b388:	f043 0320 	orr.w	r3, r3, #32
 800b38c:	6023      	str	r3, [r4, #0]
 800b38e:	2378      	movs	r3, #120	; 0x78
 800b390:	4828      	ldr	r0, [pc, #160]	; (800b434 <_printf_i+0x248>)
 800b392:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b396:	e7e3      	b.n	800b360 <_printf_i+0x174>
 800b398:	0659      	lsls	r1, r3, #25
 800b39a:	bf48      	it	mi
 800b39c:	b2b6      	uxthmi	r6, r6
 800b39e:	e7e6      	b.n	800b36e <_printf_i+0x182>
 800b3a0:	4615      	mov	r5, r2
 800b3a2:	e7bb      	b.n	800b31c <_printf_i+0x130>
 800b3a4:	682b      	ldr	r3, [r5, #0]
 800b3a6:	6826      	ldr	r6, [r4, #0]
 800b3a8:	6961      	ldr	r1, [r4, #20]
 800b3aa:	1d18      	adds	r0, r3, #4
 800b3ac:	6028      	str	r0, [r5, #0]
 800b3ae:	0635      	lsls	r5, r6, #24
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	d501      	bpl.n	800b3b8 <_printf_i+0x1cc>
 800b3b4:	6019      	str	r1, [r3, #0]
 800b3b6:	e002      	b.n	800b3be <_printf_i+0x1d2>
 800b3b8:	0670      	lsls	r0, r6, #25
 800b3ba:	d5fb      	bpl.n	800b3b4 <_printf_i+0x1c8>
 800b3bc:	8019      	strh	r1, [r3, #0]
 800b3be:	2300      	movs	r3, #0
 800b3c0:	6123      	str	r3, [r4, #16]
 800b3c2:	4615      	mov	r5, r2
 800b3c4:	e7ba      	b.n	800b33c <_printf_i+0x150>
 800b3c6:	682b      	ldr	r3, [r5, #0]
 800b3c8:	1d1a      	adds	r2, r3, #4
 800b3ca:	602a      	str	r2, [r5, #0]
 800b3cc:	681d      	ldr	r5, [r3, #0]
 800b3ce:	6862      	ldr	r2, [r4, #4]
 800b3d0:	2100      	movs	r1, #0
 800b3d2:	4628      	mov	r0, r5
 800b3d4:	f7f4 ff04 	bl	80001e0 <memchr>
 800b3d8:	b108      	cbz	r0, 800b3de <_printf_i+0x1f2>
 800b3da:	1b40      	subs	r0, r0, r5
 800b3dc:	6060      	str	r0, [r4, #4]
 800b3de:	6863      	ldr	r3, [r4, #4]
 800b3e0:	6123      	str	r3, [r4, #16]
 800b3e2:	2300      	movs	r3, #0
 800b3e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b3e8:	e7a8      	b.n	800b33c <_printf_i+0x150>
 800b3ea:	6923      	ldr	r3, [r4, #16]
 800b3ec:	462a      	mov	r2, r5
 800b3ee:	4649      	mov	r1, r9
 800b3f0:	4640      	mov	r0, r8
 800b3f2:	47d0      	blx	sl
 800b3f4:	3001      	adds	r0, #1
 800b3f6:	d0ab      	beq.n	800b350 <_printf_i+0x164>
 800b3f8:	6823      	ldr	r3, [r4, #0]
 800b3fa:	079b      	lsls	r3, r3, #30
 800b3fc:	d413      	bmi.n	800b426 <_printf_i+0x23a>
 800b3fe:	68e0      	ldr	r0, [r4, #12]
 800b400:	9b03      	ldr	r3, [sp, #12]
 800b402:	4298      	cmp	r0, r3
 800b404:	bfb8      	it	lt
 800b406:	4618      	movlt	r0, r3
 800b408:	e7a4      	b.n	800b354 <_printf_i+0x168>
 800b40a:	2301      	movs	r3, #1
 800b40c:	4632      	mov	r2, r6
 800b40e:	4649      	mov	r1, r9
 800b410:	4640      	mov	r0, r8
 800b412:	47d0      	blx	sl
 800b414:	3001      	adds	r0, #1
 800b416:	d09b      	beq.n	800b350 <_printf_i+0x164>
 800b418:	3501      	adds	r5, #1
 800b41a:	68e3      	ldr	r3, [r4, #12]
 800b41c:	9903      	ldr	r1, [sp, #12]
 800b41e:	1a5b      	subs	r3, r3, r1
 800b420:	42ab      	cmp	r3, r5
 800b422:	dcf2      	bgt.n	800b40a <_printf_i+0x21e>
 800b424:	e7eb      	b.n	800b3fe <_printf_i+0x212>
 800b426:	2500      	movs	r5, #0
 800b428:	f104 0619 	add.w	r6, r4, #25
 800b42c:	e7f5      	b.n	800b41a <_printf_i+0x22e>
 800b42e:	bf00      	nop
 800b430:	0800e151 	.word	0x0800e151
 800b434:	0800e162 	.word	0x0800e162

0800b438 <_sbrk_r>:
 800b438:	b538      	push	{r3, r4, r5, lr}
 800b43a:	4d06      	ldr	r5, [pc, #24]	; (800b454 <_sbrk_r+0x1c>)
 800b43c:	2300      	movs	r3, #0
 800b43e:	4604      	mov	r4, r0
 800b440:	4608      	mov	r0, r1
 800b442:	602b      	str	r3, [r5, #0]
 800b444:	f7f7 fc5a 	bl	8002cfc <_sbrk>
 800b448:	1c43      	adds	r3, r0, #1
 800b44a:	d102      	bne.n	800b452 <_sbrk_r+0x1a>
 800b44c:	682b      	ldr	r3, [r5, #0]
 800b44e:	b103      	cbz	r3, 800b452 <_sbrk_r+0x1a>
 800b450:	6023      	str	r3, [r4, #0]
 800b452:	bd38      	pop	{r3, r4, r5, pc}
 800b454:	20003f84 	.word	0x20003f84

0800b458 <memcpy>:
 800b458:	440a      	add	r2, r1
 800b45a:	4291      	cmp	r1, r2
 800b45c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800b460:	d100      	bne.n	800b464 <memcpy+0xc>
 800b462:	4770      	bx	lr
 800b464:	b510      	push	{r4, lr}
 800b466:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b46a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b46e:	4291      	cmp	r1, r2
 800b470:	d1f9      	bne.n	800b466 <memcpy+0xe>
 800b472:	bd10      	pop	{r4, pc}

0800b474 <memmove>:
 800b474:	4288      	cmp	r0, r1
 800b476:	b510      	push	{r4, lr}
 800b478:	eb01 0402 	add.w	r4, r1, r2
 800b47c:	d902      	bls.n	800b484 <memmove+0x10>
 800b47e:	4284      	cmp	r4, r0
 800b480:	4623      	mov	r3, r4
 800b482:	d807      	bhi.n	800b494 <memmove+0x20>
 800b484:	1e43      	subs	r3, r0, #1
 800b486:	42a1      	cmp	r1, r4
 800b488:	d008      	beq.n	800b49c <memmove+0x28>
 800b48a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b48e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b492:	e7f8      	b.n	800b486 <memmove+0x12>
 800b494:	4402      	add	r2, r0
 800b496:	4601      	mov	r1, r0
 800b498:	428a      	cmp	r2, r1
 800b49a:	d100      	bne.n	800b49e <memmove+0x2a>
 800b49c:	bd10      	pop	{r4, pc}
 800b49e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b4a2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b4a6:	e7f7      	b.n	800b498 <memmove+0x24>

0800b4a8 <__malloc_lock>:
 800b4a8:	4801      	ldr	r0, [pc, #4]	; (800b4b0 <__malloc_lock+0x8>)
 800b4aa:	f7ff bbf3 	b.w	800ac94 <__retarget_lock_acquire_recursive>
 800b4ae:	bf00      	nop
 800b4b0:	20003f78 	.word	0x20003f78

0800b4b4 <__malloc_unlock>:
 800b4b4:	4801      	ldr	r0, [pc, #4]	; (800b4bc <__malloc_unlock+0x8>)
 800b4b6:	f7ff bbee 	b.w	800ac96 <__retarget_lock_release_recursive>
 800b4ba:	bf00      	nop
 800b4bc:	20003f78 	.word	0x20003f78

0800b4c0 <_realloc_r>:
 800b4c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b4c4:	4680      	mov	r8, r0
 800b4c6:	4614      	mov	r4, r2
 800b4c8:	460e      	mov	r6, r1
 800b4ca:	b921      	cbnz	r1, 800b4d6 <_realloc_r+0x16>
 800b4cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b4d0:	4611      	mov	r1, r2
 800b4d2:	f7ff bc4d 	b.w	800ad70 <_malloc_r>
 800b4d6:	b92a      	cbnz	r2, 800b4e4 <_realloc_r+0x24>
 800b4d8:	f7ff fbde 	bl	800ac98 <_free_r>
 800b4dc:	4625      	mov	r5, r4
 800b4de:	4628      	mov	r0, r5
 800b4e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b4e4:	f000 f81b 	bl	800b51e <_malloc_usable_size_r>
 800b4e8:	4284      	cmp	r4, r0
 800b4ea:	4607      	mov	r7, r0
 800b4ec:	d802      	bhi.n	800b4f4 <_realloc_r+0x34>
 800b4ee:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b4f2:	d812      	bhi.n	800b51a <_realloc_r+0x5a>
 800b4f4:	4621      	mov	r1, r4
 800b4f6:	4640      	mov	r0, r8
 800b4f8:	f7ff fc3a 	bl	800ad70 <_malloc_r>
 800b4fc:	4605      	mov	r5, r0
 800b4fe:	2800      	cmp	r0, #0
 800b500:	d0ed      	beq.n	800b4de <_realloc_r+0x1e>
 800b502:	42bc      	cmp	r4, r7
 800b504:	4622      	mov	r2, r4
 800b506:	4631      	mov	r1, r6
 800b508:	bf28      	it	cs
 800b50a:	463a      	movcs	r2, r7
 800b50c:	f7ff ffa4 	bl	800b458 <memcpy>
 800b510:	4631      	mov	r1, r6
 800b512:	4640      	mov	r0, r8
 800b514:	f7ff fbc0 	bl	800ac98 <_free_r>
 800b518:	e7e1      	b.n	800b4de <_realloc_r+0x1e>
 800b51a:	4635      	mov	r5, r6
 800b51c:	e7df      	b.n	800b4de <_realloc_r+0x1e>

0800b51e <_malloc_usable_size_r>:
 800b51e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b522:	1f18      	subs	r0, r3, #4
 800b524:	2b00      	cmp	r3, #0
 800b526:	bfbc      	itt	lt
 800b528:	580b      	ldrlt	r3, [r1, r0]
 800b52a:	18c0      	addlt	r0, r0, r3
 800b52c:	4770      	bx	lr
	...

0800b530 <_init>:
 800b530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b532:	bf00      	nop
 800b534:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b536:	bc08      	pop	{r3}
 800b538:	469e      	mov	lr, r3
 800b53a:	4770      	bx	lr

0800b53c <_fini>:
 800b53c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b53e:	bf00      	nop
 800b540:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b542:	bc08      	pop	{r3}
 800b544:	469e      	mov	lr, r3
 800b546:	4770      	bx	lr
